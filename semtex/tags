!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
1	.\semtex\femlib\netlib.f	/^1     if(fb.ge.fc)then$/;"	l	subroutine:braket	file:
10	.\semtex\femlib\canfft.f	/^ 10         CONTINUE$/;"	l	subroutine:DMRCFT	file:
10	.\semtex\femlib\canfft.f	/^ 10   CONTINUE$/;"	l	subroutine:DFFT1	file:
10	.\semtex\femlib\canfft.f	/^ 10   CONTINUE$/;"	l	subroutine:DPASS1	file:
10	.\semtex\femlib\canfft.f	/^ 10   CONTINUE$/;"	l	subroutine:DPREFT	file:
10	.\semtex\femlib\canfft.f	/^ 10   CONTINUE$/;"	l	subroutine:FACTOR	file:
10	.\semtex\femlib\netlib.f	/^   10   CONTINUE$/;"	l	subroutine:ZUNIK	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	function:DGAMLN	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:XERROR	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZACAI	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZASYI	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZBINU	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZBKNU	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZBUNI	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZKSCL	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZMLRI	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZRATI	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZS1S2	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZSERI	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZUNI1	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZUNI2	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZUOIK	file:
10	.\semtex\femlib\netlib.f	/^   10 CONTINUE$/;"	l	subroutine:ZWRSK	file:
10	.\semtex\femlib\netlib.f	/^   10 IF (AI.EQ.0.0D+0) GO TO 60$/;"	l	subroutine:AZLOG	file:
10	.\semtex\femlib\netlib.f	/^   10 IF (AI.GT.0.0D+0) GO TO 60$/;"	l	subroutine:AZSQRT	file:
10	.\semtex\femlib\netlib.f	/^   10 Q = V\/U$/;"	l	function:AZABS	file:
10	.\semtex\femlib\netlib.f	/^   10 eps=d1mach(4)$/;"	l	function:fbrent	file:
10	.\semtex\femlib\netlib.f	/^ 10               CONTINUE$/;"	l	function:D1MACH	file:
10	.\semtex\femlib\netlib.f	/^ 10               CONTINUE$/;"	l	function:I1MACH	file:
10	.\semtex\femlib\temfftd.F	/^ 10      CONTINUE$/;"	l	subroutine:PRF235	file:
100	.\semtex\femlib\canfft.f	/^ 100        CONTINUE$/;"	l	subroutine:DMRCFT	file:
100	.\semtex\femlib\netlib.f	/^  100    CONTINUE                                                       $/;"	l	subroutine:GENRCM	file:
100	.\semtex\femlib\netlib.f	/^  100    JSTRT = XLS(NLVL)                                              $/;"	l	subroutine:FNROOT	file:
100	.\semtex\femlib\netlib.f	/^  100    LBEGIN = LVLEND + 1                                            $/;"	l	subroutine:DEGREE	file:
100	.\semtex\femlib\netlib.f	/^  100    LBEGIN = LVLEND + 1                                            $/;"	l	subroutine:RCM	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZAIRY	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZASYI	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZBINU	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZBKNU	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZMLRI	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZSERI	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZUNI1	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZUNI2	file:
100	.\semtex\femlib\netlib.f	/^  100 CONTINUE$/;"	l	subroutine:ZUOIK	file:
100	.\semtex\femlib\netlib.f	/^  100 if (d.le.0.0d0) go to 110$/;"	l	function:fbrent	file:
100	.\semtex\femlib\temfftd.F	/^ 100     CONTINUE$/;"	l	subroutine:DMPFFT	file:
101	.\semtex\femlib\netlib.f	/^  101    CALL RADB4 (IDO,L1,CH,C,WA(IW),WA(IX2),WA(IX3))$/;"	l	subroutine:DRFFTB	file:
101	.\semtex\femlib\netlib.f	/^  101    CALL RADF4 (IDO,L1,CH,C,WA(IW),WA(IX2),WA(IX3))$/;"	l	subroutine:DRFFTF	file:
101	.\semtex\femlib\netlib.f	/^  101    CONTINUE$/;"	l	subroutine:RADBG	file:
101	.\semtex\femlib\netlib.f	/^  101 CONTINUE$/;"	l	subroutine:RADB2	file:
101	.\semtex\femlib\netlib.f	/^  101 CONTINUE$/;"	l	subroutine:RADB3	file:
101	.\semtex\femlib\netlib.f	/^  101 CONTINUE$/;"	l	subroutine:RADB4	file:
101	.\semtex\femlib\netlib.f	/^  101 CONTINUE$/;"	l	subroutine:RADB5	file:
101	.\semtex\femlib\netlib.f	/^  101 CONTINUE$/;"	l	subroutine:RADF2	file:
101	.\semtex\femlib\netlib.f	/^  101 CONTINUE$/;"	l	subroutine:RADF3	file:
101	.\semtex\femlib\netlib.f	/^  101 CONTINUE$/;"	l	subroutine:RADF4	file:
101	.\semtex\femlib\netlib.f	/^  101 CONTINUE$/;"	l	subroutine:RADF5	file:
101	.\semtex\femlib\netlib.f	/^  101 CONTINUE$/;"	l	subroutine:RADFG	file:
101	.\semtex\femlib\netlib.f	/^  101 J = J+1$/;"	l	subroutine:DRFFTI	file:
102	.\semtex\femlib\netlib.f	/^  102    CONTINUE$/;"	l	subroutine:RADB3	file:
102	.\semtex\femlib\netlib.f	/^  102    CONTINUE$/;"	l	subroutine:RADB5	file:
102	.\semtex\femlib\netlib.f	/^  102    CONTINUE$/;"	l	subroutine:RADF3	file:
102	.\semtex\femlib\netlib.f	/^  102    CONTINUE$/;"	l	subroutine:RADF5	file:
102	.\semtex\femlib\netlib.f	/^  102    CONTINUE$/;"	l	subroutine:RADFG	file:
102	.\semtex\femlib\netlib.f	/^  102    IF (IP .NE. 2) GO TO 104$/;"	l	subroutine:DRFFTF	file:
102	.\semtex\femlib\netlib.f	/^  102    NA = 1-NA$/;"	l	subroutine:DRFFTB	file:
102	.\semtex\femlib\netlib.f	/^  102 CONTINUE$/;"	l	subroutine:RADBG	file:
102	.\semtex\femlib\netlib.f	/^  102 IDP2 = IDO+2$/;"	l	subroutine:RADB2	file:
102	.\semtex\femlib\netlib.f	/^  102 IDP2 = IDO+2$/;"	l	subroutine:RADB4	file:
102	.\semtex\femlib\netlib.f	/^  102 IDP2 = IDO+2$/;"	l	subroutine:RADF2	file:
102	.\semtex\femlib\netlib.f	/^  102 IDP2 = IDO+2$/;"	l	subroutine:RADF4	file:
102	.\semtex\femlib\netlib.f	/^  102 NTRY = NTRYH(J)$/;"	l	subroutine:DRFFTI	file:
103	.\semtex\femlib\netlib.f	/^  103    CALL RADF2 (IDO,L1,CH,C,WA(IW))$/;"	l	subroutine:DRFFTF	file:
103	.\semtex\femlib\netlib.f	/^  103    CONTINUE$/;"	l	subroutine:RADB2	file:
103	.\semtex\femlib\netlib.f	/^  103    CONTINUE$/;"	l	subroutine:RADB4	file:
103	.\semtex\femlib\netlib.f	/^  103    CONTINUE$/;"	l	subroutine:RADF2	file:
103	.\semtex\femlib\netlib.f	/^  103    CONTINUE$/;"	l	subroutine:RADF4	file:
103	.\semtex\femlib\netlib.f	/^  103    IF (IP .NE. 2) GO TO 106$/;"	l	subroutine:DRFFTB	file:
103	.\semtex\femlib\netlib.f	/^  103 CONTINUE$/;"	l	subroutine:RADB3	file:
103	.\semtex\femlib\netlib.f	/^  103 CONTINUE$/;"	l	subroutine:RADB5	file:
103	.\semtex\femlib\netlib.f	/^  103 CONTINUE$/;"	l	subroutine:RADF3	file:
103	.\semtex\femlib\netlib.f	/^  103 CONTINUE$/;"	l	subroutine:RADF5	file:
103	.\semtex\femlib\netlib.f	/^  103 CONTINUE$/;"	l	subroutine:RADFG	file:
103	.\semtex\femlib\netlib.f	/^  103 DO 105 I=1,IDO$/;"	l	subroutine:RADBG	file:
103	.\semtex\femlib\netlib.f	/^  103 NTRY = NTRY+2$/;"	l	subroutine:DRFFTI	file:
104	.\semtex\femlib\netlib.f	/^  104       CONTINUE$/;"	l	subroutine:RADFG	file:
104	.\semtex\femlib\netlib.f	/^  104    CALL RADB2 (IDO,L1,CH,C,WA(IW))$/;"	l	subroutine:DRFFTB	file:
104	.\semtex\femlib\netlib.f	/^  104    CONTINUE$/;"	l	subroutine:RADBG	file:
104	.\semtex\femlib\netlib.f	/^  104    IF (IP .NE. 3) GO TO 106$/;"	l	subroutine:DRFFTF	file:
104	.\semtex\femlib\netlib.f	/^  104 CONTINUE$/;"	l	subroutine:RADB2	file:
104	.\semtex\femlib\netlib.f	/^  104 CONTINUE$/;"	l	subroutine:RADB4	file:
104	.\semtex\femlib\netlib.f	/^  104 CONTINUE$/;"	l	subroutine:RADF2	file:
104	.\semtex\femlib\netlib.f	/^  104 CONTINUE$/;"	l	subroutine:RADF4	file:
104	.\semtex\femlib\netlib.f	/^  104 NQ = NL\/NTRY$/;"	l	subroutine:DRFFTI	file:
105	.\semtex\femlib\netlib.f	/^  105    CALL RADF3 (IDO,L1,CH,C,WA(IW),WA(IX2))$/;"	l	subroutine:DRFFTF	file:
105	.\semtex\femlib\netlib.f	/^  105    CONTINUE$/;"	l	subroutine:RADFG	file:
105	.\semtex\femlib\netlib.f	/^  105    NA = 1-NA$/;"	l	subroutine:DRFFTB	file:
105	.\semtex\femlib\netlib.f	/^  105 CONTINUE$/;"	l	subroutine:RADB4	file:
105	.\semtex\femlib\netlib.f	/^  105 CONTINUE$/;"	l	subroutine:RADBG	file:
105	.\semtex\femlib\netlib.f	/^  105 CONTINUE$/;"	l	subroutine:RADF4	file:
105	.\semtex\femlib\netlib.f	/^  105 DO 106 K=1,L1$/;"	l	subroutine:RADB2	file:
105	.\semtex\femlib\netlib.f	/^  105 DO 106 K=1,L1$/;"	l	subroutine:RADF2	file:
105	.\semtex\femlib\netlib.f	/^  105 NF = NF+1$/;"	l	subroutine:DRFFTI	file:
106	.\semtex\femlib\netlib.f	/^  106    IF (IP .NE. 3) GO TO 109$/;"	l	subroutine:DRFFTB	file:
106	.\semtex\femlib\netlib.f	/^  106    IF (IP .NE. 5) GO TO 108$/;"	l	subroutine:DRFFTF	file:
106	.\semtex\femlib\netlib.f	/^  106 CONTINUE$/;"	l	subroutine:DRFFTI	file:
106	.\semtex\femlib\netlib.f	/^  106 CONTINUE$/;"	l	subroutine:RADB2	file:
106	.\semtex\femlib\netlib.f	/^  106 CONTINUE$/;"	l	subroutine:RADB4	file:
106	.\semtex\femlib\netlib.f	/^  106 CONTINUE$/;"	l	subroutine:RADF2	file:
106	.\semtex\femlib\netlib.f	/^  106 CONTINUE$/;"	l	subroutine:RADF4	file:
106	.\semtex\femlib\netlib.f	/^  106 CONTINUE$/;"	l	subroutine:RADFG	file:
106	.\semtex\femlib\netlib.f	/^  106 DO 108 J=2,IPPH$/;"	l	subroutine:RADBG	file:
107	.\semtex\femlib\netlib.f	/^  107    CALL RADB3 (IDO,L1,CH,C,WA(IW),WA(IX2))$/;"	l	subroutine:DRFFTB	file:
107	.\semtex\femlib\netlib.f	/^  107    CALL RADF5 (IDO,L1,CH,C,WA(IW),WA(IX2),WA(IX3),WA(IX4))$/;"	l	subroutine:DRFFTF	file:
107	.\semtex\femlib\netlib.f	/^  107    CONTINUE$/;"	l	subroutine:RADBG	file:
107	.\semtex\femlib\netlib.f	/^  107 IF (NL .NE. 1) GO TO 104$/;"	l	subroutine:DRFFTI	file:
107	.\semtex\femlib\netlib.f	/^  107 IS = -IDO$/;"	l	subroutine:RADFG	file:
107	.\semtex\femlib\netlib.f	/^  107 RETURN$/;"	l	subroutine:RADB2	file:
107	.\semtex\femlib\netlib.f	/^  107 RETURN$/;"	l	subroutine:RADB4	file:
107	.\semtex\femlib\netlib.f	/^  107 RETURN$/;"	l	subroutine:RADF2	file:
107	.\semtex\femlib\netlib.f	/^  107 RETURN$/;"	l	subroutine:RADF4	file:
108	.\semtex\femlib\netlib.f	/^  108       CONTINUE$/;"	l	subroutine:DRFFTI	file:
108	.\semtex\femlib\netlib.f	/^  108       CONTINUE$/;"	l	subroutine:RADFG	file:
108	.\semtex\femlib\netlib.f	/^  108    IF (IDO .EQ. 1) NA = 1-NA$/;"	l	subroutine:DRFFTF	file:
108	.\semtex\femlib\netlib.f	/^  108    NA = 1-NA$/;"	l	subroutine:DRFFTB	file:
108	.\semtex\femlib\netlib.f	/^  108 CONTINUE$/;"	l	subroutine:RADBG	file:
109	.\semtex\femlib\netlib.f	/^  109       CONTINUE$/;"	l	subroutine:RADBG	file:
109	.\semtex\femlib\netlib.f	/^  109    CALL RADFG (IDO,IP,L1,IDL1,CH,CH,CH,C,C,WA(IW))$/;"	l	subroutine:DRFFTF	file:
109	.\semtex\femlib\netlib.f	/^  109    CONTINUE$/;"	l	subroutine:DRFFTI	file:
109	.\semtex\femlib\netlib.f	/^  109    CONTINUE$/;"	l	subroutine:RADFG	file:
109	.\semtex\femlib\netlib.f	/^  109    IF (IP .NE. 5) GO TO 112$/;"	l	subroutine:DRFFTB	file:
110	.\semtex\femlib\canfft.f	/^ 110           CONTINUE$/;"	l	subroutine:DMRCFT	file:
110	.\semtex\femlib\netlib.f	/^  110    CALL RADB5 (IDO,L1,CH,C,WA(IW),WA(IX2),WA(IX3),WA(IX4))$/;"	l	subroutine:DRFFTB	file:
110	.\semtex\femlib\netlib.f	/^  110    CONTINUE$/;"	l	subroutine:RADBG	file:
110	.\semtex\femlib\netlib.f	/^  110    L2 = L1$/;"	l	subroutine:DRFFTF	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:DRFFTI	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:RADFG	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZAIRY	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZASYI	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZBINU	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZBKNU	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZMLRI	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZSERI	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZUNI1	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZUNI2	file:
110	.\semtex\femlib\netlib.f	/^  110 CONTINUE$/;"	l	subroutine:ZUOIK	file:
110	.\semtex\femlib\netlib.f	/^  110 u=x-tol1$/;"	l	function:fbrent	file:
110	.\semtex\femlib\temfftd.F	/^ 110                    CONTINUE$/;"	l	subroutine:DPFA5F	file:
110	.\semtex\femlib\temfftd.F	/^ 110              CONTINUE$/;"	l	subroutine:DPFA2F	file:
110	.\semtex\femlib\temfftd.F	/^ 110              CONTINUE$/;"	l	subroutine:DPFA3F	file:
110	.\semtex\femlib\temfftd.F	/^ 110        CONTINUE$/;"	l	subroutine:DMPFFT	file:
111	.\semtex\femlib\netlib.f	/^  111    NA = 1-NA$/;"	l	subroutine:DRFFTB	file:
111	.\semtex\femlib\netlib.f	/^  111 CONTINUE$/;"	l	subroutine:DRFFTF	file:
111	.\semtex\femlib\netlib.f	/^  111 CONTINUE$/;"	l	subroutine:RADBG	file:
111	.\semtex\femlib\netlib.f	/^  111 IF (NBD .LT. L1) GO TO 115$/;"	l	subroutine:RADFG	file:
112	.\semtex\femlib\netlib.f	/^  112       CONTINUE$/;"	l	subroutine:RADFG	file:
112	.\semtex\femlib\netlib.f	/^  112    IF (NA .NE. 0) GO TO 113$/;"	l	subroutine:DRFFTB	file:
112	.\semtex\femlib\netlib.f	/^  112 CONTINUE$/;"	l	subroutine:DRFFTF	file:
112	.\semtex\femlib\netlib.f	/^  112 DO 115 J=2,IPPH$/;"	l	subroutine:RADBG	file:
113	.\semtex\femlib\netlib.f	/^  113       CONTINUE$/;"	l	subroutine:RADBG	file:
113	.\semtex\femlib\netlib.f	/^  113    CALL RADBG (IDO,IP,L1,IDL1,CH,CH,CH,C,C,WA(IW))$/;"	l	subroutine:DRFFTB	file:
113	.\semtex\femlib\netlib.f	/^  113    CONTINUE$/;"	l	subroutine:RADFG	file:
114	.\semtex\femlib\netlib.f	/^  114    CONTINUE$/;"	l	subroutine:RADBG	file:
114	.\semtex\femlib\netlib.f	/^  114    IF (IDO .EQ. 1) NA = 1-NA$/;"	l	subroutine:DRFFTB	file:
114	.\semtex\femlib\netlib.f	/^  114 CONTINUE$/;"	l	subroutine:RADFG	file:
115	.\semtex\femlib\netlib.f	/^  115    L1 = L2$/;"	l	subroutine:DRFFTB	file:
115	.\semtex\femlib\netlib.f	/^  115 CONTINUE$/;"	l	subroutine:RADBG	file:
115	.\semtex\femlib\netlib.f	/^  115 DO 118 J=2,IPPH$/;"	l	subroutine:RADFG	file:
115	.\semtex\femlib\temfftd.F	/^ 115           CONTINUE$/;"	l	subroutine:DPFA2F	file:
115	.\semtex\femlib\temfftd.F	/^ 115           CONTINUE$/;"	l	subroutine:DPFA3F	file:
116	.\semtex\femlib\netlib.f	/^  116       CONTINUE$/;"	l	subroutine:RADFG	file:
116	.\semtex\femlib\netlib.f	/^  116 AR1 = 1.0D0$/;"	l	subroutine:RADBG	file:
116	.\semtex\femlib\netlib.f	/^  116 CONTINUE$/;"	l	subroutine:DRFFTB	file:
117	.\semtex\femlib\netlib.f	/^  117    CONTINUE$/;"	l	subroutine:RADBG	file:
117	.\semtex\femlib\netlib.f	/^  117    CONTINUE$/;"	l	subroutine:RADFG	file:
117	.\semtex\femlib\netlib.f	/^  117 CONTINUE$/;"	l	subroutine:DRFFTB	file:
118	.\semtex\femlib\netlib.f	/^  118       CONTINUE$/;"	l	subroutine:RADBG	file:
118	.\semtex\femlib\netlib.f	/^  118 CONTINUE$/;"	l	subroutine:RADFG	file:
119	.\semtex\femlib\netlib.f	/^  119    CONTINUE$/;"	l	subroutine:RADBG	file:
119	.\semtex\femlib\netlib.f	/^  119 DO 120 IK=1,IDL1$/;"	l	subroutine:RADFG	file:
120	.\semtex\femlib\canfft.f	/^ 120        CONTINUE$/;"	l	subroutine:DMRCFT	file:
120	.\semtex\femlib\canfft.f	/^ 120     CONTINUE$/;"	l	subroutine:DPASS1	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:RADBG	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:RADFG	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:ZAIRY	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:ZBINU	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:ZBKNU	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:ZSERI	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:ZUNI1	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:ZUNI2	file:
120	.\semtex\femlib\netlib.f	/^  120 CONTINUE$/;"	l	subroutine:ZUOIK	file:
120	.\semtex\femlib\netlib.f	/^  120 fu=f(u)$/;"	l	function:fbrent	file:
120	.\semtex\femlib\temfftd.F	/^ 120        CONTINUE$/;"	l	subroutine:DPFA2F	file:
120	.\semtex\femlib\temfftd.F	/^ 120        CONTINUE$/;"	l	subroutine:DPFA3F	file:
120	.\semtex\femlib\temfftd.F	/^ 120     CONTINUE$/;"	l	subroutine:DMPFFT	file:
121	.\semtex\femlib\netlib.f	/^  121    CONTINUE$/;"	l	subroutine:RADBG	file:
121	.\semtex\femlib\netlib.f	/^  121 DO 123 J=2,IPPH$/;"	l	subroutine:RADFG	file:
122	.\semtex\femlib\netlib.f	/^  122    CONTINUE$/;"	l	subroutine:RADFG	file:
122	.\semtex\femlib\netlib.f	/^  122 CONTINUE$/;"	l	subroutine:RADBG	file:
123	.\semtex\femlib\netlib.f	/^  123    CONTINUE$/;"	l	subroutine:RADBG	file:
123	.\semtex\femlib\netlib.f	/^  123 CONTINUE$/;"	l	subroutine:RADFG	file:
124	.\semtex\femlib\netlib.f	/^  124    CONTINUE$/;"	l	subroutine:RADFG	file:
124	.\semtex\femlib\netlib.f	/^  124 CONTINUE$/;"	l	subroutine:RADBG	file:
125	.\semtex\femlib\netlib.f	/^  125       CONTINUE$/;"	l	subroutine:RADBG	file:
125	.\semtex\femlib\netlib.f	/^  125       CONTINUE$/;"	l	subroutine:RADFG	file:
126	.\semtex\femlib\netlib.f	/^  126    CONTINUE$/;"	l	subroutine:RADBG	file:
126	.\semtex\femlib\netlib.f	/^  126    CONTINUE$/;"	l	subroutine:RADFG	file:
127	.\semtex\femlib\netlib.f	/^  127 CONTINUE$/;"	l	subroutine:RADBG	file:
127	.\semtex\femlib\netlib.f	/^  127 CONTINUE$/;"	l	subroutine:RADFG	file:
128	.\semtex\femlib\netlib.f	/^  128    CONTINUE$/;"	l	subroutine:RADFG	file:
128	.\semtex\femlib\netlib.f	/^  128 DO 131 J=2,IPPH$/;"	l	subroutine:RADBG	file:
129	.\semtex\femlib\netlib.f	/^  129       CONTINUE$/;"	l	subroutine:RADBG	file:
129	.\semtex\femlib\netlib.f	/^  129 CONTINUE$/;"	l	subroutine:RADFG	file:
130	.\semtex\femlib\canfft.f	/^ 130  CONTINUE$/;"	l	subroutine:DPASS1	file:
130	.\semtex\femlib\netlib.f	/^  130    CONTINUE$/;"	l	subroutine:RADBG	file:
130	.\semtex\femlib\netlib.f	/^  130    CONTINUE$/;"	l	subroutine:RADFG	file:
130	.\semtex\femlib\netlib.f	/^  130 CONTINUE$/;"	l	subroutine:ZAIRY	file:
130	.\semtex\femlib\netlib.f	/^  130 CONTINUE$/;"	l	subroutine:ZBESJ	file:
130	.\semtex\femlib\netlib.f	/^  130 CONTINUE$/;"	l	subroutine:ZBINU	file:
130	.\semtex\femlib\netlib.f	/^  130 CONTINUE$/;"	l	subroutine:ZBKNU	file:
130	.\semtex\femlib\netlib.f	/^  130 CONTINUE$/;"	l	subroutine:ZSERI	file:
130	.\semtex\femlib\netlib.f	/^  130 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
130	.\semtex\femlib\netlib.f	/^  130 CONTINUE$/;"	l	subroutine:ZUNI1	file:
130	.\semtex\femlib\netlib.f	/^  130 CONTINUE$/;"	l	subroutine:ZUNI2	file:
130	.\semtex\femlib\netlib.f	/^  130 CONTINUE$/;"	l	subroutine:ZUOIK	file:
130	.\semtex\femlib\netlib.f	/^  130 b=u$/;"	l	function:fbrent	file:
130	.\semtex\femlib\temfftd.F	/^ 130                    CONTINUE$/;"	l	subroutine:DPFA5F	file:
130	.\semtex\femlib\temfftd.F	/^ 130                 CONTINUE$/;"	l	subroutine:DPFA2F	file:
130	.\semtex\femlib\temfftd.F	/^ 130                 CONTINUE$/;"	l	subroutine:DPFA3F	file:
131	.\semtex\femlib\netlib.f	/^  131 CONTINUE$/;"	l	subroutine:RADBG	file:
131	.\semtex\femlib\netlib.f	/^  131 CONTINUE$/;"	l	subroutine:RADFG	file:
132	.\semtex\femlib\netlib.f	/^  132 CONTINUE$/;"	l	subroutine:RADBG	file:
132	.\semtex\femlib\netlib.f	/^  132 DO 134 I=1,IDO$/;"	l	subroutine:RADFG	file:
133	.\semtex\femlib\netlib.f	/^  133    CONTINUE$/;"	l	subroutine:RADFG	file:
133	.\semtex\femlib\netlib.f	/^  133 CONTINUE$/;"	l	subroutine:RADBG	file:
134	.\semtex\femlib\netlib.f	/^  134    CONTINUE$/;"	l	subroutine:RADBG	file:
134	.\semtex\femlib\netlib.f	/^  134 CONTINUE$/;"	l	subroutine:RADFG	file:
135	.\semtex\femlib\netlib.f	/^  135 CONTINUE$/;"	l	subroutine:RADBG	file:
135	.\semtex\femlib\netlib.f	/^  135 DO 137 J=2,IPPH$/;"	l	subroutine:RADFG	file:
135	.\semtex\femlib\temfftd.F	/^ 135              CONTINUE$/;"	l	subroutine:DPFA2F	file:
135	.\semtex\femlib\temfftd.F	/^ 135              CONTINUE$/;"	l	subroutine:DPFA3F	file:
135	.\semtex\femlib\temfftd.F	/^ 135              CONTINUE$/;"	l	subroutine:DPFA5F	file:
136	.\semtex\femlib\netlib.f	/^  136       CONTINUE$/;"	l	subroutine:RADBG	file:
136	.\semtex\femlib\netlib.f	/^  136    CONTINUE$/;"	l	subroutine:RADFG	file:
137	.\semtex\femlib\netlib.f	/^  137    CONTINUE$/;"	l	subroutine:RADBG	file:
137	.\semtex\femlib\netlib.f	/^  137 CONTINUE$/;"	l	subroutine:RADFG	file:
138	.\semtex\femlib\netlib.f	/^  138       CONTINUE$/;"	l	subroutine:RADFG	file:
138	.\semtex\femlib\netlib.f	/^  138 CONTINUE$/;"	l	subroutine:RADBG	file:
139	.\semtex\femlib\netlib.f	/^  139    CONTINUE$/;"	l	subroutine:RADFG	file:
139	.\semtex\femlib\netlib.f	/^  139 IS = -IDO$/;"	l	subroutine:RADBG	file:
140	.\semtex\femlib\netlib.f	/^  140       CONTINUE$/;"	l	subroutine:RADBG	file:
140	.\semtex\femlib\netlib.f	/^  140 CONTINUE$/;"	l	subroutine:RADFG	file:
140	.\semtex\femlib\netlib.f	/^  140 CONTINUE$/;"	l	subroutine:ZAIRY	file:
140	.\semtex\femlib\netlib.f	/^  140 CONTINUE$/;"	l	subroutine:ZBESJ	file:
140	.\semtex\femlib\netlib.f	/^  140 CONTINUE$/;"	l	subroutine:ZBKNU	file:
140	.\semtex\femlib\netlib.f	/^  140 CONTINUE$/;"	l	subroutine:ZSERI	file:
140	.\semtex\femlib\netlib.f	/^  140 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
140	.\semtex\femlib\netlib.f	/^  140 CONTINUE$/;"	l	subroutine:ZUNI1	file:
140	.\semtex\femlib\netlib.f	/^  140 CONTINUE$/;"	l	subroutine:ZUNI2	file:
140	.\semtex\femlib\netlib.f	/^  140 CONTINUE$/;"	l	subroutine:ZUOIK	file:
140	.\semtex\femlib\netlib.f	/^  140 if (fu.gt.fx) go to 170$/;"	l	function:fbrent	file:
140	.\semtex\femlib\temfftd.F	/^ 140           CONTINUE$/;"	l	subroutine:DPFA2F	file:
140	.\semtex\femlib\temfftd.F	/^ 140           CONTINUE$/;"	l	subroutine:DPFA3F	file:
140	.\semtex\femlib\temfftd.F	/^ 140           CONTINUE$/;"	l	subroutine:DPFA5F	file:
141	.\semtex\femlib\netlib.f	/^  141    CONTINUE$/;"	l	subroutine:RADBG	file:
141	.\semtex\femlib\netlib.f	/^  141 DO 144 J=2,IPPH$/;"	l	subroutine:RADFG	file:
142	.\semtex\femlib\netlib.f	/^  142       CONTINUE$/;"	l	subroutine:RADFG	file:
142	.\semtex\femlib\netlib.f	/^  142 CONTINUE$/;"	l	subroutine:RADBG	file:
143	.\semtex\femlib\netlib.f	/^  143    CONTINUE$/;"	l	subroutine:RADFG	file:
143	.\semtex\femlib\netlib.f	/^  143 RETURN$/;"	l	subroutine:RADBG	file:
144	.\semtex\femlib\netlib.f	/^  144 CONTINUE$/;"	l	subroutine:RADFG	file:
15	.\semtex\femlib\netlib.f	/^   15 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
15	.\semtex\femlib\netlib.f	/^   15 CONTINUE$/;"	l	subroutine:ZUNIK	file:
150	.\semtex\femlib\netlib.f	/^  150     CONTINUE$/;"	l	subroutine:ZUNHJ	file:
150	.\semtex\femlib\netlib.f	/^  150 CONTINUE$/;"	l	subroutine:ZAIRY	file:
150	.\semtex\femlib\netlib.f	/^  150 CONTINUE$/;"	l	subroutine:ZBKNU	file:
150	.\semtex\femlib\netlib.f	/^  150 CONTINUE$/;"	l	subroutine:ZSERI	file:
150	.\semtex\femlib\netlib.f	/^  150 CONTINUE$/;"	l	subroutine:ZUNI2	file:
150	.\semtex\femlib\netlib.f	/^  150 CONTINUE$/;"	l	subroutine:ZUOIK	file:
150	.\semtex\femlib\netlib.f	/^  150 a=x$/;"	l	function:fbrent	file:
150	.\semtex\femlib\temfftd.F	/^ 150        CONTINUE$/;"	l	subroutine:DPFA2F	file:
150	.\semtex\femlib\temfftd.F	/^ 150        CONTINUE$/;"	l	subroutine:DPFA3F	file:
150	.\semtex\femlib\temfftd.F	/^ 150        CONTINUE$/;"	l	subroutine:DPFA5F	file:
160	.\semtex\femlib\netlib.f	/^  160   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
160	.\semtex\femlib\netlib.f	/^  160 CONTINUE$/;"	l	subroutine:ZAIRY	file:
160	.\semtex\femlib\netlib.f	/^  160 CONTINUE$/;"	l	subroutine:ZBKNU	file:
160	.\semtex\femlib\netlib.f	/^  160 CONTINUE$/;"	l	subroutine:ZSERI	file:
160	.\semtex\femlib\netlib.f	/^  160 CONTINUE$/;"	l	subroutine:ZUNI2	file:
160	.\semtex\femlib\netlib.f	/^  160 CONTINUE$/;"	l	subroutine:ZUOIK	file:
160	.\semtex\femlib\netlib.f	/^  160 v=w$/;"	l	function:fbrent	file:
160	.\semtex\femlib\temfftd.F	/^ 160     CONTINUE$/;"	l	subroutine:DPFA2F	file:
160	.\semtex\femlib\temfftd.F	/^ 160     CONTINUE$/;"	l	subroutine:DPFA3F	file:
160	.\semtex\femlib\temfftd.F	/^ 160     CONTINUE$/;"	l	subroutine:DPFA5F	file:
170	.\semtex\femlib\netlib.f	/^  170   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
170	.\semtex\femlib\netlib.f	/^  170 CONTINUE$/;"	l	subroutine:ZAIRY	file:
170	.\semtex\femlib\netlib.f	/^  170 CONTINUE$/;"	l	subroutine:ZBKNU	file:
170	.\semtex\femlib\netlib.f	/^  170 CONTINUE$/;"	l	subroutine:ZSERI	file:
170	.\semtex\femlib\netlib.f	/^  170 CONTINUE$/;"	l	subroutine:ZUOIK	file:
170	.\semtex\femlib\netlib.f	/^  170 if ((fu.gt.fw).and.(w.ne.x)) go to 180$/;"	l	function:fbrent	file:
180	.\semtex\femlib\netlib.f	/^  180   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
180	.\semtex\femlib\netlib.f	/^  180 CONTINUE$/;"	l	subroutine:ZAIRY	file:
180	.\semtex\femlib\netlib.f	/^  180 CONTINUE$/;"	l	subroutine:ZBKNU	file:
180	.\semtex\femlib\netlib.f	/^  180 CONTINUE$/;"	l	subroutine:ZSERI	file:
180	.\semtex\femlib\netlib.f	/^  180 CONTINUE$/;"	l	subroutine:ZUOIK	file:
180	.\semtex\femlib\netlib.f	/^  180 if ((fu.gt.fv).and.(v.ne.x).and.(v.ne.w)) go to 20$/;"	l	function:fbrent	file:
190	.\semtex\femlib\netlib.f	/^  190   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
190	.\semtex\femlib\netlib.f	/^  190 CONTINUE$/;"	l	subroutine:ZAIRY	file:
190	.\semtex\femlib\netlib.f	/^  190 CONTINUE$/;"	l	subroutine:ZBKNU	file:
190	.\semtex\femlib\netlib.f	/^  190 CONTINUE$/;"	l	subroutine:ZSERI	file:
190	.\semtex\femlib\netlib.f	/^  190 CONTINUE$/;"	l	subroutine:ZUOIK	file:
190	.\semtex\femlib\netlib.f	/^  190 fbrent=x$/;"	l	function:fbrent	file:
20	.\semtex\femlib\canfft.f	/^ 20               CONTINUE$/;"	l	subroutine:DPASS1	file:
20	.\semtex\femlib\canfft.f	/^ 20            CONTINUE$/;"	l	subroutine:DMRCFT	file:
20	.\semtex\femlib\canfft.f	/^ 20         CONTINUE$/;"	l	subroutine:DFFT1	file:
20	.\semtex\femlib\canfft.f	/^ 20   CONTINUE$/;"	l	subroutine:FACTOR	file:
20	.\semtex\femlib\netlib.f	/^   20 AZABS = 0.0D+0$/;"	l	function:AZABS	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	function:DGAMLN	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZACAI	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZASYI	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZBINU	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZBKNU	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZBUNI	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZKSCL	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZMLRI	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZRATI	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZSERI	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZUNI1	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZUNI2	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZUNIK	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZUOIK	file:
20	.\semtex\femlib\netlib.f	/^   20 CONTINUE$/;"	l	subroutine:ZWRSK	file:
20	.\semtex\femlib\netlib.f	/^   20 IF (AR.GT.0.0D+0) GO TO 30$/;"	l	subroutine:AZLOG	file:
20	.\semtex\femlib\netlib.f	/^   20 IF (AR.GT.0.0D+0) GO TO 30$/;"	l	subroutine:AZSQRT	file:
20	.\semtex\femlib\netlib.f	/^   20 xm=0.5d0*(a+b)$/;"	l	function:fbrent	file:
20	.\semtex\femlib\netlib.f	/^ 20               CONTINUE$/;"	l	function:D1MACH	file:
20	.\semtex\femlib\netlib.f	/^ 20            CALL I1MCR1(J, K, 16405, 9876536, 0)$/;"	l	function:I1MACH	file:
20	.\semtex\femlib\temfftd.F	/^ 20      CONTINUE$/;"	l	subroutine:PRF235	file:
200	.\semtex\femlib\netlib.f	/^  200          CONTINUE                                                 $/;"	l	subroutine:DEGREE	file:
200	.\semtex\femlib\netlib.f	/^  200          CONTINUE                                                 $/;"	l	subroutine:FNROOT	file:
200	.\semtex\femlib\netlib.f	/^  200       CONTINUE                                                    $/;"	l	subroutine:RCM	file:
200	.\semtex\femlib\netlib.f	/^  200    CONTINUE                                                       $/;"	l	subroutine:GENRCM	file:
200	.\semtex\femlib\netlib.f	/^  200    LBEGIN = LVLEND + 1                                            $/;"	l	subroutine:ROOTLS	file:
200	.\semtex\femlib\netlib.f	/^  200   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
200	.\semtex\femlib\netlib.f	/^  200 CONTINUE$/;"	l	subroutine:ZAIRY	file:
200	.\semtex\femlib\netlib.f	/^  200 CONTINUE$/;"	l	subroutine:ZBKNU	file:
200	.\semtex\femlib\netlib.f	/^  200 CONTINUE$/;"	l	subroutine:ZUOIK	file:
200	.\semtex\femlib\temfftd.F	/^ 200     CONTINUE$/;"	l	subroutine:DPFA2F	file:
21	.\semtex\femlib\netlib.f	/^   21 CONTINUE$/;"	l	subroutine:ZBUNI	file:
210	.\semtex\femlib\netlib.f	/^  210 CONTINUE$/;"	l	subroutine:ZAIRY	file:
210	.\semtex\femlib\netlib.f	/^  210 CONTINUE$/;"	l	subroutine:ZBKNU	file:
210	.\semtex\femlib\netlib.f	/^  210 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
210	.\semtex\femlib\netlib.f	/^  210 CONTINUE$/;"	l	subroutine:ZUOIK	file:
210	.\semtex\femlib\temfftd.F	/^ 210           CONTINUE$/;"	l	subroutine:DPFA2F	file:
215	.\semtex\femlib\netlib.f	/^  215 CONTINUE$/;"	l	subroutine:ZBKNU	file:
215	.\semtex\femlib\temfftd.F	/^ 215        CONTINUE$/;"	l	subroutine:DPFA2F	file:
220	.\semtex\femlib\netlib.f	/^  220 CONTINUE$/;"	l	subroutine:ZBKNU	file:
220	.\semtex\femlib\netlib.f	/^  220 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
220	.\semtex\femlib\temfftd.F	/^ 220     CONTINUE$/;"	l	subroutine:DPFA2F	file:
225	.\semtex\femlib\netlib.f	/^  225 CONTINUE$/;"	l	subroutine:ZBKNU	file:
230	.\semtex\femlib\netlib.f	/^  230 CONTINUE$/;"	l	subroutine:ZBKNU	file:
230	.\semtex\femlib\temfftd.F	/^ 230                 CONTINUE$/;"	l	subroutine:DPFA2F	file:
240	.\semtex\femlib\netlib.f	/^  240 CONTINUE$/;"	l	subroutine:ZBKNU	file:
240	.\semtex\femlib\temfftd.F	/^ 240     CONTINUE$/;"	l	subroutine:DPFA2F	file:
245	.\semtex\femlib\temfftd.F	/^ 245  CONTINUE$/;"	l	subroutine:DPFA2F	file:
25	.\semtex\femlib\netlib.f	/^   25   CONTINUE$/;"	l	subroutine:ZKSCL	file:
25	.\semtex\femlib\netlib.f	/^   25 CONTINUE$/;"	l	subroutine:ZBUNI	file:
250	.\semtex\femlib\netlib.f	/^  250 CONTINUE$/;"	l	subroutine:ZBKNU	file:
250	.\semtex\femlib\temfftd.F	/^ 250  CONTINUE$/;"	l	subroutine:DPFA2F	file:
260	.\semtex\femlib\netlib.f	/^  260 CONTINUE$/;"	l	subroutine:ZAIRY	file:
260	.\semtex\femlib\netlib.f	/^  260 CONTINUE$/;"	l	subroutine:ZBESJ	file:
260	.\semtex\femlib\netlib.f	/^  260 CONTINUE$/;"	l	subroutine:ZBKNU	file:
260	.\semtex\femlib\temfftd.F	/^ 260  CONTINUE$/;"	l	subroutine:DPFA2F	file:
261	.\semtex\femlib\netlib.f	/^  261 CONTINUE$/;"	l	subroutine:ZBKNU	file:
262	.\semtex\femlib\netlib.f	/^  262 CONTINUE$/;"	l	subroutine:ZBKNU	file:
263	.\semtex\femlib\netlib.f	/^  263   CONTINUE$/;"	l	subroutine:ZBKNU	file:
264	.\semtex\femlib\netlib.f	/^  264 CONTINUE$/;"	l	subroutine:ZBKNU	file:
270	.\semtex\femlib\netlib.f	/^  270 CONTINUE$/;"	l	subroutine:ZAIRY	file:
270	.\semtex\femlib\netlib.f	/^  270 CONTINUE$/;"	l	subroutine:ZBKNU	file:
280	.\semtex\femlib\netlib.f	/^  280 CONTINUE$/;"	l	subroutine:ZAIRY	file:
280	.\semtex\femlib\netlib.f	/^  280 CONTINUE$/;"	l	subroutine:ZBKNU	file:
290	.\semtex\femlib\netlib.f	/^  290 CONTINUE$/;"	l	subroutine:ZBKNU	file:
30	.\semtex\femlib\canfft.f	/^ 30         CONTINUE$/;"	l	subroutine:DMRCFT	file:
30	.\semtex\femlib\canfft.f	/^ 30      CONTINUE$/;"	l	subroutine:DFFT1	file:
30	.\semtex\femlib\canfft.f	/^ 30   CONTINUE$/;"	l	subroutine:FACTOR	file:
30	.\semtex\femlib\netlib.f	/^   30 BR = DLOG(AR)$/;"	l	subroutine:AZLOG	file:
30	.\semtex\femlib\netlib.f	/^   30 BR = DSQRT(AR)$/;"	l	subroutine:AZSQRT	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	function:DGAMLN	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZACAI	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZAIRY	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZASYI	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZBINU	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZBUNI	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZKSCL	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZMLRI	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZRATI	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZSERI	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZUNHJ	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZUNI1	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZUNI2	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZUNIK	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZUOIK	file:
30	.\semtex\femlib\netlib.f	/^   30 CONTINUE$/;"	l	subroutine:ZWRSK	file:
30	.\semtex\femlib\netlib.f	/^   30 G1 = -S$/;"	l	subroutine:ZBKNU	file:
30	.\semtex\femlib\netlib.f	/^   30 q=-q$/;"	l	function:fbrent	file:
30	.\semtex\femlib\temfftd.F	/^ 30   CONTINUE$/;"	l	subroutine:PRF235	file:
300	.\semtex\femlib\netlib.f	/^  300          CONTINUE                                                 $/;"	l	subroutine:ROOTLS	file:
300	.\semtex\femlib\netlib.f	/^  300          L = K                                                    $/;"	l	subroutine:RCM	file:
300	.\semtex\femlib\netlib.f	/^  300       CONTINUE                                                    $/;"	l	subroutine:FNROOT	file:
300	.\semtex\femlib\netlib.f	/^  300       DEG(NODE) = IDEG                                            $/;"	l	subroutine:DEGREE	file:
300	.\semtex\femlib\netlib.f	/^  300 CONTINUE$/;"	l	subroutine:ZBKNU	file:
300	.\semtex\femlib\temfftd.F	/^ 300  CONTINUE$/;"	l	subroutine:DPFA2F	file:
310	.\semtex\femlib\netlib.f	/^  310 CONTINUE$/;"	l	subroutine:ZBKNU	file:
310	.\semtex\femlib\temfftd.F	/^ 310           CONTINUE$/;"	l	subroutine:DPFA2F	file:
312	.\semtex\femlib\temfftd.F	/^ 312        CONTINUE$/;"	l	subroutine:DPFA2F	file:
315	.\semtex\femlib\temfftd.F	/^ 315     CONTINUE$/;"	l	subroutine:DPFA2F	file:
320	.\semtex\femlib\temfftd.F	/^ 320  CONTINUE$/;"	l	subroutine:DPFA2F	file:
325	.\semtex\femlib\temfftd.F	/^ 325        CONTINUE$/;"	l	subroutine:DPFA2F	file:
328	.\semtex\femlib\temfftd.F	/^ 328     CONTINUE$/;"	l	subroutine:DPFA2F	file:
330	.\semtex\femlib\temfftd.F	/^ 330  CONTINUE$/;"	l	subroutine:DPFA2F	file:
340	.\semtex\femlib\temfftd.F	/^ 340           CONTINUE$/;"	l	subroutine:DPFA2F	file:
342	.\semtex\femlib\temfftd.F	/^ 342        CONTINUE$/;"	l	subroutine:DPFA2F	file:
345	.\semtex\femlib\temfftd.F	/^ 345     CONTINUE$/;"	l	subroutine:DPFA2F	file:
35	.\semtex\femlib\netlib.f	/^ 35      SC = 987$/;"	l	function:I1MACH	file:
350	.\semtex\femlib\temfftd.F	/^ 350  CONTINUE$/;"	l	subroutine:DPFA2F	file:
40	.\semtex\femlib\canfft.f	/^ 40         CONTINUE$/;"	l	subroutine:DMRCFT	file:
40	.\semtex\femlib\canfft.f	/^ 40   CONTINUE$/;"	l	subroutine:FACTOR	file:
40	.\semtex\femlib\netlib.f	/^   40   CONTINUE$/;"	l	subroutine:ZASYI	file:
40	.\semtex\femlib\netlib.f	/^   40   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
40	.\semtex\femlib\netlib.f	/^   40   CONTINUE$/;"	l	subroutine:ZUNI1	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	function:DGAMLN	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZACAI	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZAIRY	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZBESJ	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZBINU	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZBKNU	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZBUNI	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZKSCL	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZMLRI	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZRATI	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZSERI	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZUNI2	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZUNIK	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZUOIK	file:
40	.\semtex\femlib\netlib.f	/^   40 CONTINUE$/;"	l	subroutine:ZWRSK	file:
40	.\semtex\femlib\netlib.f	/^   40 IF (AR.LT.0.0D+0) DTHETA = DTHETA + DPI$/;"	l	subroutine:AZLOG	file:
40	.\semtex\femlib\netlib.f	/^   40 IF (AR.LT.0.0D+0) DTHETA = DTHETA + DPI$/;"	l	subroutine:AZSQRT	file:
40	.\semtex\femlib\netlib.f	/^   40 r=e$/;"	l	function:fbrent	file:
40	.\semtex\femlib\netlib.f	/^ 40   WRITE(*,*) 'I1MACH(I): I =',I,' is out of bounds.'$/;"	l	function:I1MACH	file:
40	.\semtex\femlib\temfftd.F	/^ 40      CONTINUE$/;"	l	subroutine:DMPFFT	file:
400	.\semtex\femlib\netlib.f	/^  400             IF ( L .LT. FNBR )  GO TO 500                         $/;"	l	subroutine:RCM	file:
400	.\semtex\femlib\netlib.f	/^  400    CALL  ROOTLS ( ROOT, XADJ, ADJNCY, MASK, NUNLVL, XLS, LS )     $/;"	l	subroutine:FNROOT	file:
400	.\semtex\femlib\netlib.f	/^  400    CONTINUE                                                       $/;"	l	subroutine:DEGREE	file:
400	.\semtex\femlib\netlib.f	/^  400    CONTINUE                                                       $/;"	l	subroutine:ROOTLS	file:
400	.\semtex\femlib\temfftd.F	/^ 400     CONTINUE$/;"	l	subroutine:DPFA3F	file:
400	.\semtex\femlib\temfftd.F	/^ 400     CONTINUE$/;"	l	subroutine:DPFA5F	file:
400	.\semtex\femlib\temfftd.F	/^ 400  CONTINUE$/;"	l	subroutine:DPFA2F	file:
410	.\semtex\femlib\temfftd.F	/^ 410                       CONTINUE$/;"	l	subroutine:DPFA5F	file:
410	.\semtex\femlib\temfftd.F	/^ 410                 CONTINUE$/;"	l	subroutine:DPFA3F	file:
410	.\semtex\femlib\temfftd.F	/^ 410              CONTINUE$/;"	l	subroutine:DPFA2F	file:
415	.\semtex\femlib\temfftd.F	/^ 415              CONTINUE$/;"	l	subroutine:DPFA3F	file:
415	.\semtex\femlib\temfftd.F	/^ 415           CONTINUE$/;"	l	subroutine:DPFA2F	file:
420	.\semtex\femlib\temfftd.F	/^ 420           CONTINUE$/;"	l	subroutine:DPFA3F	file:
420	.\semtex\femlib\temfftd.F	/^ 420        CONTINUE$/;"	l	subroutine:DPFA2F	file:
430	.\semtex\femlib\temfftd.F	/^ 430        CONTINUE$/;"	l	subroutine:DPFA3F	file:
430	.\semtex\femlib\temfftd.F	/^ 430     CONTINUE$/;"	l	subroutine:DPFA2F	file:
440	.\semtex\femlib\temfftd.F	/^ 440                       CONTINUE$/;"	l	subroutine:DPFA5F	file:
440	.\semtex\femlib\temfftd.F	/^ 440                    CONTINUE$/;"	l	subroutine:DPFA3F	file:
440	.\semtex\femlib\temfftd.F	/^ 440                 CONTINUE$/;"	l	subroutine:DPFA2F	file:
445	.\semtex\femlib\temfftd.F	/^ 445                 CONTINUE$/;"	l	subroutine:DPFA3F	file:
445	.\semtex\femlib\temfftd.F	/^ 445                 CONTINUE$/;"	l	subroutine:DPFA5F	file:
445	.\semtex\femlib\temfftd.F	/^ 445              CONTINUE$/;"	l	subroutine:DPFA2F	file:
45	.\semtex\femlib\netlib.f	/^   45 CONTINUE$/;"	l	subroutine:ZKSCL	file:
450	.\semtex\femlib\temfftd.F	/^ 450              CONTINUE$/;"	l	subroutine:DPFA3F	file:
450	.\semtex\femlib\temfftd.F	/^ 450              CONTINUE$/;"	l	subroutine:DPFA5F	file:
450	.\semtex\femlib\temfftd.F	/^ 450           CONTINUE$/;"	l	subroutine:DPFA2F	file:
460	.\semtex\femlib\temfftd.F	/^ 460           CONTINUE$/;"	l	subroutine:DPFA3F	file:
460	.\semtex\femlib\temfftd.F	/^ 460           CONTINUE$/;"	l	subroutine:DPFA5F	file:
460	.\semtex\femlib\temfftd.F	/^ 460        CONTINUE$/;"	l	subroutine:DPFA2F	file:
470	.\semtex\femlib\temfftd.F	/^ 470        CONTINUE$/;"	l	subroutine:DPFA3F	file:
470	.\semtex\femlib\temfftd.F	/^ 470        CONTINUE$/;"	l	subroutine:DPFA5F	file:
470	.\semtex\femlib\temfftd.F	/^ 470     CONTINUE$/;"	l	subroutine:DPFA2F	file:
480	.\semtex\femlib\temfftd.F	/^ 480     CONTINUE$/;"	l	subroutine:DPFA3F	file:
480	.\semtex\femlib\temfftd.F	/^ 480     CONTINUE$/;"	l	subroutine:DPFA5F	file:
480	.\semtex\femlib\temfftd.F	/^ 480  CONTINUE$/;"	l	subroutine:DPFA2F	file:
490	.\semtex\femlib\temfftd.F	/^ 490     CONTINUE$/;"	l	subroutine:DPFA3F	file:
490	.\semtex\femlib\temfftd.F	/^ 490     CONTINUE$/;"	l	subroutine:DPFA5F	file:
490	.\semtex\femlib\temfftd.F	/^ 490  CONTINUE$/;"	l	subroutine:DPFA2F	file:
50	.\semtex\femlib\canfft.f	/^ 50               CONTINUE$/;"	l	subroutine:DPASS1	file:
50	.\semtex\femlib\canfft.f	/^ 50            CONTINUE$/;"	l	subroutine:DMRCFT	file:
50	.\semtex\femlib\netlib.f	/^   50   CONTINUE$/;"	l	subroutine:ZASYI	file:
50	.\semtex\femlib\netlib.f	/^   50   CONTINUE$/;"	l	subroutine:ZRATI	file:
50	.\semtex\femlib\netlib.f	/^   50   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
50	.\semtex\femlib\netlib.f	/^   50   CONTINUE$/;"	l	subroutine:ZUNI1	file:
50	.\semtex\femlib\netlib.f	/^   50   CONTINUE$/;"	l	subroutine:ZUNI2	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	function:DGAMLN	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZACAI	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZAIRY	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZBESJ	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZBINU	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZBKNU	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZBUNI	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZKSCL	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZMLRI	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZSERI	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZUNIK	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZUOIK	file:
50	.\semtex\femlib\netlib.f	/^   50 CONTINUE$/;"	l	subroutine:ZWRSK	file:
50	.\semtex\femlib\netlib.f	/^   50 DTHETA = DTHETA*0.5D+0$/;"	l	subroutine:AZSQRT	file:
50	.\semtex\femlib\netlib.f	/^   50 ZM = AZABS(AR,AI)$/;"	l	subroutine:AZLOG	file:
50	.\semtex\femlib\netlib.f	/^   50 if ((dabs(p).ge.dabs(0.5d0*q*r)).or.(p.le.q*(a-x))$/;"	l	function:fbrent	file:
50	.\semtex\femlib\temfftd.F	/^ 50         CONTINUE$/;"	l	subroutine:DMPFFT	file:
50	.\semtex\femlib\temfftd.F	/^ 50      CONTINUE$/;"	l	subroutine:DSETPF	file:
500	.\semtex\femlib\netlib.f	/^  500             PERM(L+1) = NBR                                       $/;"	l	subroutine:RCM	file:
500	.\semtex\femlib\netlib.f	/^  500    CONTINUE                                                       $/;"	l	subroutine:DEGREE	file:
500	.\semtex\femlib\netlib.f	/^  500    CONTINUE                                                       $/;"	l	subroutine:ROOTLS	file:
500	.\semtex\femlib\temfftd.F	/^ 500  CONTINUE$/;"	l	subroutine:DPFA2F	file:
500	.\semtex\femlib\temfftd.F	/^ 500  CONTINUE$/;"	l	subroutine:DPFA3F	file:
500	.\semtex\femlib\temfftd.F	/^ 500  CONTINUE$/;"	l	subroutine:DPFA5F	file:
55	.\semtex\femlib\netlib.f	/^   55   CONTINUE$/;"	l	subroutine:ZBESJ	file:
60	.\semtex\femlib\canfft.f	/^ 60               CONTINUE$/;"	l	subroutine:DPASS1	file:
60	.\semtex\femlib\canfft.f	/^ 60         CONTINUE$/;"	l	subroutine:DMRCFT	file:
60	.\semtex\femlib\netlib.f	/^   60   CONTINUE$/;"	l	subroutine:ZASYI	file:
60	.\semtex\femlib\netlib.f	/^   60   CONTINUE$/;"	l	subroutine:ZSERI	file:
60	.\semtex\femlib\netlib.f	/^   60   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
60	.\semtex\femlib\netlib.f	/^   60   CONTINUE$/;"	l	subroutine:ZUNI1	file:
60	.\semtex\femlib\netlib.f	/^   60   CONTINUE$/;"	l	subroutine:ZUNI2	file:
60	.\semtex\femlib\netlib.f	/^   60 BR = ZM*DRT$/;"	l	subroutine:AZSQRT	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	function:DGAMLN	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:AZLOG	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZACAI	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZAIRY	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZBESJ	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZBINU	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZBKNU	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZBUNI	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZMLRI	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZRATI	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZUNIK	file:
60	.\semtex\femlib\netlib.f	/^   60 CONTINUE$/;"	l	subroutine:ZUOIK	file:
60	.\semtex\femlib\netlib.f	/^   60 if (x.ge.xm) go to 70$/;"	l	function:fbrent	file:
60	.\semtex\femlib\temfftd.F	/^ 60      CONTINUE$/;"	l	subroutine:DMPFFT	file:
60	.\semtex\femlib\temfftd.F	/^ 60   CONTINUE$/;"	l	subroutine:DSETPF	file:
600	.\semtex\femlib\netlib.f	/^  600    CONTINUE                                                       $/;"	l	subroutine:RCM	file:
70	.\semtex\femlib\canfft.f	/^ 70               CONTINUE$/;"	l	subroutine:DPASS1	file:
70	.\semtex\femlib\canfft.f	/^ 70         CONTINUE$/;"	l	subroutine:DMRCFT	file:
70	.\semtex\femlib\netlib.f	/^   70   CONTINUE$/;"	l	subroutine:ZSERI	file:
70	.\semtex\femlib\netlib.f	/^   70   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
70	.\semtex\femlib\netlib.f	/^   70   CONTINUE$/;"	l	subroutine:ZUNI1	file:
70	.\semtex\femlib\netlib.f	/^   70   CONTINUE$/;"	l	subroutine:ZUNI2	file:
70	.\semtex\femlib\netlib.f	/^   70 BR = ZM*DRT$/;"	l	subroutine:AZSQRT	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	function:DGAMLN	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	subroutine:ZACAI	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	subroutine:ZAIRY	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	subroutine:ZASYI	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	subroutine:ZBINU	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	subroutine:ZBKNU	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	subroutine:ZBUNI	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	subroutine:ZMLRI	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	subroutine:ZUNIK	file:
70	.\semtex\femlib\netlib.f	/^   70 CONTINUE$/;"	l	subroutine:ZUOIK	file:
70	.\semtex\femlib\netlib.f	/^   70 e=a-x$/;"	l	function:fbrent	file:
700	.\semtex\femlib\netlib.f	/^  700    CONTINUE                                                       $/;"	l	subroutine:RCM	file:
80	.\semtex\femlib\canfft.f	/^ 80            CONTINUE$/;"	l	subroutine:DMRCFT	file:
80	.\semtex\femlib\netlib.f	/^   80   CONTINUE$/;"	l	subroutine:ZSERI	file:
80	.\semtex\femlib\netlib.f	/^   80   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
80	.\semtex\femlib\netlib.f	/^   80   CONTINUE$/;"	l	subroutine:ZUNI2	file:
80	.\semtex\femlib\netlib.f	/^   80 CONTINUE$/;"	l	subroutine:ZACAI	file:
80	.\semtex\femlib\netlib.f	/^   80 CONTINUE$/;"	l	subroutine:ZAIRY	file:
80	.\semtex\femlib\netlib.f	/^   80 CONTINUE$/;"	l	subroutine:ZASYI	file:
80	.\semtex\femlib\netlib.f	/^   80 CONTINUE$/;"	l	subroutine:ZBINU	file:
80	.\semtex\femlib\netlib.f	/^   80 CONTINUE$/;"	l	subroutine:ZBKNU	file:
80	.\semtex\femlib\netlib.f	/^   80 CONTINUE$/;"	l	subroutine:ZBUNI	file:
80	.\semtex\femlib\netlib.f	/^   80 CONTINUE$/;"	l	subroutine:ZMLRI	file:
80	.\semtex\femlib\netlib.f	/^   80 CONTINUE$/;"	l	subroutine:ZUNI1	file:
80	.\semtex\femlib\netlib.f	/^   80 CONTINUE$/;"	l	subroutine:ZUOIK	file:
80	.\semtex\femlib\netlib.f	/^   80 d=c*e$/;"	l	function:fbrent	file:
90	.\semtex\femlib\canfft.f	/^ 90         CONTINUE$/;"	l	subroutine:DMRCFT	file:
90	.\semtex\femlib\netlib.f	/^   90   CONTINUE$/;"	l	subroutine:ZUNHJ	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZAIRY	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZASYI	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZBINU	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZBKNU	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZBUNI	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZMLRI	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZSERI	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZUNI1	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZUNI2	file:
90	.\semtex\femlib\netlib.f	/^   90 CONTINUE$/;"	l	subroutine:ZUOIK	file:
90	.\semtex\femlib\netlib.f	/^   90 if (dabs(d).lt.tol1) go to 100$/;"	l	function:fbrent	file:
900	.\semtex\femlib\netlib.f	/^  900 FORMAT(\/)$/;"	l	subroutine:XERROR	file:
9000	.\semtex\femlib\netlib.f	/^ 9000 FORMAT(\/' Adjust D1MACH by uncommenting data statements'\/$/;"	l	function:D1MACH	file:
9010	.\semtex\femlib\netlib.f	/^ 9010 FORMAT(\/' Adjust autodoubled I1MACH by uncommenting data'\/$/;"	l	function:I1MACH	file:
9020	.\semtex\femlib\netlib.f	/^ 9020 FORMAT(\/' Adjust I1MACH by uncommenting data statements'\/$/;"	l	function:I1MACH	file:
9999	.\semtex\femlib\netlib.f	/^ 9999 FORMAT( ' ** On entry to ', A6, ' parameter number ', I2, ' had ',$/;"	l	subroutine:XERBLA	file:
AM	.\semtex\utility\noiz.c	54;"	d	file:
AM	.\semtex\veclib\xrand.c	190;"	d	file:
AM	.\semtex\veclib\xrand.c	233;"	d	file:
AM	.\semtex\veclib\xrand.c	244;"	d	file:
AM	.\semtex\veclib\xrand.c	305;"	d	file:
ANALYSIS_H	.\semtex\src\analysis.h	2;"	d
ARRAY_H	.\semtex\include\Array.h	2;"	d
ASCII	.\semtex\utility\convert.c	/^typedef enum { UNKNOWN, ASCII, IEEE_BIG, IEEE_LITTLE } FORMAT;$/;"	e	enum:__anon6	file:
ATHIRD	.\semtex\utility\tensorcalcs.c	52;"	d	file:
AUXFIELD_H	.\semtex\src\auxfield.h	2;"	d
AXIS	.\semtex\utility\probe.C	/^} AXIS;$/;"	t	typeref:enum:__anon7	file:
AZABS	.\semtex\femlib\netlib.f	/^      DOUBLE PRECISION FUNCTION AZABS(/;"	f
AZEXP	.\semtex\femlib\netlib.f	/^      SUBROUTINE AZEXP(/;"	s
AZLOG	.\semtex\femlib\netlib.f	/^      SUBROUTINE AZLOG(/;"	s
AZSQRT	.\semtex\femlib\netlib.f	/^      SUBROUTINE AZSQRT(/;"	s
AdamsBashforth	.\semtex\src\integration.C	/^void Integration::AdamsBashforth  (const int_t n    ,$/;"	f	class:Integration
AdamsMoulton	.\semtex\src\integration.C	/^void Integration::AdamsMoulton (const int_t n    ,$/;"	f	class:Integration
Analyser	.\semtex\src\analysis.C	/^Analyser::Analyser (Domain* D   ,$/;"	f	class:Analyser
Analyser	.\semtex\src\analysis.h	/^class Analyser$/;"	c
Angle	.\semtex\utility\preplot.c	/^float              Angle;$/;"	v
AuxField	.\semtex\src\auxfield.C	/^AuxField::AuxField (real_t*           alloc,$/;"	f	class:AuxField
AuxField	.\semtex\src\auxfield.h	/^class AuxField$/;"	c
BADELEMENT	.\semtex\utility\preplot.c	/^                           BADELEMENT = 99}            ElementType;$/;"	e	enum:ElementType	file:
BCMGR_H	.\semtex\src\bcmgr.h	2;"	d
BCmgr	.\semtex\src\bcmgr.C	/^BCmgr::BCmgr (FEML*             file,$/;"	f	class:BCmgr
BCmgr	.\semtex\src\bcmgr.h	/^class BCmgr$/;"	c
BCs	.\semtex\src\bsys.C	/^const vector<Boundary*>& BoundarySys::BCs (const int_t mode) const$/;"	f	class:BoundarySys
BCtriple	.\semtex\src\bcmgr.h	/^typedef struct bctriple { char group; int_t elmt; int_t side; } BCtriple;$/;"	t	typeref:struct:bctriple
BLAS	.\semtex\veclib\cveclib.h	14;"	d
BLAS_H	.\semtex\veclib\blas.h	2;"	d
BLJPCG	.\semtex\femlib\cfemdef.h	/^  BLJPCG	\/* Conjugate gradient, block Jacobi      preconditioner. *\/$/;"	e	enum:solver_kind
BLOCK	.\semtex\utility\preplot.c	/^typedef enum FormatType   {BLOCK,POINT,FEBLOCK,FEPOINT} FormatType;$/;"	e	enum:FormatType	file:
BOOLEANH	.\semtex\include\Boolean.h	12;"	d
BOUNDARY_H	.\semtex\src\boundary.h	2;"	d
BRICK	.\semtex\utility\preplot.c	/^                           TETRAHEDRON,BRICK,$/;"	e	enum:ElementType	file:
BSYS_H	.\semtex\src\bsys.h	2;"	d
BT	.\semtex\femlib\operators.c	/^  real_t*         BT  ;		\/* Transpose of BW.                          *\/$/;"	m	struct:legtran	file:
BT	.\semtex\femlib\operators.c	/^  real_t*         BT  ;		\/* Transpose of BW.                          *\/$/;"	m	struct:modtran	file:
BW	.\semtex\femlib\operators.c	/^  real_t*         BW  ;		\/* np*np inverse Legendre transform matrix.  *\/$/;"	m	struct:legtran	file:
BW	.\semtex\femlib\operators.c	/^  real_t*         BW  ;		\/* np*np inverse modal transform matrix.     *\/$/;"	m	struct:modtran	file:
BadWrite	.\semtex\utility\preplot.c	/^static void BadWrite()$/;"	f	file:
Blas	.\semtex\veclib\blas.h	/^class Blas {$/;"	c
BlckFName	.\semtex\utility\preplot.c	/^char               BlckFName[40];$/;"	v
BlckFile	.\semtex\utility\preplot.c	/^FILE              *BlckFile;$/;"	v
Boolean	.\semtex\include\Boolean.h	/^    Boolean()                      {}   \/\/ Construct uninitialized.$/;"	f	class:Boolean
Boolean	.\semtex\include\Boolean.h	/^    Boolean(double d) : v(d != 0)  {}   \/\/ Construct and initialize to (d != 0).$/;"	f	class:Boolean
Boolean	.\semtex\include\Boolean.h	/^    Boolean(float f) :  v(f != 0)  {}   \/\/ Construct and initialize to (f != 0).$/;"	f	class:Boolean
Boolean	.\semtex\include\Boolean.h	/^    Boolean(int i) :    v(i != 0)  {}   \/\/ Construct and initialize to (i != 0).$/;"	f	class:Boolean
Boolean	.\semtex\include\Boolean.h	/^    Boolean(void* p) :  v(p != 0)  {}   \/\/ Construct and initialize to (p != 0).$/;"	f	class:Boolean
Boolean	.\semtex\include\Boolean.h	/^class Boolean {$/;"	c
Boolean	.\semtex\utility\preplot.c	494;"	d	file:
Boundary	.\semtex\src\boundary.h	/^  Boundary (const int_t id, const char* group, const Condition* bcond,$/;"	f	class:Boundary
Boundary	.\semtex\src\boundary.h	/^class Boundary : public Edge$/;"	c
BoundarySys	.\semtex\src\bsys.C	/^BoundarySys::BoundarySys (BCmgr*                  bcmgr,$/;"	f	class:BoundarySys
BoundarySys	.\semtex\src\bsys.h	/^class BoundarySys$/;"	c
BoxFillColor	.\semtex\utility\preplot.c	/^float              BoxFillColor;$/;"	v
BoxMargin	.\semtex\utility\preplot.c	/^float              BoxMargin;$/;"	v
BoxOutlineColor	.\semtex\utility\preplot.c	/^float              BoxOutlineColor;$/;"	v
BoxType	.\semtex\utility\preplot.c	/^float              BoxType;$/;"	v
C1	.\semtex\utility\tensorcalcs.c	54;"	d	file:
C2P	.\semtex\utility\topre.c	/^static zomplex C2P(zomplex z)$/;"	f	file:
C3D	.\semtex\dns\integrate.C	/^static bool  C3D;$/;"	v	file:
CFL	.\semtex\src\element.C	/^real_t Element::CFL (const real_t  d   ,$/;"	f	class:Element
CIRCLE	.\semtex\utility\preplot.c	/^                           CIRCLE,$/;"	e	enum:GeometryType	file:
CONDITION_H	.\semtex\src\condition.h	2;"	d
CRAY	.\semtex\utility\preplot.c	410;"	d	file:
CUBE	.\semtex\utility\tensorcalcs.c	51;"	d	file:
CUSTOMLABELMARKER	.\semtex\utility\preplot.c	503;"	d	file:
CUSTOMLABELToken	.\semtex\utility\preplot.c	/^                           CUSTOMLABELToken,$/;"	e	enum:Tokens	file:
C_FEMLIB_H	.\semtex\femlib\cfemlib.h	2;"	d
C_PLYLIB_H	.\semtex\femlib\polylib.h	2;"	d
Cartesian	.\semtex\src\geometry.h	/^  enum CoordSys { Cartesian, Cylindrical };$/;"	e	enum:Geometry::CoordSys
CheckIfValue	.\semtex\utility\preplot.c	/^void CheckIfValue()$/;"	f
CheckTokenStr	.\semtex\utility\preplot.c	/^Boolean CheckTokenStr(S)$/;"	f
CircularArc	.\semtex\src\mesh.C	/^CircularArc::CircularArc (const int_t  id,$/;"	f	class:CircularArc
CircularArc	.\semtex\src\mesh.h	/^class CircularArc : public Curve$/;"	c
CircularList	.\semtex\include\Clist.h	/^  CircularList() : head(0), num_elmts(0) {}$/;"	f	class:CircularList
CircularList	.\semtex\include\Clist.h	/^class CircularList {$/;"	c
CircularListIterator	.\semtex\include\Clist.h	/^  CircularListIterator(const CircularList<T>& list) : cur(list.head) {}$/;"	f	class:CircularListIterator
CircularListIterator	.\semtex\include\Clist.h	/^class CircularListIterator {$/;"	c
CleanUp	.\semtex\utility\preplot.c	/^static void CleanUp(IsOk)$/;"	f	file:
ClistH	.\semtex\include\Clist.h	8;"	d
Color	.\semtex\utility\preplot.c	/^float              Color;$/;"	v
CompareIdent	.\semtex\utility\preplot.c	/^Boolean CompareIdent(S,ID)$/;"	f
CondRecd	.\semtex\src\bcmgr.h	/^  class CondRecd {$/;"	c	class:BCmgr
Condition	.\semtex\src\condition.h	/^class Condition$/;"	c
ConvertFromPolar	.\semtex\utility\preplot.c	/^Boolean            ConvertFromPolar;$/;"	v
ConvertFromSpherical	.\semtex\utility\preplot.c	/^Boolean            ConvertFromSpherical;$/;"	v
ConvertPolar	.\semtex\utility\preplot.c	/^Boolean            ConvertPolar;$/;"	v
ConvertSpherical	.\semtex\utility\preplot.c	/^Boolean            ConvertSpherical;$/;"	v
CoordModeType	.\semtex\utility\preplot.c	/^typedef enum GridModeType {GRID,WINDOW}                 CoordModeType;$/;"	t	typeref:enum:GridModeType	file:
CoordSys	.\semtex\src\geometry.h	/^  enum CoordSys { Cartesian, Cylindrical };$/;"	g	class:Geometry
CopyCurData	.\semtex\utility\preplot.c	/^void CopyCurData(S,MaxLen)$/;"	f
CurData	.\semtex\utility\preplot.c	/^LStringType        CurData;$/;"	v
CurTValue	.\semtex\utility\preplot.c	/^float              CurTValue;$/;"	v
CurToken	.\semtex\utility\preplot.c	/^Tokens             CurToken;$/;"	v
Curve	.\semtex\src\mesh.h	/^class Curve$/;"	c
Custom1_C	.\semtex\utility\preplot.c	1844;"	d	file:
CustomLabel	.\semtex\utility\preplot.c	/^StringPtr          CustomLabel[MaxCustomLabels];$/;"	v
Cylindrical	.\semtex\src\geometry.h	/^  enum CoordSys { Cartesian, Cylindrical };$/;"	e	enum:Geometry::CoordSys
D1MACH	.\semtex\femlib\netlib.f	/^      DOUBLE PRECISION FUNCTION D1MACH(/;"	f
D9MACH	.\semtex\femlib\netlib.f	70;"	c	function:D1MACH
DASHDOT	.\semtex\utility\preplot.c	/^                           DASHDOT,$/;"	e	enum:LineType	file:
DASHDOTDOT	.\semtex\utility\preplot.c	/^                           DASHDOTDOT}                  LineType;$/;"	e	enum:LineType	file:
DASHED	.\semtex\utility\preplot.c	/^                           DASHED,$/;"	e	enum:LineType	file:
DATA2DF_H	.\semtex\src\data2df.h	2;"	d
DEC	.\semtex\utility\preplot.c	434;"	d	file:
DEC	.\semtex\utility\preplot.c	464;"	d	file:
DEGREE	.\semtex\femlib\netlib.f	/^      SUBROUTINE  DEGREE /;"	s
DFFT1	.\semtex\femlib\canfft.f	/^      SUBROUTINE DFFT1 /;"	s
DFT1D	.\semtex\src\data2df.C	/^Data2DF& Data2DF::DFT1D (const int_t sign)$/;"	f	class:Data2DF
DFTr	.\semtex\femlib\femlib.h	/^  static void DFTr (real_t*  data, const int_t nz, const int_t np,$/;"	f	class:Femlib
DGAMLN	.\semtex\femlib\netlib.f	/^      DOUBLE PRECISION FUNCTION DGAMLN(/;"	f
DGLL	.\semtex\femlib\polyops.c	/^void DGLL (const int_t   nz,$/;"	f
DGPFA	.\semtex\femlib\temfftd.F	/^      SUBROUTINE DGPFA /;"	s
DGRAD2	.\semtex\femlib\matops.F	/^      SUBROUTINE DGRAD2 /;"	s
DIRECT	.\semtex\femlib\cfemdef.h	/^  DIRECT,	\/* Cholesky back-substitution.                           *\/$/;"	e	enum:solver_kind
DISCRIMINANT	.\semtex\utility\addfield.C	/^  DISCRIMINANT,$/;"	e	enum:__anon4	file:
DIVERGENCE	.\semtex\utility\addfield.C	/^  DIVERGENCE  ,$/;"	e	enum:__anon4	file:
DMPFFT	.\semtex\femlib\temfftd.F	/^      SUBROUTINE DMPFFT /;"	s
DMRCFT	.\semtex\femlib\canfft.f	/^      SUBROUTINE DMRCFT /;"	s
DMXM	.\semtex\veclib\xmxm.f	/^      SUBROUTINE DMXM /;"	s
DMXMA	.\semtex\veclib\xmxm.f	/^      SUBROUTINE DMXMA /;"	s
DMXMS	.\semtex\veclib\xmxm.f	/^      SUBROUTINE DMXMS /;"	s
DMXMTS	.\semtex\veclib\xmxm.f	/^      SUBROUTINE DMXMTS /;"	s
DMXV	.\semtex\veclib\xmxm.f	/^      SUBROUTINE DMXV /;"	s
DNSAnalyser	.\semtex\dns\dns.h	/^class DNSAnalyser : public Analyser$/;"	c
DNSAnalyser	.\semtex\dns\dnsanalysis.C	/^DNSAnalyser::DNSAnalyser (Domain* D   ,$/;"	f	class:DNSAnalyser
DNS_H	.\semtex\dns\dns.h	2;"	d
DOMAIN_H	.\semtex\src\domain.h	2;"	d
DOTTED	.\semtex\utility\preplot.c	/^                           DOTTED,$/;"	e	enum:LineType	file:
DOUBLE	.\semtex\utility\preplot.c	416;"	d	file:
DOUBLE	.\semtex\utility\preplot.c	425;"	d	file:
DPASS1	.\semtex\femlib\canfft.f	/^      SUBROUTINE DPASS1 /;"	s
DPFA2F	.\semtex\femlib\temfftd.F	/^      SUBROUTINE DPFA2F(/;"	s
DPFA3F	.\semtex\femlib\temfftd.F	/^      SUBROUTINE DPFA3F /;"	s
DPFA5F	.\semtex\femlib\temfftd.F	/^      SUBROUTINE DPFA5F /;"	s
DPREFT	.\semtex\femlib\canfft.f	/^      SUBROUTINE DPREFT /;"	s
DPT2D	.\semtex\src\data2df.C	/^Data2DF& Data2DF::DPT2D (const int_t sign, $/;"	f	class:Data2DF
DRFFTB	.\semtex\femlib\netlib.f	/^      SUBROUTINE DRFFTB /;"	s
DRFFTF	.\semtex\femlib\netlib.f	/^      SUBROUTINE DRFFTF /;"	s
DRFFTI	.\semtex\femlib\netlib.f	/^      SUBROUTINE DRFFTI /;"	s
DSETPF	.\semtex\femlib\temfftd.F	/^      SUBROUTINE DSETPF /;"	s
DTPR2D	.\semtex\femlib\matops.F	/^       SUBROUTINE DTPR2D /;"	s
Data2DF	.\semtex\src\data2df.C	/^Data2DF::Data2DF (const int_t nP  ,$/;"	f	class:Data2DF
Data2DF	.\semtex\src\data2df.h	/^class Data2DF$/;"	c
Dgc	.\semtex\femlib\polylib.h	74;"	d
Dgl	.\semtex\femlib\polylib.h	69;"	d
Dglc	.\semtex\femlib\polylib.h	77;"	d
Dgll	.\semtex\femlib\polylib.h	72;"	d
Dgrcm	.\semtex\femlib\polylib.h	75;"	d
Dgrcp	.\semtex\femlib\polylib.h	76;"	d
Dgrlm	.\semtex\femlib\polylib.h	70;"	d
Dgrlp	.\semtex\femlib\polylib.h	71;"	d
Domain	.\semtex\src\domain.C	/^Domain::Domain (FEML*             F,$/;"	f	class:Domain
Domain	.\semtex\src\domain.h	/^class Domain$/;"	c
Done	.\semtex\utility\preplot.c	/^Boolean            Done;$/;"	v
Dump	.\semtex\utility\avgdump.c	/^} Dump;$/;"	t	typeref:struct:__anon5	file:
Dump	.\semtex\utility\rstress.c	/^} Dump;$/;"	t	typeref:struct:__anon8	file:
DumpString	.\semtex\utility\preplot.c	/^void DumpString(S)$/;"	f
DupConnect	.\semtex\utility\preplot.c	/^Boolean            DupConnect;$/;"	v
DupConnectToken	.\semtex\utility\preplot.c	/^                           DupConnectToken,$/;"	e	enum:Tokens	file:
DupVars	.\semtex\utility\preplot.c	/^Boolean            DupVars[MaxNumVars+1];$/;"	v
EDGE_H	.\semtex\src\edge.h	2;"	d
EGROWTH	.\semtex\utility\addfield.C	/^  EGROWTH     ,$/;"	e	enum:__anon4	file:
ELEMENT_H	.\semtex\src\element.h	2;"	d
ELLIPSE	.\semtex\utility\preplot.c	/^                           ELLIPSE,$/;"	e	enum:GeometryType	file:
ELLIPTICITY	.\semtex\utility\addfield.C	/^  ELLIPTICITY ,$/;"	e	enum:__anon4	file:
ENERGY	.\semtex\utility\addfield.C	/^  ENERGY      ,     \/\/ -- NB: the placing of ENERGY and FUNCTION in the first$/;"	e	enum:__anon4	file:
ENSTROPHY	.\semtex\utility\addfield.C	/^  ENSTROPHY   ,$/;"	e	enum:__anon4	file:
EOHMARKER	.\semtex\utility\preplot.c	504;"	d	file:
EPS	.\semtex\femlib\polylib.c	10;"	d	file:
EPS	.\semtex\femlib\tests\polylib_test.c	92;"	d	file:
EPS	.\semtex\veclib\xrand.c	195;"	d	file:
EPS	.\semtex\veclib\xrand.c	238;"	d	file:
EPS	.\semtex\veclib\xrand.c	254;"	d	file:
EPS	.\semtex\veclib\xrand.c	315;"	d	file:
EPSDP	.\semtex\veclib\cveclib.h	58;"	d
EPSDP	.\semtex\veclib\lxsame.c	13;"	d	file:
EPSDP	.\semtex\veclib\utility.h	/^const double EPSDP  = 6.0e-14;$/;"	v
EPSSP	.\semtex\veclib\cveclib.h	54;"	d
EPSSP	.\semtex\veclib\lxsame.c	12;"	d	file:
EPSSP	.\semtex\veclib\utility.h	/^const double EPSSP  = 6.0e-7;$/;"	v
EPSm12	.\semtex\veclib\cveclib.h	57;"	d
EPSm12	.\semtex\veclib\utility.h	/^const double EPSm12 = 1.0e-12;$/;"	v
EPSm14	.\semtex\veclib\cveclib.h	59;"	d
EPSm14	.\semtex\veclib\utility.h	/^const double EPSm14 = 1.0e-14;$/;"	v
EPSm20	.\semtex\veclib\cveclib.h	60;"	d
EPSm20	.\semtex\veclib\utility.h	/^const double EPSm20 = 1.0e-20;$/;"	v
EPSm3	.\semtex\veclib\cveclib.h	50;"	d
EPSm3	.\semtex\veclib\utility.h	/^const double EPSm3  = 1.0e-3;$/;"	v
EPSm30	.\semtex\veclib\cveclib.h	61;"	d
EPSm30	.\semtex\veclib\utility.h	/^const double EPSm30 = 1.0e-30;$/;"	v
EPSm4	.\semtex\veclib\cveclib.h	51;"	d
EPSm4	.\semtex\veclib\utility.h	/^const double EPSm4  = 1.0e-4;$/;"	v
EPSm5	.\semtex\veclib\cveclib.h	52;"	d
EPSm5	.\semtex\veclib\utility.h	/^const double EPSm5  = 1.0e-5;$/;"	v
EPSm6	.\semtex\veclib\cveclib.h	53;"	d
EPSm6	.\semtex\veclib\utility.h	/^const double EPSm6  = 1.0e-6;$/;"	v
EPSm7	.\semtex\veclib\cveclib.h	55;"	d
EPSm7	.\semtex\veclib\utility.h	/^const double EPSm7  = 1.0e-7;$/;"	v
EPSm8	.\semtex\veclib\cveclib.h	56;"	d
EPSm8	.\semtex\veclib\utility.h	/^const double EPSm8  = 1.0e-8;$/;"	v
ERROR	.\semtex\veclib\cveclib.h	/^enum    err_lev {WARNING, ERROR, REMARK};$/;"	e	enum:err_lev
ERROR	.\semtex\veclib\utility.h	/^enum lev {WARNING, ERROR, REMARK};$/;"	e	enum:lev
EXACT_MAX	.\semtex\utility\compare.C	/^const  int_t EXACT_MAX = 32;$/;"	v
Echo	.\semtex\utility\preplot.c	/^Boolean            Echo;$/;"	v
Edge	.\semtex\src\edge.C	/^Edge::Edge (const char*    grp ,$/;"	f	class:Edge
Edge	.\semtex\src\edge.h	/^class Edge$/;"	c
Element	.\semtex\src\element.C	/^Element::Element (const int_t id,$/;"	f	class:Element
Element	.\semtex\src\element.h	/^class Element$/;"	c
Element	.\semtex\utility\preplot.c	/^ElementType        Element = BADELEMENT;$/;"	v
ElementType	.\semtex\utility\preplot.c	/^                           BADELEMENT = 99}            ElementType;$/;"	t	typeref:enum:ElementType	file:
ElementType	.\semtex\utility\preplot.c	/^typedef enum ElementType  {TRIANGLE,QUADRILATERAL,$/;"	g	file:
Elmt	.\semtex\src\mesh.h	/^  class Elmt {$/;"	c	class:Mesh
EndOfHeader	.\semtex\utility\preplot.c	/^Boolean            EndOfHeader;$/;"	v
EndofFileToken	.\semtex\utility\preplot.c	/^                           EndofFileToken,$/;"	e	enum:Tokens	file:
EqualsToken	.\semtex\utility\preplot.c	/^                           EqualsToken,$/;"	e	enum:Tokens	file:
ErrMsg	.\semtex\utility\preplot.c	/^void ErrMsg(S,ShowLine)$/;"	f
Essential	.\semtex\src\condition.h	/^  Essential              (const char* v) : _value (strtod (v, 0)) { }$/;"	f	class:Essential
Essential	.\semtex\src\condition.h	/^class Essential : public Condition$/;"	c
EssentialFunction	.\semtex\src\condition.C	/^EssentialFunction::EssentialFunction (const char* f)$/;"	f	class:EssentialFunction
EssentialFunction	.\semtex\src\condition.h	/^class EssentialFunction : public Condition$/;"	c
ExchangeKind	.\semtex\femlib\cfemdef.h	/^} ExchangeKind;$/;"	t	typeref:enum:exchange_kind
Extrapolation	.\semtex\src\integration.C	/^void Integration::Extrapolation  (const int_t n    ,$/;"	f	class:Integration
F77NAME	.\semtex\femlib\cfemdef.h	24;"	d
FAC	.\semtex\veclib\xrand.c	322;"	d	file:
FAC	.\semtex\veclib\xrand.c	369;"	d	file:
FACTOR	.\semtex\femlib\canfft.f	/^      SUBROUTINE FACTOR /;"	s
FALSE	.\semtex\utility\preplot.c	492;"	d	file:
FAMILY_H	.\semtex\src\family.h	2;"	d
FEBLOCK	.\semtex\utility\preplot.c	/^typedef enum FormatType   {BLOCK,POINT,FEBLOCK,FEPOINT} FormatType;$/;"	e	enum:FormatType	file:
FEMDEF_H	.\semtex\femlib\cfemdef.h	2;"	d
FEML	.\semtex\src\feml.C	/^FEML::FEML (const char* session)$/;"	f	class:FEML
FEML	.\semtex\src\feml.h	/^class FEML$/;"	c
FEMLIB_H	.\semtex\femlib\femlib.h	2;"	d
FEML_H	.\semtex\src\feml.h	2;"	d
FEPOINT	.\semtex\utility\preplot.c	/^typedef enum FormatType   {BLOCK,POINT,FEBLOCK,FEPOINT} FormatType;$/;"	e	enum:FormatType	file:
FIELD_H	.\semtex\src\field.h	2;"	d
FLAG_MAX	.\semtex\utility\addfield.C	103;"	d	file:
FLDS_MAX	.\semtex\utility\addfield.C	102;"	d	file:
FLOWRATE_H	.\semtex\src\flowrate.h	2;"	d
FNROOT	.\semtex\femlib\netlib.f	/^      SUBROUTINE  FNROOT /;"	s
FORMAT	.\semtex\utility\convert.c	/^typedef enum { UNKNOWN, ASCII, IEEE_BIG, IEEE_LITTLE } FORMAT;$/;"	t	typeref:enum:__anon6	file:
FORWARD	.\semtex\femlib\cfemdef.h	/^  FORWARD = +1	\/* Physical --> basis    space. *\/$/;"	e	enum:transform_kind
FREE_ARG	.\semtex\veclib\memory.c	14;"	d	file:
FT	.\semtex\femlib\operators.c	/^  real_t*         FT  ;		\/* Transpose of FW.                          *\/$/;"	m	struct:legtran	file:
FT	.\semtex\femlib\operators.c	/^  real_t*         FT  ;		\/* Transpose of FW.                          *\/$/;"	m	struct:modtran	file:
FULL	.\semtex\femlib\cfemdef.h	/^  FULL,		\/* Full exchange (preserves planar and element structure). *\/$/;"	e	enum:exchange_kind
FUNCTION	.\semtex\utility\addfield.C	/^  FUNCTION    ,	    \/\/    two positions is significant: don't break this.$/;"	e	enum:__anon4	file:
FW	.\semtex\femlib\operators.c	/^  real_t*         FW  ;		\/* np*np forward Legendre transform matrix.  *\/$/;"	m	struct:legtran	file:
FW	.\semtex\femlib\operators.c	/^  real_t*         FW  ;		\/* np*np forward modal transform matrix.     *\/$/;"	m	struct:modtran	file:
F_conjugate	.\semtex\src\data2df.C	/^Data2DF& Data2DF::F_conjugate (const bool zero)$/;"	f	class:Data2DF
F_shift	.\semtex\src\data2df.C	/^Data2DF& Data2DF::F_shift (const real alpha,$/;"	f	class:Data2DF
F_symmetrize	.\semtex\src\data2df.C	/^Data2DF& Data2DF::F_symmetrize (const bool zero)$/;"	f	class:Data2DF
Family	.\semtex\src\family.h	/^namespace Family {$/;"	n
FamilySize	.\semtex\femlib\family.c	/^integer FamilySize (integer* nint,$/;"	f
Femlib	.\semtex\femlib\femlib.h	/^class Femlib {$/;"	c
Femlib__parseVec	.\semtex\femlib\femlib.h	208;"	d
Field	.\semtex\src\field.C	/^Field::Field (BoundarySys*      B,$/;"	f	class:Field
Field	.\semtex\src\field.h	/^class Field : public AuxField$/;"	c
Field2DF	.\semtex\utility\project.C	/^Field2DF::Field2DF (const int_t nP  ,$/;"	f	class:Field2DF
FillColor	.\semtex\utility\preplot.c	/^float              FillColor;$/;"	v
FldMax	.\semtex\utility\enumerate.C	/^static const int_t FldMax = 16;$/;"	v	file:
FloatSize	.\semtex\utility\preplot.c	415;"	d	file:
FloatSize	.\semtex\utility\preplot.c	421;"	d	file:
FloatSize	.\semtex\utility\preplot.c	423;"	d	file:
Flowrate	.\semtex\src\flowrate.C	/^Flowrate::Flowrate (Domain* D,$/;"	f	class:Flowrate
Flowrate	.\semtex\src\flowrate.h	/^class Flowrate$/;"	c
FluidParticle	.\semtex\src\particle.C	/^FluidParticle::FluidParticle (Domain*     d,$/;"	f	class:FluidParticle
FluidParticle	.\semtex\src\particle.h	/^class FluidParticle$/;"	c
Font	.\semtex\utility\preplot.c	/^float              Font;$/;"	v
Format	.\semtex\utility\preplot.c	/^FormatType         Format;$/;"	v
FormatType	.\semtex\utility\preplot.c	/^typedef enum FormatType   {BLOCK,POINT,FEBLOCK,FEPOINT} FormatType;$/;"	g	file:
FormatType	.\semtex\utility\preplot.c	/^typedef enum FormatType   {BLOCK,POINT,FEBLOCK,FEPOINT} FormatType;$/;"	t	typeref:enum:FormatType	file:
GAUSS_DIFF	.\semtex\femlib\tests\polylib_test.c	97;"	d	file:
GAUSS_INT	.\semtex\femlib\tests\polylib_test.c	94;"	d	file:
GAUSS_INTERP	.\semtex\femlib\tests\polylib_test.c	100;"	d	file:
GAUSS_LOBATTO_DIFF	.\semtex\femlib\tests\polylib_test.c	99;"	d	file:
GAUSS_LOBATTO_INT	.\semtex\femlib\tests\polylib_test.c	96;"	d	file:
GAUSS_LOBATTO_INTERP	.\semtex\femlib\tests\polylib_test.c	102;"	d	file:
GAUSS_RADAU_DIFF	.\semtex\femlib\tests\polylib_test.c	98;"	d	file:
GAUSS_RADAU_INT	.\semtex\femlib\tests\polylib_test.c	95;"	d	file:
GAUSS_RADAU_INTERP	.\semtex\femlib\tests\polylib_test.c	101;"	d	file:
GD	.\semtex\veclib\xrand.c	/^static double GD (double mean, double sdev)$/;"	f	file:
GENRCM	.\semtex\femlib\netlib.f	/^      SUBROUTINE  GENRCM /;"	s
GEOMETRYToken	.\semtex\utility\preplot.c	/^                           GEOMETRYToken,$/;"	e	enum:Tokens	file:
GEOMETRY_H	.\semtex\src\geometry.h	2;"	d
GEOMMARKER	.\semtex\utility\preplot.c	501;"	d	file:
GJ	.\semtex\femlib\cfemdef.h	/^  GJ  = 'G',	\/* Gauss-Jacobi quadrature.         *\/$/;"	e	enum:quadrature_kind
GLJ	.\semtex\femlib\cfemdef.h	/^  GLJ = 'L',	\/* Gauss-Lobatto-Jacobi quadrature. *\/$/;"	e	enum:quadrature_kind
GLLzw	.\semtex\femlib\femlib.h	/^  static void   GLLzw (const int_t N,real_t* z,real_t* w)  {ZWGLL(z,w,N);}$/;"	f	class:Femlib
GLOBAL	.\semtex\utility\preplot.c	/^typedef enum ScopeType    {GLOBAL,LOCAL}                ScopeType;$/;"	e	enum:ScopeType	file:
GRAD2	.\semtex\femlib\tests\tensorproducts.C	24;"	d	file:
GRID	.\semtex\utility\preplot.c	/^typedef enum GridModeType {GRID,WINDOW}                 CoordModeType;$/;"	e	enum:GridModeType	file:
GRJ	.\semtex\femlib\cfemdef.h	/^  GRJ = 'R',	\/* Gauss-Radau-Jacobi quadrature.   *\/$/;"	e	enum:quadrature_kind
GeomType	.\semtex\utility\preplot.c	/^GeometryType       GeomType;$/;"	v
Geometry	.\semtex\src\geometry.h	/^class Geometry$/;"	c
GeometryType	.\semtex\utility\preplot.c	/^                           LINE3D }                     GeometryType;$/;"	t	typeref:enum:GeometryType	file:
GeometryType	.\semtex\utility\preplot.c	/^typedef enum GeometryType {LINE,$/;"	g	file:
GetAReal	.\semtex\utility\preplot.c	/^void GetAReal(R)$/;"	f
GetAnInteger	.\semtex\utility\preplot.c	/^void GetAnInteger(I)$/;"	f
GetBlock	.\semtex\utility\preplot.c	/^void GetBlock(F,IStart,IEnd,ISkip,IMax,$/;"	f
GetColor	.\semtex\utility\preplot.c	/^void GetColor(C)$/;"	f
GetDupInfo	.\semtex\utility\preplot.c	/^void GetDupInfo()$/;"	f
GetElementType	.\semtex\utility\preplot.c	/^void GetElementType()$/;"	f
GetFormat	.\semtex\utility\preplot.c	/^void GetFormat()$/;"	f
GetMode	.\semtex\utility\preplot.c	/^void GetMode()$/;"	f
GetNextLimit	.\semtex\utility\preplot.c	/^int GetNextLimit(CPtrPtr,Default,IsOk)$/;"	f
GetNextLine	.\semtex\utility\preplot.c	/^void GetNextLine(F)$/;"	f
GetRandomFileName	.\semtex\utility\preplot.c	/^void GetRandomFileName(Prefix,F)$/;"	f
GetScope	.\semtex\utility\preplot.c	/^void GetScope()$/;"	f
GetToken	.\semtex\utility\preplot.c	/^void GetToken(TreatParenAsAlpha,OkToGetNextLine,F)$/;"	f
GridModeType	.\semtex\utility\preplot.c	/^typedef enum GridModeType {GRID,WINDOW}                 CoordModeType;$/;"	g	file:
HALF	.\semtex\femlib\cfemdef.h	/^  HALF		\/* Half memory exchange across processes (planar only).    *\/$/;"	e	enum:exchange_kind
HELICITY	.\semtex\utility\addfield.C	/^  HELICITY    ,$/;"	e	enum:__anon4	file:
HISTORY_H	.\semtex\src\history.h	2;"	d
Header	.\semtex\src\data2df.h	/^class Header$/;"	c
HeaderString	.\semtex\utility\preplot.c	/^LStringType        HeaderString;$/;"	v
Height	.\semtex\utility\preplot.c	/^float              Height;$/;"	v
Helmholtz	.\semtex\elliptic\helmholtz.C	/^void Helmholtz (Domain*   D,$/;"	f
Helmholtz	.\semtex\src\element.C	/^void Element::Helmholtz (const real_t lambda2,$/;"	f	class:Element
HelmholtzDiag	.\semtex\src\element.C	/^void Element::HelmholtzDiag (const real_t lambda2,$/;"	f	class:Element
HelmholtzKern	.\semtex\src\element.C	/^void Element::HelmholtzKern (const real_t lambda2,$/;"	f	class:Element
HelmholtzOp	.\semtex\src\element.C	/^void Element::HelmholtzOp (const real_t lambda2,$/;"	f	class:Element
HelmholtzOperator	.\semtex\src\field.C	/^void Field::HelmholtzOperator (const real_t* x      ,$/;"	f	class:Field
HelmholtzRow	.\semtex\src\element.C	/^void Element::HelmholtzRow (const real_t lambda2,$/;"	f	class:Element
HelmholtzSC	.\semtex\src\element.C	/^void Element::HelmholtzSC (const real_t lambda2,$/;"	f	class:Element
HistoryPoint	.\semtex\src\history.h	/^  HistoryPoint (const integer id, const Element* e, const real r, $/;"	f	class:HistoryPoint
HistoryPoint	.\semtex\src\history.h	/^class HistoryPoint$/;"	c
I1MACH	.\semtex\femlib\netlib.f	/^      INTEGER FUNCTION I1MACH(/;"	f
I1MCR1	.\semtex\femlib\netlib.f	/^      SUBROUTINE I1MCR1(/;"	s
I1MCRY	.\semtex\femlib\netlib.f	/^      SUBROUTINE I1MCRY(/;"	s
IA	.\semtex\utility\noiz.c	52;"	d	file:
IA	.\semtex\veclib\xrand.c	188;"	d	file:
IA	.\semtex\veclib\xrand.c	231;"	d	file:
IA1	.\semtex\veclib\xrand.c	246;"	d	file:
IA1	.\semtex\veclib\xrand.c	307;"	d	file:
IA2	.\semtex\veclib\xrand.c	247;"	d	file:
IA2	.\semtex\veclib\xrand.c	308;"	d	file:
ID	.\semtex\src\boundary.h	/^  int_t ID        () const { return _id; }$/;"	f	class:Boundary
ID	.\semtex\src\element.h	/^  int_t ID () const { return _id; }$/;"	f	class:Element
ID	.\semtex\src\history.h	/^  integer               ID      () const { return _id; } $/;"	f	class:HistoryPoint
ID	.\semtex\src\mesh.h	/^    int_t         ID;$/;"	m	class:Mesh::Side
ID	.\semtex\src\mesh.h	/^    int_t ID;$/;"	m	class:Mesh::Elmt
ID	.\semtex\src\mesh.h	/^    int_t ID;$/;"	m	class:Mesh::Node
ID	.\semtex\src\particle.h	/^  int_t           ID        () const { return _id;     }$/;"	f	class:FluidParticle
IDMax	.\semtex\src\particle.h	/^  static int_t    IDMax     ()       { return _ID_MAX; }$/;"	f	class:FluidParticle
IDstatus	.\semtex\src\mesh.h	/^  enum IDstatus {UNSET = -1};$/;"	g	class:Mesh
IEEE_BIG	.\semtex\utility\convert.c	/^typedef enum { UNKNOWN, ASCII, IEEE_BIG, IEEE_LITTLE } FORMAT;$/;"	e	enum:__anon6	file:
IEEE_LITTLE	.\semtex\utility\convert.c	/^typedef enum { UNKNOWN, ASCII, IEEE_BIG, IEEE_LITTLE } FORMAT;$/;"	e	enum:__anon6	file:
IEnd	.\semtex\utility\preplot.c	/^LgIndex            IEnd[MaxNumZones+1];$/;"	v
IJKOffset	.\semtex\utility\preplot.c	1650;"	d	file:
IJKSetSet	.\semtex\utility\preplot.c	/^Boolean            IJKSetSet;$/;"	v
IJKSetSize	.\semtex\utility\preplot.c	495;"	d	file:
IM	.\semtex\utility\noiz.c	53;"	d	file:
IM	.\semtex\veclib\xrand.c	189;"	d	file:
IM	.\semtex\veclib\xrand.c	232;"	d	file:
IM1	.\semtex\veclib\xrand.c	242;"	d	file:
IM1	.\semtex\veclib\xrand.c	303;"	d	file:
IM2	.\semtex\veclib\xrand.c	243;"	d	file:
IM2	.\semtex\veclib\xrand.c	304;"	d	file:
IMM1	.\semtex\veclib\xrand.c	245;"	d	file:
IMM1	.\semtex\veclib\xrand.c	306;"	d	file:
IMax	.\semtex\utility\preplot.c	/^LgIndex            IMax,JMax,KMax;$/;"	v
IN	.\semtex\femlib\operators.c	/^  real_t*        IN   ; \/* Interpolant\/projection matrix, row-major order    *\/$/;"	m	struct:projop	file:
INTEGRATION_H	.\semtex\src\integration.h	2;"	d
INVERSE	.\semtex\femlib\cfemdef.h	/^  INVERSE = -1,	\/* Basis    --> physical space. *\/$/;"	e	enum:transform_kind
IQ	.\semtex\utility\noiz.c	55;"	d	file:
IQ	.\semtex\veclib\xrand.c	191;"	d	file:
IQ	.\semtex\veclib\xrand.c	234;"	d	file:
IQ1	.\semtex\veclib\xrand.c	248;"	d	file:
IQ1	.\semtex\veclib\xrand.c	309;"	d	file:
IQ2	.\semtex\veclib\xrand.c	249;"	d	file:
IQ2	.\semtex\veclib\xrand.c	310;"	d	file:
IR	.\semtex\utility\noiz.c	56;"	d	file:
IR	.\semtex\veclib\xrand.c	192;"	d	file:
IR	.\semtex\veclib\xrand.c	235;"	d	file:
IR1	.\semtex\veclib\xrand.c	250;"	d	file:
IR1	.\semtex\veclib\xrand.c	311;"	d	file:
IR2	.\semtex\veclib\xrand.c	251;"	d	file:
IR2	.\semtex\veclib\xrand.c	312;"	d	file:
IRIS	.\semtex\utility\preplot.c	429;"	d	file:
IRIS	.\semtex\utility\preplot.c	456;"	d	file:
ISkip	.\semtex\utility\preplot.c	/^LgIndex            ISkip[MaxNumZones+1];$/;"	v
IStart	.\semtex\utility\preplot.c	/^LgIndex            IStart[MaxNumZones+1];$/;"	v
IT	.\semtex\femlib\operators.c	/^  real_t*        IT   ; \/* Transpose of IN                                   *\/$/;"	m	struct:projop	file:
IdentToken	.\semtex\utility\preplot.c	/^                           IdentToken,$/;"	e	enum:Tokens	file:
Im	.\semtex\veclib\cveclib.h	/^typedef struct  {double Re, Im;}         zomplex;$/;"	m	struct:__anon11
Im	.\semtex\veclib\cveclib.h	/^typedef struct  {float  Re, Im;}         complex;$/;"	m	struct:__anon10
Imass	.\semtex\src\bsys.C	/^const real_t* BoundarySys::Imass (const int_t mode) const$/;"	f	class:BoundarySys
Imgc	.\semtex\femlib\polylib.h	97;"	d
Imgl	.\semtex\femlib\polylib.h	92;"	d
Imglc	.\semtex\femlib\polylib.h	100;"	d
Imgll	.\semtex\femlib\polylib.h	95;"	d
Imgrcm	.\semtex\femlib\polylib.h	98;"	d
Imgrcp	.\semtex\femlib\polylib.h	99;"	d
Imgrlm	.\semtex\femlib\polylib.h	93;"	d
Imgrlp	.\semtex\femlib\polylib.h	94;"	d
InFile	.\semtex\utility\preplot.c	/^FILE              *InFile;$/;"	v
InFile_q	.\semtex\utility\preplot.c	/^FILE              *InFile_q;$/;"	v
Index	.\semtex\utility\preplot.c	/^LgIndex            Index;$/;"	v
InputIsPlot3D	.\semtex\utility\preplot.c	/^Boolean            InputIsPlot3D;$/;"	v
InputVersion	.\semtex\utility\preplot.c	/^float              InputVersion = 6.3;$/;"	v
InsertVar	.\semtex\utility\preplot.c	/^Boolean            InsertVar = FALSE;$/;"	v
Integration	.\semtex\src\integration.h	/^class Integration$/;"	c
IsFilled	.\semtex\utility\preplot.c	/^float              IsFilled;$/;"	v
IsOk	.\semtex\utility\preplot.c	/^Boolean            IsOk;$/;"	v
JACG	.\semtex\femlib\polyops.c	/^void JACG (const int_t  n    ,$/;"	f
JACGL	.\semtex\femlib\polyops.c	/^void JACGL (const int_t  n    ,$/;"	f
JACGR	.\semtex\femlib\polyops.c	/^void JACGR (const int_t  n    ,$/;"	f
JACOBF	.\semtex\femlib\polyops.c	/^static void JACOBF (const int_t  n     ,$/;"	f	file:
JACPCG	.\semtex\femlib\cfemdef.h	/^  JACPCG,	\/* Conjugate gradient, Jacobi (diagonal) preconditioner. *\/$/;"	e	enum:solver_kind
JEnd	.\semtex\utility\preplot.c	/^LgIndex            JEnd[MaxNumZones+1];$/;"	v
JMax	.\semtex\utility\preplot.c	/^LgIndex            IMax,JMax,KMax;$/;"	v
JSkip	.\semtex\utility\preplot.c	/^LgIndex            JSkip[MaxNumZones+1];$/;"	v
JStart	.\semtex\utility\preplot.c	/^LgIndex            JStart[MaxNumZones+1];$/;"	v
KEYWORD_MAX	.\semtex\src\feml.h	18;"	d
KEnd	.\semtex\utility\preplot.c	/^LgIndex            KEnd[MaxNumZones+1];$/;"	v
KMax	.\semtex\utility\preplot.c	/^LgIndex            IMax,JMax,KMax;$/;"	v
KSkip	.\semtex\utility\preplot.c	/^LgIndex            KSkip[MaxNumZones+1];$/;"	v
KStart	.\semtex\utility\preplot.c	/^LgIndex            KStart[MaxNumZones+1];$/;"	v
LAMBVECTOR	.\semtex\utility\addfield.C	/^  LAMBVECTOR  ,$/;"	e	enum:__anon4	file:
LAPACK	.\semtex\veclib\cveclib.h	18;"	d
LAPACK_H	.\semtex\veclib\lapack.h	2;"	d
LINE	.\semtex\utility\preplot.c	/^typedef enum GeometryType {LINE,$/;"	e	enum:GeometryType	file:
LINE3D	.\semtex\utility\preplot.c	/^                           LINE3D }                     GeometryType;$/;"	e	enum:GeometryType	file:
LIST_H	.\semtex\include\List.h	2;"	d
LOCAL	.\semtex\utility\preplot.c	/^typedef enum ScopeType    {GLOBAL,LOCAL}                ScopeType;$/;"	e	enum:ScopeType	file:
LONGDASH	.\semtex\utility\preplot.c	/^                           LONGDASH,$/;"	e	enum:LineType	file:
LStringType	.\semtex\utility\preplot.c	/^typedef char               LStringType[150];$/;"	t	file:
LagrangeDer	.\semtex\femlib\femlib.h	/^  static void LagrangeDer (const int_t N,  const real_t* zero,$/;"	f	class:Femlib
LagrangeInt	.\semtex\femlib\femlib.h	/^  static void LagrangeInt (const int_t N,  const real_t* zero,$/;"	f	class:Femlib
Lapack	.\semtex\veclib\lapack.h	/^class Lapack {$/;"	c
LargestIndex	.\semtex\utility\preplot.c	496;"	d	file:
LeftParenToken	.\semtex\utility\preplot.c	/^                           LeftParenToken,$/;"	e	enum:Tokens	file:
LegendreVal	.\semtex\femlib\femlib.h	/^  static real_t LegendreVal (const int_t N,const real_t x) {return PNLEG(x,N);}$/;"	f	class:Femlib
LgIndex	.\semtex\utility\preplot.c	/^  typedef int           LgIndex;$/;"	t	file:
LgIndex	.\semtex\utility\preplot.c	/^  typedef long int           LgIndex;$/;"	t	file:
Line	.\semtex\utility\preplot.c	/^char               Line[MaxLineIndex+1];$/;"	v
LineLen	.\semtex\utility\preplot.c	/^int                LineLen;$/;"	v
LineMode	.\semtex\utility\preplot.c	/^LineType           LineMode;$/;"	v
LineNumber	.\semtex\utility\preplot.c	/^LgIndex            LineNumber;$/;"	v
LinePos	.\semtex\utility\preplot.c	/^int                LinePos;$/;"	v
LineType	.\semtex\utility\preplot.c	/^                           DASHDOTDOT}                  LineType;$/;"	t	typeref:enum:LineType	file:
LineType	.\semtex\utility\preplot.c	/^typedef enum LineType     {SOLID,$/;"	g	file:
List	.\semtex\include\List.h	/^  List() : head(0), tail(0), nel(0) {}$/;"	f	class:List
List	.\semtex\include\List.h	/^template<class T> class List {$/;"	c
ListIterator	.\semtex\include\List.h	/^  ListIterator (List<T>& list) : cur(list.head), top(list.head) { }$/;"	f	class:ListIterator
ListIterator	.\semtex\include\List.h	/^class ListIterator {$/;"	c
ListNode	.\semtex\include\List.h	/^    ListNode(T x) : link(0), datum(x) {}$/;"	f	class:ListNode
ListNode	.\semtex\include\List.h	/^template<class T> class ListNode {$/;"	c
MATRIX_H	.\semtex\src\matrix.h	2;"	d
MAX	.\semtex\femlib\message.c	110;"	d	file:
MAX	.\semtex\utility\tensorcalcs.c	48;"	d	file:
MAX	.\semtex\veclib\cveclib.h	31;"	d
MAX	.\semtex\veclib\xclip.c	18;"	d	file:
MAX	.\semtex\veclib\xiclip.c	16;"	d	file:
MAX	.\semtex\veclib\xiclip.c	71;"	d	file:
MAX	.\semtex\veclib\xvamax.c	16;"	d	file:
MAXCOL	.\semtex\utility\slit.c	32;"	d	file:
MAXFIELDS	.\semtex\utility\sem2tec.c	38;"	d	file:
MAXFIELDS	.\semtex\utility\sem2vtk.c	23;"	d	file:
MAXSTR	.\semtex\utility\slit.c	33;"	d	file:
MBIG	.\semtex\veclib\xrand.c	319;"	d	file:
MBIG	.\semtex\veclib\xrand.c	366;"	d	file:
MESH_H	.\semtex\src\mesh.h	2;"	d
MIN	.\semtex\veclib\cveclib.h	30;"	d
MIN	.\semtex\veclib\xclip.c	17;"	d	file:
MIN	.\semtex\veclib\xiclip.c	15;"	d	file:
MIN	.\semtex\veclib\xiclip.c	70;"	d	file:
MISC_H	.\semtex\src\misc.h	2;"	d
MODE_1D	.\semtex\utility\preplot.c	/^                             MODE_1D,$/;"	e	enum:Plot3DModeEnum	file:
MODE_2D	.\semtex\utility\preplot.c	/^                             MODE_2D,$/;"	e	enum:Plot3DModeEnum	file:
MODE_3DP	.\semtex\utility\preplot.c	/^                             MODE_3DP}                Plot3DModeEnum;$/;"	e	enum:Plot3DModeEnum	file:
MODE_3DW	.\semtex\utility\preplot.c	/^                             MODE_3DW,$/;"	e	enum:Plot3DModeEnum	file:
MODE_Unknown	.\semtex\utility\preplot.c	/^typedef enum Plot3DModeEnum {MODE_Unknown,$/;"	e	enum:Plot3DModeEnum	file:
MS	.\semtex\src\matrix.C	/^static vector<MatrixSys*> MS;$/;"	v	file:
MSEED	.\semtex\veclib\xrand.c	320;"	d	file:
MSEED	.\semtex\veclib\xrand.c	367;"	d	file:
MZ	.\semtex\veclib\xrand.c	321;"	d	file:
MZ	.\semtex\veclib\xrand.c	368;"	d	file:
M_PI	.\semtex\veclib\cveclib.h	39;"	d
M_PI	.\semtex\veclib\utility.h	/^const double M_PI   = 3.14159265358979323846;$/;"	v
Mapping	.\semtex\femlib\mapping.c	/^} Mapping;$/;"	t	typeref:struct:mapping	file:
MatrixSys	.\semtex\src\matrix.C	/^MatrixSys::MatrixSys (const real_t            lambda2,$/;"	f	class:MatrixSys
MatrixSys	.\semtex\src\matrix.h	/^class MatrixSys$/;"	c
MaxCharsBaseName	.\semtex\utility\preplot.c	483;"	d	file:
MaxCharsFileName	.\semtex\utility\preplot.c	471;"	d	file:
MaxCharsFileName	.\semtex\utility\preplot.c	475;"	d	file:
MaxCharsFileName	.\semtex\utility\preplot.c	480;"	d	file:
MaxCustomLabels	.\semtex\utility\preplot.c	491;"	d	file:
MaxGeomSegments	.\semtex\utility\preplot.c	490;"	d	file:
MaxGeometryPts	.\semtex\utility\preplot.c	489;"	d	file:
MaxLineIndex	.\semtex\utility\preplot.c	486;"	d	file:
MaxNumVars	.\semtex\utility\preplot.c	487;"	d	file:
MaxNumZones	.\semtex\utility\preplot.c	488;"	d	file:
Mesh	.\semtex\src\mesh.C	/^Mesh::Mesh (FEML*      f    ,$/;"	f	class:Mesh
Mesh	.\semtex\src\mesh.h	/^class Mesh$/;"	c
Mixed	.\semtex\src\condition.C	/^Mixed::Mixed (const char* v)$/;"	f	class:Mixed
Mixed	.\semtex\src\condition.h	/^class Mixed : public Condition$/;"	c
ModalMatrixSys	.\semtex\src\matrix.C	/^ModalMatrixSys::ModalMatrixSys (const real_t            lambda2 ,$/;"	f	class:ModalMatrixSys
ModalMatrixSys	.\semtex\src\matrix.h	/^class ModalMatrixSys$/;"	c
ModalVal	.\semtex\femlib\femlib.h	/^  static real_t ModalVal    (const int_t N,const real_t x) {return PNMOD(x,N);}$/;"	f	class:Femlib
Mode	.\semtex\utility\preplot.c	/^CoordModeType      Mode;$/;"	v
Msys	.\semtex\dns\integrate.C	/^typedef ModalMatrixSys Msys;$/;"	t	file:
NB	.\semtex\femlib\tests\testmpi.c	/^const int NB = 25600;		\/* -- Code fails for NB = 16000! *\/$/;"	v
NCOM	.\semtex\dns\integrate.C	/^static int_t NDIM, NCOM, NORD;$/;"	v	file:
NDIM	.\semtex\dns\integrate.C	/^static int_t NDIM, NCOM, NORD;$/;"	v	file:
NDIV	.\semtex\utility\noiz.c	58;"	d	file:
NDIV	.\semtex\veclib\xrand.c	194;"	d	file:
NDIV	.\semtex\veclib\xrand.c	237;"	d	file:
NDIV	.\semtex\veclib\xrand.c	253;"	d	file:
NDIV	.\semtex\veclib\xrand.c	314;"	d	file:
NORD	.\semtex\dns\integrate.C	/^static int_t NDIM, NCOM, NORD;$/;"	v	file:
NPLOWER	.\semtex\femlib\tests\polylib_test.c	90;"	d	file:
NPTS	.\semtex\utility\probe.C	/^static const int_t NPTS = 64;	\/\/ -- Default number of points for line\/plane.$/;"	v	file:
NPUPPER	.\semtex\femlib\tests\polylib_test.c	91;"	d	file:
NTAB	.\semtex\utility\noiz.c	57;"	d	file:
NTAB	.\semtex\veclib\xrand.c	193;"	d	file:
NTAB	.\semtex\veclib\xrand.c	236;"	d	file:
NTAB	.\semtex\veclib\xrand.c	252;"	d	file:
NTAB	.\semtex\veclib\xrand.c	313;"	d	file:
NUMBERSYS_H	.\semtex\src\numbersys.h	2;"	d
NUMDIG	.\semtex\utility\slit.c	34;"	d	file:
NVREG	.\semtex\veclib\cveclib.h	21;"	d
Natural	.\semtex\src\condition.h	/^  Natural                (const char* v) : _value (strtod (v, 0)) { }$/;"	f	class:Natural
Natural	.\semtex\src\condition.h	/^class Natural : public Condition$/;"	c
NaturalFunction	.\semtex\src\condition.C	/^NaturalFunction::NaturalFunction (const char* f)$/;"	f	class:NaturalFunction
NaturalFunction	.\semtex\src\condition.h	/^class NaturalFunction : public Condition$/;"	c
NaturalHOPBC	.\semtex\src\condition.h	/^  NaturalHOPBC           () { }$/;"	f	class:NaturalHOPBC
NaturalHOPBC	.\semtex\src\condition.h	/^class NaturalHOPBC : public Condition$/;"	c
Nel	.\gmsh2sem.py	/^        Nel = int (line)$/;"	v
Nnode	.\gmsh2sem.py	/^        Nnode = int (line)$/;"	v
Node	.\semtex\include\Clist.h	/^    Node(T x) : next(0), datum(x) {}$/;"	f	class:CircularList::Node
Node	.\semtex\include\Clist.h	/^  class Node {$/;"	c	class:CircularList
Node	.\semtex\src\mesh.h	/^  class Node {$/;"	c	class:Mesh
None	.\semtex\utility\probe.C	/^  None = 0,$/;"	e	enum:__anon7	file:
Nsys	.\semtex\src\bsys.C	/^const NumberSys* BoundarySys::Nsys (const int_t mode) const$/;"	f	class:BoundarySys
Nsys	.\semtex\utility\enumerate.C	/^Nsys::Nsys (char           name    ,$/;"	f	class:Nsys
NullToken	.\semtex\utility\preplot.c	/^typedef enum Tokens       {NullToken,$/;"	e	enum:Tokens	file:
NumChrsVarName	.\semtex\utility\preplot.c	484;"	d	file:
NumChrsZoneName	.\semtex\utility\preplot.c	485;"	d	file:
NumCustomLabels	.\semtex\utility\preplot.c	/^int                NumCustomLabels;$/;"	v
NumDupVars	.\semtex\utility\preplot.c	/^int                NumDupVars;$/;"	v
NumVars	.\semtex\utility\preplot.c	/^int                NumVars;$/;"	v
NumWarns	.\semtex\utility\preplot.c	/^int                NumWarns;$/;"	v
NumberSys	.\semtex\src\numbersys.h	/^class NumberSys$/;"	c
OldElement	.\semtex\utility\preplot.c	/^ElementType        OldElement;$/;"	v
OldFEMFormat	.\semtex\utility\preplot.c	/^Boolean            OldFEMFormat;$/;"	v
OldFormat	.\semtex\utility\preplot.c	/^FormatType         OldFormat;$/;"	v
OldIMax	.\semtex\utility\preplot.c	/^LgIndex            OldIMax,OldJMax,OldKMax;$/;"	v
OldJMax	.\semtex\utility\preplot.c	/^LgIndex            OldIMax,OldJMax,OldKMax;$/;"	v
OldKMax	.\semtex\utility\preplot.c	/^LgIndex            OldIMax,OldJMax,OldKMax;$/;"	v
OrderMax	.\semtex\src\integration.C	/^const int_t Integration::OrderMax = 4;$/;"	m	class:Integration	file:
OrderMax	.\semtex\src\integration.h	/^  static const integer OrderMax;$/;"	m	class:Integration
P2C	.\semtex\utility\topre.c	/^static zomplex P2C(zomplex z)$/;"	f	file:
PARTICLE_H	.\semtex\src\particle.h	2;"	d
PBCmgr	.\semtex\src\pressure.h	/^class PBCmgr$/;"	c
PI_180	.\semtex\veclib\cveclib.h	47;"	d
PI_180	.\semtex\veclib\utility.h	/^const double PI_180 = 0.01745329251994329576;$/;"	v
PND2LEG	.\semtex\femlib\polyops.c	/^real_t PND2LEG (const real_t z,$/;"	f
PNDLEG	.\semtex\femlib\polyops.c	/^real_t PNDLEG (const real_t z,$/;"	f
PNLEG	.\semtex\femlib\polyops.c	/^real_t PNLEG (const real_t z,$/;"	f
PNMOD	.\semtex\femlib\polyops.c	/^real_t PNMOD (const real_t z,$/;"	f
POINT	.\semtex\utility\preplot.c	/^typedef enum FormatType   {BLOCK,POINT,FEBLOCK,FEPOINT} FormatType;$/;"	e	enum:FormatType	file:
PRESSURE_H	.\semtex\src\pressure.h	2;"	d
PRF235	.\semtex\femlib\temfftd.F	/^      SUBROUTINE PRF235 /;"	s
Plot3DBadBlockCount	.\semtex\utility\preplot.c	/^uint32             Plot3DBadBlockCount = 0;$/;"	v
Plot3DCurGrid	.\semtex\utility\preplot.c	/^LgIndex            Plot3DCurGrid;$/;"	v
Plot3DGridBase	.\semtex\utility\preplot.c	/^LgIndex            Plot3DGridBase[MaxNumZones];$/;"	v
Plot3DHasIBlank	.\semtex\utility\preplot.c	/^short              Plot3DHasIBlank;$/;"	v
Plot3DIDim	.\semtex\utility\preplot.c	/^LgIndex            Plot3DIDim[MaxNumZones];$/;"	v
Plot3DISet	.\semtex\utility\preplot.c	/^uint32             Plot3DISet[IJKSetSize];$/;"	v
Plot3DInputHasRecordMarks	.\semtex\utility\preplot.c	/^Boolean            Plot3DInputHasRecordMarks = FALSE;$/;"	v
Plot3DInputIsBinary	.\semtex\utility\preplot.c	/^Boolean            Plot3DInputIsBinary;$/;"	v
Plot3DInputIsGridOnly	.\semtex\utility\preplot.c	/^Boolean            Plot3DInputIsGridOnly;$/;"	v
Plot3DIsMultiGrid	.\semtex\utility\preplot.c	/^Boolean            Plot3DIsMultiGrid;$/;"	v
Plot3DJDim	.\semtex\utility\preplot.c	/^LgIndex            Plot3DJDim[MaxNumZones];$/;"	v
Plot3DJSet	.\semtex\utility\preplot.c	/^uint32             Plot3DJSet[IJKSetSize];$/;"	v
Plot3DKDim	.\semtex\utility\preplot.c	/^LgIndex            Plot3DKDim[MaxNumZones];$/;"	v
Plot3DKIndex	.\semtex\utility\preplot.c	/^LgIndex            Plot3DKIndex;$/;"	v
Plot3DKSet	.\semtex\utility\preplot.c	/^uint32             Plot3DKSet[IJKSetSize];$/;"	v
Plot3DMode	.\semtex\utility\preplot.c	/^Plot3DModeEnum     Plot3DMode                = MODE_Unknown;$/;"	v
Plot3DModeEnum	.\semtex\utility\preplot.c	/^                             MODE_3DP}                Plot3DModeEnum;$/;"	t	typeref:enum:Plot3DModeEnum	file:
Plot3DModeEnum	.\semtex\utility\preplot.c	/^typedef enum Plot3DModeEnum {MODE_Unknown,$/;"	g	file:
Plot3DNumGrids	.\semtex\utility\preplot.c	/^LgIndex            Plot3DNumGrids            = 1;$/;"	v
Plot3DVarArray	.\semtex\utility\preplot.c	/^float             *Plot3DVarArray[8];$/;"	v
Plot3DVarArrayCurIndex	.\semtex\utility\preplot.c	/^LgIndex            Plot3DVarArrayCurIndex[8];$/;"	v
Plot3D_GetBinaryInt	.\semtex\utility\preplot.c	/^int Plot3D_GetBinaryInt(F)$/;"	f
Plot3D_GetBinaryReal	.\semtex\utility\preplot.c	/^DOUBLE Plot3D_GetBinaryReal(F)$/;"	f
Plot3D_GetBlock	.\semtex\utility\preplot.c	/^void Plot3D_GetBlock(IVar,Plane,Grid,IJKMode)$/;"	f
Plot3D_GetList	.\semtex\utility\preplot.c	/^static Boolean Plot3D_GetList(ListString,PlaneSet,C)$/;"	f	file:
Plot3D_GetRecordMarks	.\semtex\utility\preplot.c	/^void Plot3D_GetRecordMarks(F)$/;"	f
Plot3D_GetToken	.\semtex\utility\preplot.c	/^void  Plot3D_GetToken(F,IsInt)$/;"	f
Plot3D_LoadVar	.\semtex\utility\preplot.c	/^void Plot3D_LoadVar(InF,IsInt,IVar,N)$/;"	f
PlotFile	.\semtex\utility\preplot.c	/^FILE              *PlotFile;$/;"	v
PlotFileName	.\semtex\utility\preplot.c	/^char               PlotFileName[150];$/;"	v
Point	.\semtex\femlib\cfemdef.h	/^typedef struct { real_t x, y, z; } Point;$/;"	t	typeref:struct:__anon1
ProjOp	.\semtex\femlib\operators.c	/^} ProjOp;		\/* ------------------------------------------------- *\/$/;"	t	typeref:struct:projop	file:
Proot	.\semtex\femlib\operators.c	/^static ProjOp* Proot = 0;$/;"	v	file:
QUADRILATERAL	.\semtex\utility\preplot.c	/^typedef enum ElementType  {TRIANGLE,QUADRILATERAL,$/;"	e	enum:ElementType	file:
Qroot	.\semtex\femlib\operators.c	/^static QuadOp* Qroot = 0;$/;"	v	file:
QuadOp	.\semtex\femlib\operators.c	/^} QuadOp;		 \/* ------------------------------------------------ *\/$/;"	t	typeref:struct:quadop	file:
QuadratureKind	.\semtex\femlib\cfemdef.h	/^} QuadratureKind;$/;"	t	typeref:enum:quadrature_kind
RADB2	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADB2 /;"	s
RADB3	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADB3 /;"	s
RADB4	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADB4 /;"	s
RADB5	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADB5 /;"	s
RADBG	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADBG /;"	s
RADF2	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADF2 /;"	s
RADF3	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADF3 /;"	s
RADF4	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADF4 /;"	s
RADF5	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADF5 /;"	s
RADFG	.\semtex\femlib\netlib.f	/^      SUBROUTINE RADFG /;"	s
RCM	.\semtex\femlib\netlib.f	/^      SUBROUTINE  RCM /;"	s
RCS	.\semtex\dns\dnsanalysis.C	/^static char RCS[] = "$Id: dnsanalysis.C,v 6.21 2008\/02\/18 22:21:40 hmb Exp $";$/;"	v	file:
RCS	.\semtex\dns\drive.C	/^static char RCS[] = "$Id: drive.C,v 6.29 2009\/02\/02 00:59:53 hmb Exp $";$/;"	v	file:
RCS	.\semtex\dns\integrate.C	/^static char RCS[] = "$Id: integrate.C,v 1.28 2009\/01\/29 03:16:04 hmb Exp $";$/;"	v	file:
RCS	.\semtex\dns\nonlinear.C	/^static char RCS[] = "$Id: nonlinear.C,v 1.20 2009\/02\/18 21:47:46 hmb Exp $";$/;"	v	file:
RCS	.\semtex\elliptic\drive.C	/^static char RCS[] = "$Id: drive.C,v 6.10 2008\/05\/11 22:41:22 hmb Exp $";$/;"	v	file:
RCS	.\semtex\elliptic\helmholtz.C	/^static char RCS[] = "$Id: helmholtz.C,v 6.5 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\analysis.C	/^static char RCS[] = "$Id: analysis.C,v 6.19 2008\/05\/11 22:41:22 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\auxfield.C	/^static char RCS[] = "$Id: auxfield.C,v 6.25 2009\/01\/29 03:16:05 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\bcmgr.C	/^static char RCS[] = "$Id: bcmgr.C,v 6.12 2007\/05\/31 23:45:50 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\boundary.C	/^static char RCS[] = "$Id: boundary.C,v 6.13 2007\/03\/08 04:10:56 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\bsys.C	/^static char RCS[] = "$Id: bsys.C,v 6.12 2007\/10\/19 04:12:34 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\condition.C	/^static char RCS[] = "$Id: condition.C,v 6.10 2007\/03\/08 04:10:56 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\data2df.C	/^static char RCS[] = "$Id: data2df.C,v 6.12 2008\/06\/08 12:55:57 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\domain.C	/^static char RCS[] = "$Id: domain.C,v 6.21 2008\/11\/26 21:08:08 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\edge.C	/^static char RCS[] = "$Id: edge.C,v 1.15 2007\/03\/08 04:10:56 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\element.C	/^static char RCS[] = "$Id: element.C,v 6.16 2007\/08\/13 12:24:04 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\family.C	/^static char RCS[] = "$Id: family.C,v 6.10 2007\/03\/08 04:10:56 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\feml.C	/^static char RCS[] = "$Id: feml.C,v 6.10 2007\/03\/08 04:10:56 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\field.C	/^static char RCS[] = "$Id: field.C,v 6.24 2009\/01\/29 03:16:06 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\flowrate.C	/^static char RCS[] = "$Id: flowrate.C,v 1.8 2007\/03\/08 04:10:56 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\geometry.C	/^static char RCS[] = "$Id: geometry.C,v 6.12 2008\/01\/04 12:25:23 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\history.C	/^static char RCS[] = "$Id: history.C,v 6.10 2007\/03\/08 04:10:57 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\integration.C	/^static char RCS[] = "$Id: integration.C,v 6.8 2007\/03\/08 04:10:57 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\matrix.C	/^static char RCS[] = "$Id: matrix.C,v 6.15 2008\/01\/04 12:25:23 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\mesh.C	/^static char RCS[] = "$Id: mesh.C,v 6.20 2007\/11\/08 06:34:38 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\misc.C	/^static char RCS[] = "$Id: misc.C,v 6.17 2008\/06\/05 00:25:42 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\particle.C	/^static char RCS[] = "$Id: particle.C,v 6.11 2007\/03\/08 04:10:57 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\pressure.C	/^static char RCS[] = "$Id: pressure.C,v 6.13 2007\/03\/08 04:10:57 hmb Exp $";$/;"	v	file:
RCS	.\semtex\src\statistics.C	/^static char RCS[] = "$Id: statistics.C,v 6.24 2008\/11\/26 21:08:08 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\addfield.C	/^static char RCS[] = "$Id: addfield.C,v 6.12 2007\/08\/15 05:13:02 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\calc.C	/^static char RCS[] = "$Id: calc.C,v 6.5 2007\/03\/07 12:12:41 hmb Exp $"; $/;"	v	file:
RCS	.\semtex\utility\chop.c	/^static char RCS[] = "$Id: chop.c,v 6.3 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\compare.C	/^static char RCS[] = "$Id: compare.C,v 6.11 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\convert.c	/^static char RCS[] = "$Id: convert.c,v 6.9 2007\/08\/15 05:13:02 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\data2df_template.C	/^static char RCS[] = "$Id: data2df_template.C,v 6.1 2008\/06\/05 00:25:43 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\eneq.C	/^static char RCS[] = "$Id: eneq.C,v 6.8 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\enumerate.C	/^static char RCS[] = "$Id: enumerate.C,v 6.12 2007\/08\/15 05:13:02 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\integral.C	/^static char RCS[] = "$Id: integral.C,v 6.9 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\interp.C	/^static char RCS[] = "$Id: interp.C,v 6.10 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\lowpass.C	/^static char RCS[] = "$Id: lowpass.C,v 6.5 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\meshpr.C	/^static char RCS[] = "$Id: meshpr.C,v 6.11 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\moden.c	/^static char RCS[] = "$Id: moden.c,v 6.6 2007\/05\/31 23:45:50 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\noiz.c	/^static char RCS[] = "$Id: noiz.c,v 6.6 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\normal.c	/^static char RCS[] = "$Id: normal.c,v 1.1 2008\/10\/20 23:14:37 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\phase.C	/^static char RCS[] = "$Id: phase.C,v 6.4 2008\/06\/08 12:55:57 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\probe.C	/^static char RCS[] = "$Id: probe.C,v 6.8 2007\/07\/10 23:58:44 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\project.C	/^static char RCS[] = "$Id: project.C,v 6.10 2007\/09\/21 02:13:11 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\rectmesh.C	/^static char RCS[] = "$Id: rectmesh.C,v 6.9 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\repeatxy.c	/^static char RCS[] = "$Id: repeatxy.c,v 6.2 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\repeatz.c	/^static char RCS[] = "$Id: repeatz.c,v 6.6 2008\/03\/10 06:02:09 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\rstress.c	/^static char RCS[] = "$Id: rstress.c,v 6.10 2008\/05\/11 22:56:07 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\sem2nek.C	/^static char RCS[] = "$Id: sem2nek.C,v 6.4 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\sem2tec.c	/^static char RCS[] = "$Id: sem2tec.c,v 6.14 2008\/06\/05 00:25:43 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\sem2vtk.c	/^static char RCS[] = "$Id: sem2vtk.c,v 6.3 2008\/01\/14 01:21:32 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\slit.c	/^static char RCS[] = "$Id: slit.c,v 6.5 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\topre.c	/^static char RCS[] = "$Id: topre.c,v 6.3 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\traction.C	/^static char RCS[] = "$Id: traction.C,v 6.5 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\transform.C	/^static char RCS[] = "$Id: transform.C,v 6.6 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\wallmesh.C	/^static char RCS[] = "$Id: wallmesh.C,v 6.8 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCS	.\semtex\utility\xplane.c	/^static char RCS[] = "$Id: xplane.c,v 6.5 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RCSid	.\semtex\femlib\tests\testpoly.c	/^RCSid[] = "$Id: testpoly.c,v 6.1 2003\/12\/06 13:48:55 hmb Exp $";$/;"	v	file:
RCSid	.\semtex\femlib\tests\testrand.C	/^RCSid[] = "$Id";$/;"	v	file:
RCSid	.\semtex\utility\tensorcalcs.c	/^RCSid[] = "$Id: tensorcalcs.c,v 6.3 2007\/03\/07 12:12:41 hmb Exp $";$/;"	v	file:
RECTANGLE	.\semtex\utility\preplot.c	/^                           RECTANGLE,$/;"	e	enum:GeometryType	file:
REMARK	.\semtex\veclib\cveclib.h	/^enum    err_lev {WARNING, ERROR, REMARK};$/;"	e	enum:err_lev
REMARK	.\semtex\veclib\utility.h	/^enum lev {WARNING, ERROR, REMARK};$/;"	e	enum:lev
RMA	.\semtex\femlib\polyops.c	66;"	d	file:
RNMX	.\semtex\utility\noiz.c	59;"	d	file:
RNMX	.\semtex\veclib\xrand.c	196;"	d	file:
RNMX	.\semtex\veclib\xrand.c	239;"	d	file:
RNMX	.\semtex\veclib\xrand.c	255;"	d	file:
RNMX	.\semtex\veclib\xrand.c	316;"	d	file:
ROOTLS	.\semtex\femlib\netlib.f	/^      SUBROUTINE  ROOTLS /;"	s
ROOTONLY	.\semtex\femlib\tests\testmpi.c	7;"	d	file:
ROOTONLY	.\semtex\src\sem.h	50;"	d
Re	.\semtex\veclib\cveclib.h	/^typedef struct  {double Re, Im;}         zomplex;$/;"	m	struct:__anon11
Re	.\semtex\veclib\cveclib.h	/^typedef struct  {float  Re, Im;}         complex;$/;"	m	struct:__anon10
RecogCustomLabelHeader	.\semtex\utility\preplot.c	/^void RecogCustomLabelHeader()$/;"	f
RecogGeometryHeader	.\semtex\utility\preplot.c	/^void RecogGeometryHeader()$/;"	f
RecogTextHeader	.\semtex\utility\preplot.c	/^void RecogTextHeader()$/;"	f
RecogVarNames	.\semtex\utility\preplot.c	/^void RecogVarNames()$/;"	f
RecogZoneHeader	.\semtex\utility\preplot.c	/^void RecogZoneHeader()$/;"	f
RemoveEqualsSign	.\semtex\utility\preplot.c	/^Boolean RemoveEqualsSign(TreatParenAsAlpha)$/;"	f
RepeatLength	.\semtex\utility\preplot.c	/^LgIndex            RepeatLength = 0;$/;"	v
RepeatValue	.\semtex\utility\preplot.c	/^float              RepeatValue;$/;"	v
ReverseBytes	.\semtex\utility\preplot.c	/^Boolean            ReverseBytes;$/;"	v
RightParenToken	.\semtex\utility\preplot.c	/^                           RightParenToken,$/;"	e	enum:Tokens	file:
S2plusA2	.\semtex\utility\tensorcalcs.c	/^void S2plusA2(const double V[9], double O[9])$/;"	f
SEM_H	.\semtex\src\sem.h	2;"	d
SFS	.\semtex\utility\tensorcalcs.h	/^enum {UFC, UNS, SFS, SNS};$/;"	e	enum:__anon9
SGN	.\semtex\utility\tensorcalcs.c	49;"	d	file:
SGN	.\semtex\veclib\cveclib.h	29;"	d
SIGN	.\semtex\veclib\cveclib.h	32;"	d
SIZE	.\semtex\femlib\tests\testDLT2.C	19;"	d	file:
SIZE	.\semtex\femlib\tests\testDLT3.C	20;"	d	file:
SMXM	.\semtex\veclib\xmxm.f	/^      SUBROUTINE SMXM /;"	s
SMXMA	.\semtex\veclib\xmxm.f	/^      SUBROUTINE SMXMA /;"	s
SMXMS	.\semtex\veclib\xmxm.f	/^      SUBROUTINE SMXMS /;"	s
SMXMTS	.\semtex\veclib\xmxm.f	/^      SUBROUTINE SMXMTS /;"	s
SMXV	.\semtex\veclib\xmxm.f	/^      SUBROUTINE SMXV /;"	s
SNS	.\semtex\utility\tensorcalcs.h	/^enum {UFC, UNS, SFS, SNS};$/;"	e	enum:__anon9
SOLID	.\semtex\utility\preplot.c	/^typedef enum LineType     {SOLID,$/;"	e	enum:LineType	file:
SQR	.\semtex\utility\tensorcalcs.c	50;"	d	file:
SQR	.\semtex\veclib\cveclib.h	28;"	d
SQR	.\semtex\veclib\xvhypot.c	14;"	d	file:
SQR	.\semtex\veclib\xvhypot.c	95;"	d	file:
SQRT3	.\semtex\utility\tensorcalcs.c	53;"	d	file:
SStringType	.\semtex\utility\preplot.c	/^typedef char               SStringType[21];$/;"	t	file:
STACK_H	.\semtex\include\Stack.h	2;"	d
STATISTICS_H	.\semtex\src\statistics.h	2;"	d
STOP	.\semtex\femlib\polylib.c	9;"	d	file:
STOP	.\semtex\femlib\polyops.c	61;"	d	file:
STRAINRATE	.\semtex\utility\addfield.C	/^  STRAINRATE  ,$/;"	e	enum:__anon4	file:
STRAINTENSOR	.\semtex\utility\addfield.C	/^  STRAINTENSOR,$/;"	e	enum:__anon4	file:
STR_MAX	.\semtex\femlib\cfemdef.h	23;"	d
STR_MAX	.\semtex\veclib\cveclib.h	35;"	d
SUN	.\semtex\utility\preplot.c	460;"	d	file:
SWAP	.\semtex\utility\tensorcalcs.c	47;"	d	file:
SWAP	.\semtex\veclib\xfft.c	105;"	d	file:
SWAP	.\semtex\veclib\xfft.c	155;"	d	file:
SWAP	.\semtex\veclib\xfft.c	172;"	d	file:
SWAP	.\semtex\veclib\xfft.c	222;"	d	file:
Scope	.\semtex\utility\preplot.c	/^ScopeType          Scope;$/;"	v
ScopeType	.\semtex\utility\preplot.c	/^typedef enum ScopeType    {GLOBAL,LOCAL}                ScopeType;$/;"	g	file:
ScopeType	.\semtex\utility\preplot.c	/^typedef enum ScopeType    {GLOBAL,LOCAL}                ScopeType;$/;"	t	typeref:enum:ScopeType	file:
SetIJLimits	.\semtex\utility\preplot.c	/^Boolean SetIJLimits(IJStart,IJEnd,IJSkip,S)$/;"	f
ShowColor	.\semtex\utility\preplot.c	/^void ShowColor(C)$/;"	f
Side	.\semtex\src\mesh.h	/^    Side () {}$/;"	f	class:Mesh::Side
Side	.\semtex\src\mesh.h	/^    Side (int_t id, Node* n1, Node* n2) :$/;"	f	class:Mesh::Side
Side	.\semtex\src\mesh.h	/^  class Side {$/;"	c	class:Mesh
Solve	.\semtex\dns\integrate.C	/^static void Solve (Domain*     D,$/;"	f	file:
SolverKind	.\semtex\femlib\cfemdef.h	/^} SolverKind;$/;"	t	typeref:enum:solver_kind
Spline	.\semtex\src\mesh.C	/^Spline::Spline (const int_t id      ,$/;"	f	class:Spline
Spline	.\semtex\src\mesh.h	/^class Spline : public Curve$/;"	c
Stack	.\semtex\include\Stack.h	/^  Stack () : top (0), stack_depth (0) {}$/;"	f	class:Stack
Stack	.\semtex\include\Stack.h	/^class Stack {$/;"	c
StackNode	.\semtex\include\Stack.h	/^  StackNode (T x) : next (0), datum (x) {}$/;"	f	class:StackNode
StackNode	.\semtex\include\Stack.h	/^template<class T> class StackNode {$/;"	c
Statistics	.\semtex\src\statistics.C	/^Statistics::Statistics (Domain* D) :$/;"	f	class:Statistics
Statistics	.\semtex\src\statistics.h	/^class Statistics$/;"	c
StifflyStable	.\semtex\src\integration.C	/^void Integration::StifflyStable (const int_t n    ,$/;"	f	class:Integration
StrMax	.\semtex\veclib\utility.h	/^const int StrMax    = STR_MAX;$/;"	v
StringPtr	.\semtex\utility\preplot.c	/^typedef char              *StringPtr;$/;"	t	file:
StringToken	.\semtex\utility\preplot.c	/^                           StringToken,$/;"	e	enum:Tokens	file:
TENSORCALCS_H	.\semtex\utility\tensorcalcs.h	2;"	d
TETRAHEDRON	.\semtex\utility\preplot.c	/^                           TETRAHEDRON,BRICK,$/;"	e	enum:ElementType	file:
TEXTMARKER	.\semtex\utility\preplot.c	502;"	d	file:
TEXTToken	.\semtex\utility\preplot.c	/^                           TEXTToken,$/;"	e	enum:Tokens	file:
TGZone	.\semtex\utility\preplot.c	/^float              TGZone;$/;"	v
TITLEToken	.\semtex\utility\preplot.c	/^                           TITLEToken,$/;"	e	enum:Tokens	file:
TPR2D	.\semtex\femlib\tests\tensorproducts.C	23;"	d	file:
TRIANGLE	.\semtex\utility\preplot.c	/^typedef enum ElementType  {TRIANGLE,QUADRILATERAL,$/;"	e	enum:ElementType	file:
TRUE	.\semtex\utility\preplot.c	493;"	d	file:
TRZ	.\semtex\femlib\cfemdef.h	/^  TRZ = 'U'	\/* Trapezoidal (uniform mesh).      *\/$/;"	e	enum:quadrature_kind
TWOPI	.\semtex\veclib\cveclib.h	43;"	d
TWOPI	.\semtex\veclib\utility.h	/^const double TWOPI  = 6.28318530717958647692;$/;"	v
TextLength	.\semtex\utility\preplot.c	/^int                TextLength;$/;"	v
Title	.\semtex\utility\preplot.c	/^char               Title[81];$/;"	v
Tokens	.\semtex\utility\preplot.c	/^                           UnknownToken}              Tokens;$/;"	t	typeref:enum:Tokens	file:
Tokens	.\semtex\utility\preplot.c	/^typedef enum Tokens       {NullToken,$/;"	g	file:
TransformKind	.\semtex\femlib\cfemdef.h	/^} TransformKind;$/;"	t	typeref:enum:transform_kind
UB	.\semtex\femlib\operators.c	/^  real_t*         UB  ;		\/* np^2*np^2 inverse transform matrix.       *\/$/;"	m	struct:legtran	file:
UB	.\semtex\femlib\operators.c	/^  real_t*         UB  ;		\/* np^2*np^2 inverse transform matrix.       *\/$/;"	m	struct:modtran	file:
UD	.\semtex\veclib\xrand.c	/^static double UD (double low, double high)$/;"	f	file:
UF	.\semtex\femlib\operators.c	/^  real_t*         UF  ;		\/* np^2*np^2 forward transform matrix.       *\/$/;"	m	struct:legtran	file:
UF	.\semtex\femlib\operators.c	/^  real_t*         UF  ;		\/* np^2*np^2 forward transform matrix.       *\/$/;"	m	struct:modtran	file:
UFC	.\semtex\utility\tensorcalcs.h	/^enum {UFC, UNS, SFS, SNS};$/;"	e	enum:__anon9
UNKNOWN	.\semtex\utility\convert.c	/^typedef enum { UNKNOWN, ASCII, IEEE_BIG, IEEE_LITTLE } FORMAT;$/;"	e	enum:__anon6	file:
UNS	.\semtex\utility\tensorcalcs.h	/^enum {UFC, UNS, SFS, SNS};$/;"	e	enum:__anon9
UNSET	.\semtex\src\mesh.h	/^  enum IDstatus {UNSET = -1};$/;"	e	enum:Mesh::IDstatus
UNSET	.\semtex\utility\noiz.c	60;"	d	file:
UTILITY_H	.\semtex\veclib\utility.h	2;"	d
UnknownToken	.\semtex\utility\preplot.c	/^                           UnknownToken}              Tokens;$/;"	e	enum:Tokens	file:
VARIABLESToken	.\semtex\utility\preplot.c	/^                           VARIABLESToken,$/;"	e	enum:Tokens	file:
VECLIB_H	.\semtex\veclib\cveclib.h	2;"	d
VECLIB_H	.\semtex\veclib\veclib.h	2;"	d
VEC_MAX	.\semtex\femlib\tests\testpoly.c	18;"	d	file:
VEC_MAX	.\semtex\femlib\tests\testrand.C	18;"	d	file:
VERBOSE	.\semtex\src\mesh.C	125;"	d	file:
VERBOSE	.\semtex\src\sem.h	51;"	d
VORTEXCORE	.\semtex\utility\addfield.C	/^  VORTEXCORE$/;"	e	enum:__anon4	file:
VORTICITY	.\semtex\utility\addfield.C	/^  VORTICITY   ,$/;"	e	enum:__anon4	file:
ValueToken	.\semtex\utility\preplot.c	/^                           ValueToken,$/;"	e	enum:Tokens	file:
VarName	.\semtex\utility\preplot.c	/^char               VarName[MaxNumVars][NumChrsVarName+1];$/;"	v
Veclib	.\semtex\veclib\veclib.h	/^class Veclib {$/;"	c
Vector	.\semtex\femlib\cfemdef.h	/^typedef Point                      Vector;$/;"	t
VersionString	.\semtex\utility\preplot.c	404;"	d	file:
WARNING	.\semtex\veclib\cveclib.h	/^enum    err_lev {WARNING, ERROR, REMARK};$/;"	e	enum:err_lev
WARNING	.\semtex\veclib\utility.h	/^enum lev {WARNING, ERROR, REMARK};$/;"	e	enum:lev
WINDOW	.\semtex\utility\preplot.c	/^typedef enum GridModeType {GRID,WINDOW}                 CoordModeType;$/;"	e	enum:GridModeType	file:
WarnMsg	.\semtex\utility\preplot.c	/^void WarnMsg(S,ShowLine)$/;"	f
WriteI	.\semtex\utility\preplot.c	/^void WriteI(F,R)$/;"	f
WriteN	.\semtex\utility\preplot.c	/^void WriteN(F,R)$/;"	f
WriteR	.\semtex\utility\preplot.c	/^void WriteR(F,R)$/;"	f
X	.\semtex\utility\probe.C	/^  X    = 'x',$/;"	e	enum:__anon7	file:
XERBLA	.\semtex\femlib\netlib.f	/^      SUBROUTINE XERBLA(/;"	s
XERROR	.\semtex\femlib\netlib.f	/^      SUBROUTINE XERROR(/;"	s
XX	.\semtex\utility\preplot.c	/^float              XX,YY,ZZ;$/;"	v
Y	.\semtex\utility\probe.C	/^  Y    = 'y',$/;"	e	enum:__anon7	file:
YGeometryValues	.\semtex\utility\preplot.c	/^float              YGeometryValues[MaxGeometryPts];$/;"	v
YY	.\semtex\utility\preplot.c	/^float              XX,YY,ZZ;$/;"	v
Z	.\semtex\utility\preplot.c	/^int                Z;$/;"	v
Z	.\semtex\utility\probe.C	/^  Z    = 'z'$/;"	e	enum:__anon7	file:
ZACAI	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZACAI(/;"	s
ZAIRY	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZAIRY(/;"	s
ZASYI	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZASYI(/;"	s
ZBESJ	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZBESJ(/;"	s
ZBINU	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZBINU(/;"	s
ZBKNU	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZBKNU(/;"	s
ZBUNI	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZBUNI(/;"	s
ZDIV	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZDIV(/;"	s
ZGeometryValues	.\semtex\utility\preplot.c	/^float              ZGeometryValues[MaxGeometryPts];$/;"	v
ZKSCL	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZKSCL(/;"	s
ZMLRI	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZMLRI(/;"	s
ZMLT	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZMLT(/;"	s
ZONEMARKER	.\semtex\utility\preplot.c	500;"	d	file:
ZONEToken	.\semtex\utility\preplot.c	/^                           ZONEToken,$/;"	e	enum:Tokens	file:
ZPlane	.\semtex\utility\preplot.c	/^float              ZPlane;$/;"	v
ZRATI	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZRATI(/;"	s
ZS1S2	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZS1S2(/;"	s
ZSERI	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZSERI(/;"	s
ZSHCH	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZSHCH(/;"	s
ZUCHK	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZUCHK(/;"	s
ZUNHJ	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZUNHJ(/;"	s
ZUNI1	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZUNI1(/;"	s
ZUNI2	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZUNI2(/;"	s
ZUNIK	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZUNIK(/;"	s
ZUOIK	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZUOIK(/;"	s
ZWGL	.\semtex\femlib\polyops.c	/^void ZWGL (real_t*     z ,$/;"	f
ZWGLJ	.\semtex\femlib\polyops.c	/^void ZWGLJ (real_t*      z ,$/;"	f
ZWGLL	.\semtex\femlib\polyops.c	/^void ZWGLL (real_t*     z ,$/;"	f
ZWGRL	.\semtex\femlib\polyops.c	/^void ZWGRL (real_t*     z ,$/;"	f
ZWRSK	.\semtex\femlib\netlib.f	/^      SUBROUTINE ZWRSK(/;"	s
ZZ	.\semtex\utility\preplot.c	/^float              XX,YY,ZZ;$/;"	v
ZZZ	.\semtex\utility\preplot.c	/^float              ZZZ;$/;"	v
ZoneColor	.\semtex\utility\preplot.c	/^float              ZoneColor;$/;"	v
ZoneName	.\semtex\utility\preplot.c	/^char               ZoneName[MaxNumZones][NumChrsZoneName+1];$/;"	v
_BC	.\semtex\src\matrix.h	/^  const vector<Boundary*>& _BC;	\/\/ Internal copy of Boundary conditions.$/;"	m	class:MatrixSys
_C_	.\semtex\src\condition.h	/^  real_t _C_;		\/\/ -- This is "C" above.$/;"	m	class:Mixed
_C_coeff	.\semtex\src\particle.C	/^real_t* FluidParticle::_C_coeff = 0;$/;"	m	class:FluidParticle	file:
_C_coeff	.\semtex\src\particle.h	/^  static real_t* _C_coeff;	\/\/ Integration (corrector) coefficients.$/;"	m	class:FluidParticle
_DT	.\semtex\src\particle.C	/^real_t  FluidParticle::_DT      = 0.0;$/;"	m	class:FluidParticle	file:
_DT	.\semtex\src\particle.h	/^  static real_t  _DT     ;	\/\/ Time step.$/;"	m	class:FluidParticle
_DTr	.\semtex\src\element.h	/^  const real_t* _DTr  ;		\/\/ Transpose.$/;"	m	class:Element
_DTs	.\semtex\src\element.h	/^  const real_t* _DTs  ;		\/\/ Transpose.$/;"	m	class:Element
_DVr	.\semtex\src\element.h	/^  const real_t* _DVr  ;		\/\/ Master element derivative operator, r.$/;"	m	class:Element
_DVs	.\semtex\src\element.h	/^  const real_t* _DVs  ;		\/\/ Master element derivative operator, s.$/;"	m	class:Element
_Dom	.\semtex\src\particle.C	/^Domain* FluidParticle::_Dom     = 0;$/;"	m	class:FluidParticle	file:
_Dom	.\semtex\src\particle.h	/^  static Domain* _Dom    ;	\/\/ Velocity fields and class functions.$/;"	m	class:FluidParticle
_E	.\semtex\src\history.h	/^  const Element* _E ;		\/\/ Pointer to element.$/;"	m	class:HistoryPoint
_E	.\semtex\src\particle.h	/^  const Element* _E    ;        \/\/ Pointer to the element particle is in.$/;"	m	class:FluidParticle
_FourierConstant	.\semtex\src\matrix.h	/^  real_t  _FourierConstant  ;	\/\/ Varies with mode number.$/;"	m	class:MatrixSys
_GENERATOR_	.\semtex\veclib\xrand.c	32;"	d	file:
_H	.\semtex\src\matrix.h	/^  real_t*  _H     ;		\/\/ (Factored) packed global Helmholtz matrix.$/;"	m	class:MatrixSys
_HelmholtzConstant	.\semtex\src\matrix.h	/^  real_t  _HelmholtzConstant;	\/\/ Same for all modes.$/;"	m	class:MatrixSys
_ID_MAX	.\semtex\src\particle.C	/^int_t   FluidParticle::_ID_MAX  = 0;$/;"	m	class:FluidParticle	file:
_ID_MAX	.\semtex\src\particle.h	/^  static int_t   _ID_MAX ;	\/\/ Highest issued id.$/;"	m	class:FluidParticle
_K_	.\semtex\src\condition.h	/^  real_t _K_;		\/\/ -- This is "K" above.$/;"	m	class:Mixed
_Lz	.\semtex\src\particle.C	/^real_t  FluidParticle::_Lz      = 0.0;$/;"	m	class:FluidParticle	file:
_Lz	.\semtex\src\particle.h	/^  static real_t  _Lz     ;	\/\/ Periodic length.$/;"	m	class:FluidParticle
_Msys	.\semtex\src\matrix.h	/^  vector<MatrixSys*> _Msys  ;	\/\/ One MatrixSys for each Fourier mode.$/;"	m	class:ModalMatrixSys
_NCOM	.\semtex\src\particle.C	/^int_t   FluidParticle::_NCOM    = 0;$/;"	m	class:FluidParticle	file:
_NCOM	.\semtex\src\particle.h	/^  static int_t   _NCOM   ;	\/\/ Number of velocity components.$/;"	m	class:FluidParticle
_NEL	.\semtex\src\particle.C	/^int_t   FluidParticle::_NEL     = 0;$/;"	m	class:FluidParticle	file:
_NEL	.\semtex\src\particle.h	/^  static int_t   _NEL    ;	\/\/ Number of elements in mesh.$/;"	m	class:FluidParticle
_NS	.\semtex\src\matrix.h	/^  const NumberSys*         _NS;	\/\/ Internal copy of NumberSys.$/;"	m	class:MatrixSys
_NZ	.\semtex\src\particle.C	/^int_t   FluidParticle::_NZ      = 0;$/;"	m	class:FluidParticle	file:
_NZ	.\semtex\src\particle.h	/^  static int_t   _NZ     ;	\/\/ Number of z planes.$/;"	m	class:FluidParticle
_PC	.\semtex\src\matrix.h	/^  real_t*  _PC  ;		\/\/ Diagonal preconditioner matrix.$/;"	m	class:MatrixSys
_P_coeff	.\semtex\src\particle.C	/^real_t* FluidParticle::_P_coeff = 0;$/;"	m	class:FluidParticle	file:
_P_coeff	.\semtex\src\particle.h	/^  static real_t* _P_coeff;	\/\/ Integration (predictor) coefficients.$/;"	m	class:FluidParticle
_Pnx	.\semtex\src\pressure.C	/^real_t**** PBCmgr::_Pnx = 0;$/;"	m	class:PBCmgr	file:
_Pnx	.\semtex\src\pressure.h	/^  static real_t**** _Pnx;	\/\/ x component of dP \/ dn at domain  boundary.$/;"	m	class:PBCmgr
_Pny	.\semtex\src\pressure.C	/^real_t**** PBCmgr::_Pny = 0;$/;"	m	class:PBCmgr	file:
_Pny	.\semtex\src\pressure.h	/^  static real_t**** _Pny;	\/\/ y component of dP \/ dn at domain  boundary.$/;"	m	class:PBCmgr
_Q1	.\semtex\src\element.h	/^  real_t*       _Q1   ;		\/\/ Geometric factor 1 at quadrature points.$/;"	m	class:Element
_Q2	.\semtex\src\element.h	/^  real_t*       _Q2   ;		\/\/ Geometric factor 2 at quadrature points.$/;"	m	class:Element
_Q3	.\semtex\src\element.h	/^  real_t*       _Q3   ;		\/\/ Geometric factor 3 at quadrature points.$/;"	m	class:Element
_Q4	.\semtex\src\element.h	/^  real_t*       _Q4   ;		\/\/ Geometric factor 4 at quadrature points.$/;"	m	class:Element
_Q8	.\semtex\src\element.h	/^  real_t*       _Q8   ;	        \/\/ Like _Q4 but without possible factor of y.$/;"	m	class:Element
_TORD	.\semtex\src\particle.C	/^int_t   FluidParticle::_TORD    = 0;$/;"	m	class:FluidParticle	file:
_TORD	.\semtex\src\particle.h	/^  static int_t   _TORD   ;	\/\/ Order of N--S timestepping.$/;"	m	class:FluidParticle
_Unx	.\semtex\src\pressure.C	/^real_t**** PBCmgr::_Unx = 0;$/;"	m	class:PBCmgr	file:
_Unx	.\semtex\src\pressure.h	/^  static real_t**** _Unx;	\/\/ x component of normal velocity at boundary.$/;"	m	class:PBCmgr
_Uny	.\semtex\src\pressure.C	/^real_t**** PBCmgr::_Uny = 0;$/;"	m	class:PBCmgr	file:
_Uny	.\semtex\src\pressure.h	/^  static real_t**** _Uny;	\/\/ y component of normal velocity at boundary.$/;"	m	class:PBCmgr
_Work	.\semtex\src\particle.C	/^real_t* FluidParticle::_Work    = 0;$/;"	m	class:FluidParticle	file:
_Work	.\semtex\src\particle.h	/^  static real_t* _Work   ;	\/\/ Work area for point location routines.$/;"	m	class:FluidParticle
__MEMCPY	.\semtex\femlib\message.c	46;"	d	file:
__MEMCPY	.\semtex\femlib\message.c	48;"	d	file:
_area	.\semtex\src\edge.h	/^  real_t*        _area   ;	\/\/ Weighted multiplier for parametric mapping.$/;"	m	class:Edge
_avg	.\semtex\src\statistics.h	/^  map<char, AuxField*> _avg ;	\/\/ -- Map names to averaging buffers.$/;"	m	class:Statistics
_axis	.\semtex\src\bcmgr.h	/^  bool               _axis    ; \/\/ Session file declared and axis BC group.$/;"	m	class:BCmgr
_base	.\semtex\src\statistics.h	/^  Domain*              _base;	\/\/ -- Local pointer to external Domain.$/;"	m	class:Statistics
_bcond	.\semtex\src\boundary.h	/^  const Condition* _bcond;	\/\/ Boundary condition.$/;"	m	class:Boundary
_bipack	.\semtex\src\matrix.h	/^  int_t*   _bipack;		\/\/ Size of hbi for each element.$/;"	m	class:MatrixSys
_bmask	.\semtex\src\numbersys.h	/^  int_t*  _bmask ;		\/\/ 1 for essential-BC nodes, 0 otherwise.$/;"	m	class:NumberSys
_boundary	.\semtex\src\bsys.h	/^  vector<Boundary*>* _boundary  ;  \/\/ Boundary*'s  for modes 0, 1, 2.$/;"	m	class:BoundarySys
_bsys	.\semtex\src\field.h	/^  BoundarySys* _bsys  ;		\/\/ Boundary system information.$/;"	m	class:Field
_btog	.\semtex\src\numbersys.h	/^  int_t*  _btog  ;		\/\/ Gives numbers to all element-boundary knots.$/;"	m	class:NumberSys
_cond	.\semtex\src\bcmgr.h	/^  vector<CondRecd*>  _cond    ; \/\/ Conditions in storage.$/;"	m	class:BCmgr
_csys	.\semtex\src\geometry.C	/^Geometry::CoordSys Geometry::_csys  = Geometry::Cartesian;$/;"	m	class:Geometry	file:
_csys	.\semtex\src\geometry.h	/^  static CoordSys _csys  ;	\/\/ Coordinate system (Cartesian\/cylindrical).$/;"	m	class:Geometry
_ctime	.\semtex\src\particle.h	/^  const real_t   _ctime;	\/\/ Time of initialisation.$/;"	m	class:FluidParticle
_curve	.\semtex\src\flowrate.h	/^  vector<Edge*>     _curve;$/;"	m	class:Flowrate
_curveTable	.\semtex\src\mesh.h	/^  vector<Curve*> _curveTable;$/;"	m	class:Mesh
_cyl	.\semtex\src\element.h	/^  const bool    _cyl  ;         \/\/ Cylindrical coordinate problem.$/;"	m	class:Element
_data	.\semtex\src\auxfield.h	/^  real_t*           _data ;	\/\/ 2\/3D data area, element x element x plane.$/;"	m	class:AuxField
_data	.\semtex\src\data2df.h	/^  real_t*     _data;$/;"	m	class:Data2DF
_delta	.\semtex\src\element.h	/^  real_t*       _delta;		\/\/ Local length scale.$/;"	m	class:Element
_descript	.\semtex\src\bcmgr.h	/^  vector<char*>      _descript; \/\/ Group name strings.$/;"	m	class:BCmgr
_doffset	.\semtex\src\edge.h	/^  int_t          _doffset;	\/\/ Offset in Field data plane (matches BLAS).$/;"	m	class:Edge
_drdx	.\semtex\src\element.h	/^  real_t*       _drdx ;		\/\/ Partial derivatives (r, s) --> (x, y),$/;"	m	class:Element
_drdy	.\semtex\src\element.h	/^  real_t*       _drdy ;		\/\/   (2D row-major storage.)$/;"	m	class:Element
_dsdx	.\semtex\src\element.h	/^  real_t*       _dsdx ;		\/\/   evaluated at quadrature points.$/;"	m	class:Element
_dsdy	.\semtex\src\element.h	/^  real_t*       _dsdy ;		\/\/$/;"	m	class:Element
_dskip	.\semtex\src\edge.h	/^  int_t          _dskip  ;	\/\/ Skip   in Field data plane (matches BLAS).$/;"	m	class:Edge
_elmt	.\semtex\src\auxfield.h	/^  vector<Element*>& _elmt ;	\/\/ Quadrilateral elements.$/;"	m	class:AuxField
_elmt	.\semtex\src\edge.h	/^  const Element* _elmt   ;	\/\/ Corresponding element.$/;"	m	class:Edge
_elmtTable	.\semtex\src\mesh.h	/^  vector<Elmt*>  _elmtTable;$/;"	m	class:Mesh
_elmtbc	.\semtex\src\bcmgr.h	/^  vector<BCtriple*>  _elmtbc  ; \/\/ Group tags for each element-side BC.$/;"	m	class:BCmgr
_emap	.\semtex\src\element.h	/^  int_t*        _emap ;		\/\/ Indices of edges in nodal matrices.$/;"	m	class:Element
_emask	.\semtex\src\numbersys.h	/^  int_t*  _emask ;		\/\/ 1 if associated Element has any esstl set.$/;"	m	class:NumberSys
_endarc	.\semtex\src\mesh.h	/^  real_t    _endarc;$/;"	m	class:Spline
_eoffset	.\semtex\src\edge.h	/^  int_t          _eoffset;      \/\/ Offset of corresponding element in Field.$/;"	m	class:Edge
_feml	.\semtex\src\mesh.h	/^  FEML&          _feml;$/;"	m	class:Mesh
_field_name	.\semtex\src\bsys.h	/^  char               _field_name;$/;"	m	class:BoundarySys
_fields	.\semtex\src\bcmgr.h	/^  char*              _fields  ; \/\/ String containing field names.$/;"	m	class:BCmgr
_fields	.\semtex\src\matrix.h	/^  char*              _fields;	\/\/ Character field tags for this system.$/;"	m	class:ModalMatrixSys
_fields	.\semtex\src\numbersys.h	/^  char*   _fields;		\/\/ String with character labels for Fields.$/;"	m	class:NumberSys
_flx_strm	.\semtex\dns\dns.h	/^  ofstream       _flx_strm;$/;"	m	class:DNSAnalyser
_function	.\semtex\src\condition.h	/^  char* _function;$/;"	m	class:EssentialFunction
_function	.\semtex\src\condition.h	/^  char* _function;$/;"	m	class:NaturalFunction
_gamma	.\semtex\src\flowrate.h	/^  real              _gamma;$/;"	m	class:Flowrate
_geom	.\semtex\src\mesh.h	/^  spline2D* _geom;$/;"	m	class:Spline
_green	.\semtex\src\flowrate.h	/^  vector<AuxField*> _green;$/;"	m	class:Flowrate
_group	.\semtex\src\bcmgr.h	/^  vector<char>       _group   ; \/\/ Single-character group tags.$/;"	m	class:BCmgr
_group	.\semtex\src\edge.h	/^  char*          _group  ;	\/\/ Group string.$/;"	m	class:Edge
_hbi	.\semtex\src\matrix.h	/^  real_t** _hbi   ;		\/\/ Element external-internal coupling matrices.$/;"	m	class:MatrixSys
_hii	.\semtex\src\matrix.h	/^  real_t** _hii   ;		\/\/ (Factored) internal-internal matrices.$/;"	m	class:MatrixSys
_his_strm	.\semtex\src\analysis.h	/^  ofstream              _his_strm ; \/\/ File for history points.$/;"	m	class:Analyser
_history	.\semtex\src\analysis.h	/^  vector<HistoryPoint*> _history  ; \/\/ Locations, etc. of history points.$/;"	m	class:Analyser
_iavg	.\semtex\src\statistics.h	/^  int_t                _iavg;	\/\/ -- Same as value of token "AVERAGE".$/;"	m	class:Statistics
_id	.\semtex\src\boundary.h	/^  int_t            _id   ;	\/\/ Ident number.$/;"	m	class:Boundary
_id	.\semtex\src\element.h	/^  const int_t   _id   ;		\/\/ Element identifier.$/;"	m	class:Element
_id	.\semtex\src\history.h	/^  const integer  _id;		\/\/ Numeric identifier.$/;"	m	class:HistoryPoint
_id	.\semtex\src\particle.h	/^  const int_t    _id   ;	\/\/ Numeric tag.$/;"	m	class:FluidParticle
_iipack	.\semtex\src\matrix.h	/^  int_t*   _iipack;		\/\/ Size of hii for each element.$/;"	m	class:MatrixSys
_imass	.\semtex\src\numbersys.h	/^  real_t* _imass ;		\/\/ Inverse of global mass matrix;$/;"	m	class:NumberSys
_index	.\semtex\utility\moden.c	/^static int _index (const char* s,$/;"	f	file:
_index	.\semtex\utility\project.C	/^static int_t _index (const char* s, char c)$/;"	f	file:
_index	.\semtex\utility\rstress.c	/^static int _index (const char* s, char c)$/;"	f	file:
_initial	.\semtex\src\analysis.h	/^  vector<Point*>        _initial  ; \/\/ Starting locations of particles.$/;"	m	class:Analyser
_line	.\semtex\src\field.h	/^  real_t**     _line  ;		\/\/ Single plane's worth of sheet.$/;"	m	class:Field
_mdl_strm	.\semtex\src\analysis.h	/^  ofstream              _mdl_strm ; \/\/ File for modal energies.$/;"	m	class:Analyser
_method	.\semtex\src\matrix.h	/^  SolverKind _method  ;		\/\/ Flag specifies direct or iterative solver.$/;"	m	class:MatrixSys
_mixed	.\semtex\src\bsys.h	/^  bool               _mixed     ;  \/\/ Flags presence of mixed BC type.$/;"	m	class:BoundarySys
_name	.\semtex\src\auxfield.h	/^  char              _name ;	\/\/ Identification tag.  '\\0' by default.$/;"	m	class:AuxField
_name	.\semtex\src\data2df.h	/^  const char  _name;$/;"	m	class:Data2DF
_name	.\semtex\src\mesh.h	/^  char*     _name;$/;"	m	class:Spline
_name	.\semtex\src\statistics.h	/^  const char*          _name;$/;"	m	class:Statistics
_navg	.\semtex\src\statistics.h	/^  int_t                _navg;	\/\/ -- Number of averages so far.$/;"	m	class:Statistics
_nband	.\semtex\src\matrix.h	/^  int_t    _nband ;		\/\/ Bandwidth of global matrix (incl. diagonal).$/;"	m	class:MatrixSys
_nbandw	.\semtex\src\numbersys.h	/^  int_t   _nbandw ;		\/\/ Bandwidth of btog (includes diagonal).$/;"	m	class:NumberSys
_nbound	.\semtex\src\bsys.h	/^  int_t              _nbound    ;  \/\/ Number of element edges with BCs.$/;"	m	class:BoundarySys
_nbound	.\semtex\src\field.h	/^  int_t        _nbound;		\/\/ Number of boundary edges.$/;"	m	class:Field
_ndim	.\semtex\src\geometry.C	/^int_t Geometry::_ndim  = 0;$/;"	m	class:Geometry	file:
_ndim	.\semtex\src\geometry.h	/^  static int_t    _ndim  ;	\/\/ Number of space dimensions.$/;"	m	class:Geometry
_nel	.\semtex\src\data2df.h	/^  const int_t _np, _nz, _nel, _np2;$/;"	m	class:Data2DF
_nel	.\semtex\src\geometry.C	/^int_t Geometry::_nel   = 0;$/;"	m	class:Geometry	file:
_nel	.\semtex\src\geometry.h	/^  static int_t    _nel   ;	\/\/ Number of elements.$/;"	m	class:Geometry
_nel	.\semtex\src\matrix.h	/^  int_t    _nel     ;		\/\/ Number of elemental matrices.$/;"	m	class:MatrixSys
_neng	.\semtex\src\statistics.h	/^  int_t                _neng;	\/\/ -- No. additional correlations for energy.$/;"	m	class:Statistics
_next	.\semtex\src\element.h	/^  const int_t   _next ;		\/\/ Number of points on periphery.$/;"	m	class:Element
_nglobal	.\semtex\src\matrix.h	/^  int_t    _nglobal ;		\/\/ Number of unique element-boundary nodes.$/;"	m	class:MatrixSys
_nglobal	.\semtex\src\numbersys.h	/^  int_t   _nglobal;		\/\/ Length of inv_mass.$/;"	m	class:NumberSys
_nint	.\semtex\src\element.h	/^  const int_t   _nint ;		\/\/ Number of internal points.$/;"	m	class:Element
_nline	.\semtex\dns\dns.h	/^  int_t          _nline;$/;"	m	class:DNSAnalyser
_nline	.\semtex\src\field.h	/^  int_t        _nline ;		\/\/ Length of one boundary line.$/;"	m	class:Field
_nodeTable	.\semtex\src\mesh.h	/^  vector<Node*>  _nodeTable;$/;"	m	class:Mesh
_np	.\semtex\src\data2df.h	/^  const int_t _np, _nz, _nel, _np2;$/;"	m	class:Data2DF
_np	.\semtex\src\edge.h	/^  int_t          _np     ;	\/\/ Matches Geometry::nP().$/;"	m	class:Edge
_np	.\semtex\src\element.h	/^  const int_t   _np   ;		\/\/ Number of points on an edge.$/;"	m	class:Element
_np	.\semtex\src\geometry.C	/^int_t Geometry::_np    = 0;$/;"	m	class:Geometry	file:
_np	.\semtex\src\geometry.h	/^  static int_t    _np    ;	\/\/ Number of points along element edge.$/;"	m	class:Geometry
_np2	.\semtex\src\data2df.h	/^  const int_t _np, _nz, _nel, _np2;$/;"	m	class:Data2DF
_npack	.\semtex\src\matrix.h	/^  int_t    _npack ;		\/\/ Number of real_ts for global matrix.$/;"	m	class:MatrixSys
_npad	.\semtex\dns\dns.h	/^  int_t          _npad;$/;"	m	class:DNSAnalyser
_nplane	.\semtex\src\data2df.h	/^  int_t       _nplane, _ntot;$/;"	m	class:Data2DF
_npnp	.\semtex\src\element.h	/^  const int_t   _npnp ;		\/\/ Total number = np * np.$/;"	m	class:Element
_nproc	.\semtex\src\geometry.C	/^int_t Geometry::_nproc = 0;$/;"	m	class:Geometry	file:
_nproc	.\semtex\src\geometry.h	/^  static int_t    _nproc ;	\/\/ Number of processors.$/;"	m	class:Geometry
_npts	.\semtex\src\matrix.h	/^  int_t    _npts;		\/\/ Total number of unique meshpoints.$/;"	m	class:MatrixSys
_nraw	.\semtex\src\statistics.h	/^  int_t                _nraw;	\/\/ -- No. of raw field variables in _base.$/;"	m	class:Statistics
_nrey	.\semtex\src\statistics.h	/^  int_t                _nrey;	\/\/ -- No. of Reynolds stress correlations.$/;"	m	class:Statistics
_nsolve	.\semtex\src\matrix.h	/^  int_t    _nsolve  ;		\/\/ System-specific number of global unknowns.$/;"	m	class:MatrixSys
_nsolve	.\semtex\src\numbersys.h	/^  int_t   _nsolve ;		\/\/ Number of non-masked global nodes.$/;"	m	class:NumberSys
_ntot	.\semtex\src\data2df.h	/^  int_t       _nplane, _ntot;$/;"	m	class:Data2DF
_number	.\semtex\src\bsys.h	/^  NumberSys**        _number    ;  \/\/ NumberSys*'s for modes 0, 1, 2.$/;"	m	class:BoundarySys
_numsys	.\semtex\src\bcmgr.h	/^  vector<NumberSys*> _numsys  ; \/\/ Numbering schemes in storage.$/;"	m	class:BCmgr
_nvel	.\semtex\src\statistics.h	/^  int_t                _nvel;	\/\/ -- No. of velocity components.$/;"	m	class:Statistics
_nwall	.\semtex\dns\dns.h	/^  int_t          _nwall;$/;"	m	class:DNSAnalyser
_nx	.\semtex\src\edge.h	/^  real_t*        _nx     ;	\/\/ Unit outward normal components at nodes.$/;"	m	class:Edge
_ny	.\semtex\src\edge.h	/^  real_t*        _ny     ;	\/\/ $/;"	m	class:Edge
_nz	.\semtex\src\auxfield.h	/^  int_t             _nz   ;	\/\/ number of data planes (per process).$/;"	m	class:AuxField
_nz	.\semtex\src\data2df.h	/^  const int_t _np, _nz, _nel, _np2;$/;"	m	class:Data2DF
_nz	.\semtex\src\geometry.C	/^int_t Geometry::_nz    = 0;$/;"	m	class:Geometry	file:
_nz	.\semtex\src\geometry.h	/^  static int_t    _nz    ;	\/\/ Number of planes (total).$/;"	m	class:Geometry
_nzp	.\semtex\src\geometry.C	/^int_t Geometry::_nzp   = 0;$/;"	m	class:Geometry	file:
_nzp	.\semtex\src\geometry.h	/^  static int_t    _nzp   ;	\/\/ Number of planes per processor.$/;"	m	class:Geometry
_optlev	.\semtex\src\numbersys.h	/^  int_t   _optlev ;		\/\/ Optimization level used for btog.$/;"	m	class:NumberSys
_p	.\semtex\src\particle.h	/^  Point          _p    ;	\/\/ Physical space location.$/;"	m	class:FluidParticle
_par_strm	.\semtex\src\analysis.h	/^  ofstream              _par_strm ; \/\/ File for particle tracking.$/;"	m	class:Analyser
_particle	.\semtex\src\analysis.h	/^  list<FluidParticle*>  _particle ; \/\/ List of fluid particles.$/;"	m	class:Analyser
_ph_stats	.\semtex\src\analysis.h	/^  Statistics*           _ph_stats ; \/\/ Phase-average field statistics.$/;"	m	class:Analyser
_pid	.\semtex\src\geometry.C	/^int_t Geometry::_pid   = 0;$/;"	m	class:Geometry	file:
_pid	.\semtex\src\geometry.h	/^  static int_t    _pid   ;	\/\/ ID for this processor, starting at 0.$/;"	m	class:Geometry
_plane	.\semtex\src\auxfield.h	/^  real_t**          _plane;	\/\/ Pointer into data for each 2D frame.$/;"	m	class:AuxField
_plane	.\semtex\src\data2df.h	/^  real_t**    _plane;$/;"	m	class:Data2DF
_pmap	.\semtex\src\element.h	/^  int_t*        _pmap ;		\/\/ Inversion of emap (pmap[emap[i]] = i).$/;"	m	class:Element
_psize	.\semtex\src\geometry.C	/^int_t Geometry::_psize = 0;$/;"	m	class:Geometry	file:
_psize	.\semtex\src\geometry.h	/^  static int_t    _psize ;	\/\/ nPlane rounded up to suit restrictions.$/;"	m	class:Geometry
_r	.\semtex\src\history.h	/^  const real     _r ;		\/\/ Canonical-space r-location.$/;"	m	class:HistoryPoint
_r	.\semtex\src\particle.h	/^  real_t         _r    ;        \/\/ Corresponding "r" location within element.$/;"	m	class:FluidParticle
_raw	.\semtex\src\statistics.h	/^  map<char, AuxField*> _raw ;	\/\/ -- Pointers to the base\/raw storage areas.$/;"	m	class:Statistics
_refQ	.\semtex\src\flowrate.h	/^  real              _refQ ;$/;"	m	class:Flowrate
_s	.\semtex\src\history.h	/^  const real     _s ;		\/\/ Canonical-space s-location.$/;"	m	class:HistoryPoint
_s	.\semtex\src\particle.h	/^  real_t         _s    ;	\/\/ likewise for "s".$/;"	m	class:FluidParticle
_sheet	.\semtex\src\field.h	/^  real_t*      _sheet ;		\/\/ Wrap-around storage for data boundary.$/;"	m	class:Field
_side	.\semtex\src\edge.h	/^  int_t          _side   ;	\/\/ Corresponding side.$/;"	m	class:Edge
_singular	.\semtex\src\matrix.h	/^  int_t    _singular;		\/\/ If system is potentially singular.$/;"	m	class:MatrixSys
_size	.\semtex\src\auxfield.h	/^  int_t             _size ;	\/\/ _nz * Geometry::planeSize().$/;"	m	class:AuxField
_src	.\semtex\src\analysis.h	/^  Domain*               _src      ; \/\/ Source information.$/;"	m	class:Analyser
_src	.\semtex\src\flowrate.h	/^  Domain*           _src;$/;"	m	class:Flowrate
_startarc	.\semtex\src\mesh.h	/^  real_t    _startarc;$/;"	m	class:Spline
_stats	.\semtex\src\analysis.h	/^  Statistics*           _stats    ; \/\/ Field average statistics.$/;"	m	class:Analyser
_step	.\semtex\src\particle.h	/^  int_t          _step ;	\/\/ Number of integration steps.$/;"	m	class:FluidParticle
_u	.\semtex\src\particle.h	/^  real_t*        _u    ;	\/\/ Multilevel "x" velocity storage.$/;"	m	class:FluidParticle
_v	.\semtex\src\particle.h	/^  real_t*        _v    ;	\/\/ Multilevel "y" velocity storage.$/;"	m	class:FluidParticle
_value	.\semtex\src\condition.h	/^  real_t _value;$/;"	m	class:Essential
_value	.\semtex\src\condition.h	/^  real_t _value;$/;"	m	class:Natural
_vecCreg	.\semtex\veclib\util.c	/^char    _vecCreg[NVREG];$/;"	v
_vecDreg	.\semtex\veclib\util.c	/^double  _vecDreg[NVREG];$/;"	v
_vecIreg	.\semtex\veclib\util.c	/^integer _vecIreg[NVREG];	\/* For FORTRAN linkage. *\/$/;"	v
_vecSreg	.\semtex\veclib\util.c	/^float   _vecSreg[NVREG];$/;"	v
_w	.\semtex\src\particle.h	/^  real_t*        _w    ;	\/\/ Multilevel "z" velocity storage.$/;"	m	class:FluidParticle
_work	.\semtex\dns\dns.h	/^  vector<real_t> _work;$/;"	m	class:DNSAnalyser
_wr	.\semtex\src\element.h	/^  const real_t* _wr   ;		\/\/ Master element quadrature weights, r.$/;"	m	class:Element
_ws	.\semtex\src\element.h	/^  const real_t* _ws   ;		\/\/ Master element quadrature weights, s.$/;"	m	class:Element
_wss	.\semtex\dns\dns.h	/^  bool           _wss; \/\/ -- Shorthand for Wall Shear Stress\/traction.$/;"	m	class:DNSAnalyser
_wss_strm	.\semtex\dns\dns.h	/^  ofstream       _wss_strm;$/;"	m	class:DNSAnalyser
_x	.\semtex\src\edge.h	/^  real_t*        _x      ;	\/\/ Node locations.$/;"	m	class:Edge
_x	.\semtex\src\history.h	/^  const real     _x ;		\/\/ x location.$/;"	m	class:HistoryPoint
_xmesh	.\semtex\src\element.h	/^  real_t*       _xmesh;		\/\/ Physical space mesh.$/;"	m	class:Element
_y	.\semtex\src\edge.h	/^  real_t*        _y      ;	\/\/$/;"	m	class:Edge
_y	.\semtex\src\history.h	/^  const real     _y ;		\/\/ y location.$/;"	m	class:HistoryPoint
_ymesh	.\semtex\src\element.h	/^  real_t*       _ymesh;		\/\/ 2D row-major store.$/;"	m	class:Element
_z	.\semtex\src\history.h	/^  const real     _z ;		\/\/ Location in homogeneous direction.$/;"	m	class:HistoryPoint
_zr	.\semtex\src\element.h	/^  const real_t* _zr   ;		\/\/ Master element mesh points on [-1, 1], r.$/;"	m	class:Element
_zs	.\semtex\src\element.h	/^  const real_t* _zs   ;		\/\/ Master element mesh points on [-1, 1], s.$/;"	m	class:Element
a_to_a	.\semtex\utility\noiz.c	/^static void a_to_a (int    np     ,$/;"	f	file:
abandon	.\semtex\femlib\femlib.h	/^  static void abandon (float** v)$/;"	f	class:Femlib
abandon	.\semtex\femlib\femlib.h	/^  static void abandon (int_t** v)$/;"	f	class:Femlib
abandon	.\semtex\femlib\femlib.h	/^  static void abandon (real_t** v)$/;"	f	class:Femlib
abs	.\semtex\utility\preplot.c	498;"	d	file:
accelerate	.\semtex\src\pressure.C	/^void PBCmgr::accelerate (const Vector& a,$/;"	f	class:PBCmgr
active	.\semtex\femlib\family.c	/^  static const integer active = 0;	\/* -- Disable families. *\/$/;"	v	file:
active	.\semtex\femlib\family.c	/^  static const integer active = 1;$/;"	v	file:
add	.\semtex\include\Clist.h	/^void CircularList<T>::add(T x) {$/;"	f	class:CircularList
add	.\semtex\include\List.h	/^  void add (T x) {		\/\/ -- Unconditional insertion.$/;"	f	class:List
addField	.\semtex\utility\enumerate.C	/^void Nsys::addField (char name)$/;"	f	class:Nsys
addForGroup	.\semtex\src\edge.C	/^void Edge::addForGroup (const char*  grp,$/;"	f	class:Edge
addToM0Boundaries	.\semtex\src\field.C	/^void Field::addToM0Boundaries (const real_t val,$/;"	f	class:Field
addtoset	.\semtex\utility\preplot.c	/^void addtoset(i,set)$/;"	f
adopt	.\semtex\femlib\femlib.h	/^  static void adopt (const int_t np, float** v)$/;"	f	class:Femlib
adopt	.\semtex\femlib\femlib.h	/^  static void adopt (const int_t np, int_t** v)$/;"	f	class:Femlib
adopt	.\semtex\femlib\femlib.h	/^  static void adopt (const int_t np, real_t** v)$/;"	f	class:Femlib
advance	.\semtex\include\Clist.h	/^  void    advance ()       { cur =  cur -> next;  }$/;"	f	class:CircularListIterator
afrom	.\semtex\femlib\operators.c	/^  real_t         afrom; \/* Jacobi weight function powers of "from" mesh      *\/$/;"	m	struct:projop	file:
alpha	.\semtex\femlib\operators.c	/^  real_t         alpha ; \/* Constants in definition of singular Sturm--      *\/$/;"	m	struct:quadop	file:
analyse	.\semtex\dns\dnsanalysis.C	/^void DNSAnalyser::analyse (AuxField** work0,$/;"	f	class:DNSAnalyser
analyse	.\semtex\src\analysis.C	/^void Analyser::analyse (AuxField** work0,$/;"	f	class:Analyser
anti_symmetric_part	.\semtex\utility\tensorcalcs.c	/^void anti_symmetric_part(const double T[9], double A[9])$/;"	f
any	.\semtex\veclib\veclib.h	/^  static int_t any   (int_t n, const int_t *x, int_t incx)$/;"	f	class:Veclib
arcCoord	.\semtex\src\mesh.C	/^real_t Spline::arcCoord ()$/;"	f	class:Spline
architecture	.\semtex\utility\convert.c	/^static FORMAT architecture (void)$/;"	f	file:
arclen	.\semtex\src\mesh.h	/^  vector<real_t> arclen;        \/\/ arclength along curve at knot locations$/;"	m	class:spline2D
area	.\semtex\src\element.C	/^real_t Element::area () const$/;"	f	class:Element
asgn	.\semtex\femlib\initial.y	/^asgn:     VAR '=' expr       { $$=$1->u.val=$3; $1->type = VAR; }$/;"	l
assemble	.\semtex\src\mesh.C	/^void Mesh::assemble()$/;"	f	class:Mesh
asum	.\semtex\veclib\blas.h	/^  static double asum (const integer& n, const double* x, const integer& incx) {$/;"	f	class:Blas
asum	.\semtex\veclib\blas.h	/^  static float  asum (const integer& n, const float* x, const integer& incx) {$/;"	f	class:Blas
ato	.\semtex\femlib\operators.c	/^  real_t         ato  ; \/* As for "from" mesh definitions.                   *\/$/;"	m	struct:projop	file:
attribute	.\semtex\src\feml.C	/^integer FEML::attribute (const char* tag ,$/;"	f	class:FEML
augmentDg	.\semtex\src\boundary.C	/^void Boundary::augmentDg (const int_t* b2g,$/;"	f	class:Boundary
augmentDg	.\semtex\src\condition.C	/^void Mixed::augmentDg (const int_t   side, $/;"	f	class:Mixed
augmentDg	.\semtex\src\condition.h	/^  virtual void augmentDg (const int_t, const int_t*, $/;"	f	class:Essential
augmentDg	.\semtex\src\condition.h	/^  virtual void augmentDg (const int_t, const int_t*, $/;"	f	class:EssentialFunction
augmentDg	.\semtex\src\condition.h	/^  virtual void augmentDg (const int_t, const int_t*, $/;"	f	class:Natural
augmentDg	.\semtex\src\condition.h	/^  virtual void augmentDg (const int_t, const int_t*, $/;"	f	class:NaturalFunction
augmentDg	.\semtex\src\condition.h	/^  virtual void augmentDg (const int_t, const int_t*, $/;"	f	class:NaturalHOPBC
augmentOp	.\semtex\src\boundary.C	/^void Boundary::augmentOp (const int_t*  b2g,$/;"	f	class:Boundary
augmentOp	.\semtex\src\condition.C	/^void Mixed::augmentOp (const int_t   side, $/;"	f	class:Mixed
augmentOp	.\semtex\src\condition.h	/^  virtual void augmentOp (const int_t, const int_t*,$/;"	f	class:Essential
augmentOp	.\semtex\src\condition.h	/^  virtual void augmentOp (const int_t, const int_t*,$/;"	f	class:EssentialFunction
augmentOp	.\semtex\src\condition.h	/^  virtual void augmentOp (const int_t, const int_t*,$/;"	f	class:Natural
augmentOp	.\semtex\src\condition.h	/^  virtual void augmentOp (const int_t, const int_t*,$/;"	f	class:NaturalFunction
augmentOp	.\semtex\src\condition.h	/^  virtual void augmentOp (const int_t, const int_t*,$/;"	f	class:NaturalHOPBC
augmentSC	.\semtex\src\boundary.C	/^void Boundary::augmentSC (const int_t  nband ,$/;"	f	class:Boundary
augmentSC	.\semtex\src\condition.C	/^void Mixed::augmentSC (const int_t   side  ,$/;"	f	class:Mixed
augmentSC	.\semtex\src\condition.h	/^  virtual void augmentSC (const int_t, const int_t, const int_t,$/;"	f	class:Essential
augmentSC	.\semtex\src\condition.h	/^  virtual void augmentSC (const int_t, const int_t, const int_t,$/;"	f	class:EssentialFunction
augmentSC	.\semtex\src\condition.h	/^  virtual void augmentSC (const int_t, const int_t, const int_t,$/;"	f	class:Natural
augmentSC	.\semtex\src\condition.h	/^  virtual void augmentSC (const int_t, const int_t, const int_t,$/;"	f	class:NaturalFunction
augmentSC	.\semtex\src\condition.h	/^  virtual void augmentSC (const int_t, const int_t, const int_t,$/;"	f	class:NaturalHOPBC
axial	.\semtex\src\mesh.h	/^    bool          axial;$/;"	m	class:Mesh::Side
axial	.\semtex\utility\enumerate.C	/^static char axial (FEML* file)$/;"	f	file:
axpy	.\semtex\veclib\blas.h	/^  static void axpy (const integer& n, const double& alpha,$/;"	f	class:Blas
axpy	.\semtex\veclib\blas.h	/^  static void axpy (const integer& n, const float& alpha,$/;"	f	class:Blas
b	.\semtex\src\domain.h	/^  vector<BoundarySys*> b   ;	\/\/ Field boundary systems.$/;"	m	class:Domain
bOff	.\semtex\src\edge.h	/^  int_t  bOff  () const { return _elmt -> ID() * Geometry::nExtElmt(); }$/;"	f	class:Edge
bTransform	.\semtex\src\field.C	/^void Field::bTransform (const int_t sign)$/;"	f	class:Field
b_to_b	.\semtex\utility\noiz.c	/^static void b_to_b (int    np     ,$/;"	f	file:
band_addr	.\semtex\veclib\lapack.h	/^  static inline int_t band_addr (int_t i, int_t j, int_t bw)$/;"	f	class:Lapack
bandwidthSC	.\semtex\utility\enumerate.C	/^int_t Nsys::bandwidthSC (const int_t* bmap,$/;"	f	class:Nsys
baseMode	.\semtex\src\geometry.h	/^  static int_t  baseMode  () { return _pid * nModeProc();    }$/;"	f	class:Geometry
basePlane	.\semtex\src\geometry.h	/^  static int_t  basePlane () { return _pid * _nzp;           }$/;"	f	class:Geometry
bcn	.\semtex\src\bcmgr.h	/^    Condition* bcn  ;$/;"	m	class:BCmgr::CondRecd
bctriple	.\semtex\src\bcmgr.h	/^typedef struct bctriple { char group; int_t elmt; int_t side; } BCtriple;$/;"	s
beta	.\semtex\femlib\operators.c	/^  real_t         beta  ; \/*   Liouville problem, (Jacobi wt functions) >=-1  *\/$/;"	m	struct:quadop	file:
beta	.\semtex\src\data2df.h	/^  real_t beta;$/;"	m	class:Header
beta	.\semtex\utility\avgdump.c	/^  double   beta             ;$/;"	m	struct:__anon5	file:
beta	.\semtex\utility\rstress.c	/^  double   beta             ;$/;"	m	struct:__anon8	file:
bfrom	.\semtex\femlib\operators.c	/^  real_t         bfrom; \/*   ignored for 'U' (uniform) mesh spacing          *\/$/;"	m	struct:projop	file:
bmask	.\semtex\src\numbersys.h	/^  const int_t*  bmask   () const { return _bmask;             }$/;"	f	class:NumberSys
bndryDsSum	.\semtex\src\element.C	/^void Element::bndryDsSum (const int_t*  btog,$/;"	f	class:Element
bndryInsert	.\semtex\src\element.C	/^void Element::bndryInsert (const int_t*  b2g,$/;"	f	class:Element
bndryMask	.\semtex\src\element.C	/^void Element::bndryMask (const int_t*  bmsk,$/;"	f	class:Element
bracket	.\semtex\femlib\femlib.h	/^  static void bracket   (real_t& ax, real_t& bx, real_t& cx,$/;"	f	class:Femlib
braket	.\semtex\femlib\netlib.f	/^      SUBROUTINE braket(/;"	s
brent	.\semtex\femlib\femlib.h	/^  static real_t brent  (const real_t& ax, const real_t& bx,$/;"	f	class:Femlib
brev	.\semtex\veclib\veclib.h	/^  static void brev (int_t n, const double*  x, int_t incx,$/;"	f	class:Veclib
brev	.\semtex\veclib\veclib.h	/^  static void brev (int_t n, const float*   x, int_t incx,$/;"	f	class:Veclib
brev	.\semtex\veclib\veclib.h	/^  static void brev (int_t n, const int_t* x, int_t incx,$/;"	f	class:Veclib
bto	.\semtex\femlib\operators.c	/^  real_t         bto  ; \/*                                                   *\/$/;"	m	struct:projop	file:
btog	.\semtex\src\numbersys.h	/^  const int_t*  btog    () const { return _btog;              }$/;"	f	class:NumberSys
buf	.\semtex\veclib\cveclib.h	/^char buf[STR_MAX];$/;"	v
buf	.\semtex\veclib\util.c	/^char     buf[STR_MAX];		\/* A string for general use. *\/$/;"	v
build	.\semtex\src\pressure.C	/^void PBCmgr::build (const Field* P)$/;"	f	class:PBCmgr
buildMap	.\semtex\src\mesh.C	/^int_t Mesh::buildMap (const int_t np ,$/;"	f	class:Mesh
buildMaps	.\semtex\femlib\femlib.h	/^  static void buildMaps (const int_t np, const int_t dim,$/;"	f	class:Femlib
buildMask	.\semtex\src\mesh.C	/^void Mesh::buildMask (const int_t np  ,$/;"	f	class:Mesh
buildRHS	.\semtex\src\field.C	/^void Field::buildRHS (real_t*                  force ,$/;"	f	class:Field
buildnum	.\semtex\src\bcmgr.C	/^void BCmgr::buildnum (const char*       session,$/;"	f	class:BCmgr
buildsurf	.\semtex\src\bcmgr.C	/^void BCmgr::buildsurf (FEML*             file,$/;"	f	class:BCmgr
bvdFilter	.\semtex\femlib\filter.c	/^void bvdFilter (const integer N     ,$/;"	f
c3matrix	.\semtex\veclib\memory.c	/^complex ***c3matrix (integer nrl, integer nrh,$/;"	f
ccwNode	.\semtex\src\mesh.h	/^    Node* ccwNode  (int_t i) { return node[(i         +1) % nNodes()]; }$/;"	f	class:Mesh::Elmt
centre	.\semtex\src\mesh.h	/^  Point  centre;$/;"	m	class:CircularArc
centroid	.\semtex\src\mesh.C	/^Point Mesh::Elmt::centroid () const$/;"	f	class:Mesh::Elmt
cfft	.\semtex\veclib\xfft.c	/^void cfft(int N, complex *Data, int TabLen, const complex *Wtab, int Forward)$/;"	f
checkABCs	.\semtex\utility\enumerate.C	/^static void checkABCs (FEML*      file ,$/;"	f	file:
checkAssembly	.\semtex\src\mesh.C	/^void Mesh::checkAssembly()$/;"	f	class:Mesh
checkVBCs	.\semtex\utility\enumerate.C	/^static void checkVBCs (FEML*       file ,$/;"	f	file:
chknames	.\semtex\utility\rstress.c	/^static void chknames (const char* field)$/;"	f	file:
chooseNode	.\semtex\src\mesh.C	/^void Mesh::chooseNode (Node* N1,$/;"	f	class:Mesh
chop	.\semtex\utility\chop.c	/^static void chop (FILE* file , $/;"	f	file:
clamp	.\semtex\veclib\utility.h	/^template<class T> inline T clamp(T t, T a, T b) { return max(min(t,b),a);  }$/;"	f
classify	.\semtex\utility\convert.c	/^static FORMAT classify (const char* s)$/;"	f	file:
classify_incompressible	.\semtex\utility\tensorcalcs.c	/^double classify_incompressible(const double VG[9], int *topology)$/;"	f
clear	.\semtex\include\List.h	/^  void clear  () { head = tail = 0; nel = 0; }$/;"	f	class:List
clip	.\semtex\veclib\veclib.h	/^  static void clip (int_t n, const  float alpha, const float  beta,$/;"	f	class:Veclib
clip	.\semtex\veclib\veclib.h	/^  static void clip (int_t n, const  int_t alpha, const int_t  beta,$/;"	f	class:Veclib
clip	.\semtex\veclib\veclib.h	/^  static void clip (int_t n, const double alpha, const double beta,$/;"	f	class:Veclib
clipdn	.\semtex\veclib\veclib.h	/^  static void clipdn (int_t n, const  int_t alpha,$/;"	f	class:Veclib
clipdn	.\semtex\veclib\veclib.h	/^  static void clipdn (int_t n, const double alpha,$/;"	f	class:Veclib
clipdn	.\semtex\veclib\veclib.h	/^  static void clipdn (int_t n, const float alpha,$/;"	f	class:Veclib
clipup	.\semtex\veclib\veclib.h	/^  static void clipup (int_t n, const double alpha,$/;"	f	class:Veclib
clipup	.\semtex\veclib\veclib.h	/^  static void clipup (int_t n, const float alpha,$/;"	f	class:Veclib
clipup	.\semtex\veclib\veclib.h	/^  static void clipup (int_t n, const int_t alpha,$/;"	f	class:Veclib
clock	.\semtex\veclib\veclib.h	/^  static double clock ()$/;"	f	class:Veclib
closest	.\semtex\src\mesh.C	/^int_t Spline::closest (const Point& p)$/;"	f	class:Spline
cmatrix	.\semtex\veclib\memory.c	/^complex **cmatrix (integer nrl, integer nrh,$/;"	f
cmp1	.\semtex\utility\enumerate.C	/^static int cmp1 (const void *a,$/;"	f	file:
cmp2	.\semtex\utility\enumerate.C	/^static int cmp2 (const void *a,$/;"	f	file:
cndst	.\semtex\veclib\veclib.h	/^  static void cndst (int_t n, const double*  x, int_t incx,$/;"	f	class:Veclib
cndst	.\semtex\veclib\veclib.h	/^  static void cndst (int_t n, const float*   x, int_t incx,$/;"	f	class:Veclib
cndst	.\semtex\veclib\veclib.h	/^  static void cndst (int_t n, const int_t* x, int_t incx,$/;"	f	class:Veclib
col_major	.\semtex\veclib\veclib.h	/^  static inline int_t col_major (int_t i, int_t j, int_t n)$/;"	f	class:Veclib
complex	.\semtex\veclib\cveclib.h	/^typedef struct  {float  Re, Im;}         complex;$/;"	t	typeref:struct:__anon10
compute	.\semtex\src\mesh.C	/^void CircularArc::compute (const int_t   np     ,$/;"	f	class:CircularArc
compute	.\semtex\src\mesh.C	/^void Spline::compute (const int_t   np     ,$/;"	f	class:Spline
connect	.\semtex\src\mesh.C	/^void Mesh::Side::connect (const int_t ni ,$/;"	f	class:Mesh::Side
constants	.\semtex\include\Boolean.h	/^    enum constants { false = 0, true = 1 };$/;"	g	class:Boolean
constrain	.\semtex\src\field.C	/^void Field::constrain (real_t*          force  ,$/;"	f	class:Field
consts	.\semtex\femlib\defaults.h	/^} consts[] = {$/;"	v	typeref:struct:__anon2
contracted_product	.\semtex\utility\tensorcalcs.c	/^double contracted_product(const double T[9])$/;"	f
convexity	.\semtex\src\mesh.h	/^  int_t  convexity;$/;"	m	class:CircularArc
copy	.\semtex\include\Array.h	/^  void copy (const matrix<T>& src) {$/;"	f	class:matrix
copy	.\semtex\include\Array.h	/^  void copy (const vector<T>& src) {$/;"	f	class:vector
copy	.\semtex\veclib\veclib.h	/^  static void copy (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
copy	.\semtex\veclib\veclib.h	/^  static void copy (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
copy	.\semtex\veclib\veclib.h	/^  static void copy (int_t n, const int_t*  x, int_t incx,$/;"	f	class:Veclib
copyset	.\semtex\utility\preplot.c	/^void copyset(toset,fromset,l)$/;"	f
count	.\semtex\veclib\veclib.h	/^  static int_t count (int_t n, const int_t *x, int_t incx)$/;"	f	class:Veclib
count_fields	.\semtex\utility\convert.c	/^static int count_fields (const char *s)$/;"	f	file:
coupleBCs	.\semtex\src\field.C	/^void Field::coupleBCs (Field*      v  ,$/;"	f	class:Field
covary	.\semtex\utility\eneq.C	/^static void covary  (map<char, AuxField*>& in  ,$/;"	f	file:
covary	.\semtex\utility\rstress.c	/^static void covary (Dump* h)$/;"	f	file:
cpreft	.\semtex\veclib\xfft.c	/^void cpreft(int K, complex *Wtab, int Sign)$/;"	f
creation	.\semtex\utility\avgdump.c	/^  char     creation[STR_MAX];$/;"	m	struct:__anon5	file:
creation	.\semtex\utility\rstress.c	/^  char     creation[STR_MAX];$/;"	m	struct:__anon8	file:
cross	.\semtex\utility\tensorcalcs.c	/^void cross(const double a[3], const double b[3], double c[3])$/;"	f
ctime	.\semtex\src\particle.h	/^  real_t          ctime     () const { return _ctime;  }$/;"	f	class:FluidParticle
cur	.\semtex\include\Clist.h	/^  CircularList<T>::Node* cur;$/;"	m	class:CircularListIterator
cur	.\semtex\include\List.h	/^  ListNode<T>* cur;$/;"	m	class:ListIterator
curlCurl	.\semtex\src\edge.C	/^void Edge::curlCurl (const int_t   k  ,$/;"	f	class:Edge
current	.\semtex\include\Clist.h	/^  T       current () const { return cur -> datum; }$/;"	f	class:CircularListIterator
current	.\semtex\include\List.h	/^  T     current () const  { return cur -> datum;       }$/;"	f	class:ListIterator
curveSide	.\semtex\src\mesh.h	/^  Mesh::Side* curveSide;$/;"	m	class:Curve
curves	.\semtex\src\mesh.C	/^void Mesh::curves ()$/;"	f	class:Mesh
cval	.\semtex\femlib\defaults.h	/^  double cval;$/;"	m	struct:__anon2
cvector	.\semtex\veclib\memory.c	/^complex* cvector (integer nl, integer nh)$/;"	f
cwNode	.\semtex\src\mesh.h	/^    Node* cwNode   (int_t i) { return node[(i+nNodes()-1) % nNodes()]; }$/;"	f	class:Mesh::Elmt
cylindrical	.\semtex\src\geometry.h	/^  static bool     cylindrical () { return _csys == Geometry::Cylindrical; }$/;"	f	class:Geometry
cylindrical	.\semtex\utility\sem2vtk.c	/^static int     nzp = 0, preplot_it = 1, np = 1, dump = 1, cylindrical=0;$/;"	v	file:
d2r	.\semtex\utility\topre.c	70;"	d	file:
d3matrix	.\semtex\veclib\memory.c	/^double ***d3matrix (integer nrl, integer nrh,$/;"	f
dAdopted	.\semtex\femlib\family.c	/^static double* dAdopted (const integer size,$/;"	f	file:
dDFTr	.\semtex\femlib\fourier.c	/^void dDFTr (double*       data,$/;"	f
dHead	.\semtex\femlib\family.c	/^static dVect* dHead = 0;$/;"	v	file:
dOff	.\semtex\src\edge.h	/^  int_t  dOff  () const { return _doffset; }$/;"	f	class:Edge
dSkip	.\semtex\src\edge.h	/^  int_t  dSkip () const { return _dskip; }$/;"	f	class:Edge
dVect	.\semtex\femlib\family.c	/^} dVect;$/;"	t	typeref:struct:dvect	file:
dabandon	.\semtex\femlib\family.c	/^void dabandon (double** vect)$/;"	f
dadopt	.\semtex\femlib\family.c	/^void dadopt (const integer size,$/;"	f
dasum	.\semtex\veclib\cveclib.h	743;"	d
data	.\semtex\femlib\family.c	/^  double*       data ;$/;"	m	struct:dvect	file:
data	.\semtex\femlib\family.c	/^  float*        data ;$/;"	m	struct:svect	file:
data	.\semtex\femlib\family.c	/^  integer*      data ;		\/* Vector.                            *\/$/;"	m	struct:ivect	file:
data	.\semtex\include\Array.h	/^  T*   data;$/;"	m	class:matrix
data	.\semtex\include\Array.h	/^  T*   data;$/;"	m	class:vector
data	.\semtex\utility\avgdump.c	/^  double** data             ;$/;"	m	struct:__anon5	file:
data	.\semtex\utility\rstress.c	/^  double** data             ;$/;"	m	struct:__anon8	file:
data	.\semtex\utility\sem2tec.c	/^static double  *data[MAXFIELDS], *x, *y, *z;$/;"	v	file:
data	.\semtex\utility\sem2vtk.c	/^static double  *data[MAXFIELDS], *x, *y, *z;$/;"	v	file:
datum	.\semtex\include\Clist.h	/^    T     datum;$/;"	m	class:CircularList::Node
datum	.\semtex\include\List.h	/^    T            datum;$/;"	m	class:ListNode
datum	.\semtex\include\Stack.h	/^  T     datum;$/;"	m	class:StackNode
daxpy	.\semtex\veclib\cveclib.h	737;"	d
dbrev	.\semtex\veclib\xbrev.c	/^void dbrev (integer n,$/;"	f
dclip	.\semtex\veclib\xclip.c	/^void dclip (integer n, const double alpha, const double beta,$/;"	f
dclipdn	.\semtex\veclib\xclip.c	/^void dclipdn (integer n, const double alpha,$/;"	f
dclipup	.\semtex\veclib\xclip.c	/^void dclipup (integer n, const double alpha,$/;"	f
dclock	.\semtex\veclib\util.c	/^double dclock (void)$/;"	f
dcndst	.\semtex\veclib\xcndst.c	/^void dcndst (integer n,$/;"	f
dcopy	.\semtex\veclib\xcopy.c	/^void dcopy (integer n, const double* x, integer incx,$/;"	f
ddot	.\semtex\femlib\tests\polylib_test.c	/^double ddot (int n, double *x, int incx, double *y, int incy)$/;"	f
ddot	.\semtex\veclib\cveclib.h	740;"	d
deg	.\semtex\utility\topre.c	73;"	d	file:
demean	.\semtex\utility\rstress.c	/^static void demean (Dump* a,$/;"	f	file:
depth	.\semtex\include\Stack.h	/^  int depth () const { return stack_depth; }$/;"	f	class:Stack
deriv	.\semtex\femlib\operators.c	/^  real_t*        deriv ; \/* Derivative operator for Lagrangian interpolant   *\/$/;"	m	struct:quadop	file:
derivT	.\semtex\femlib\operators.c	/^  real_t*        derivT; \/* Transpose of the above (both in row-major order) *\/$/;"	m	struct:quadop	file:
dermat_g	.\semtex\femlib\polyops.c	/^void dermat_g (const int_t   K   ,$/;"	f
dermat_k	.\semtex\femlib\polyops.c	/^void dermat_k (const int_t   K   ,$/;"	f
describe	.\semtex\src\condition.C	/^void Essential::describe (char* tgt) const$/;"	f	class:Essential
describe	.\semtex\src\condition.C	/^void EssentialFunction::describe (char* tgt) const$/;"	f	class:EssentialFunction
describe	.\semtex\src\condition.C	/^void Mixed::describe (char* tgt) const$/;"	f	class:Mixed
describe	.\semtex\src\condition.C	/^void Natural::describe (char* tgt) const$/;"	f	class:Natural
describe	.\semtex\src\condition.C	/^void NaturalFunction::describe (char* tgt) const$/;"	f	class:NaturalFunction
describe	.\semtex\src\condition.C	/^void NaturalHOPBC::describe (char* tgt) const$/;"	f	class:NaturalHOPBC
describeBC	.\semtex\src\mesh.C	/^void Mesh::describeBC (char  grp,$/;"	f	class:Mesh
describeFormat	.\semtex\veclib\veclib.h	/^  static void describeFormat (char* s)$/;"	f	class:Veclib
describeGrp	.\semtex\src\mesh.C	/^void Mesh::describeGrp (char  G,$/;"	f	class:Mesh
det	.\semtex\utility\tensorcalcs.c	/^double det(const double T[9])$/;"	f
dfill	.\semtex\veclib\xfill.c	/^void dfill (integer n, double alpha, double* x, integer incx)$/;"	f
dgathr	.\semtex\veclib\xgathr.c	/^void dgathr (integer n, const double* x, const integer* y, double* z)$/;"	f
dgathr_scatr	.\semtex\veclib\xgathr_scatr.c	/^void dgathr_scatr (integer n,$/;"	f
dgathr_scatr_sum	.\semtex\veclib\xgathr_scatr_sum.c	/^void dgathr_scatr_sum (integer n,$/;"	f
dgathr_sum	.\semtex\veclib\xgathr_sum.c	/^void dgathr_sum (integer n, const double* x, const integer* y, double* z)$/;"	f
dgemm	.\semtex\veclib\cveclib.h	866;"	d
dgemv	.\semtex\veclib\cveclib.h	803;"	d
dger	.\semtex\veclib\cveclib.h	827;"	d
dgetrf	.\semtex\veclib\cveclib.h	908;"	d
dgetri	.\semtex\veclib\cveclib.h	922;"	d
dgj	.\semtex\femlib\polylib.h	119;"	d
dglj	.\semtex\femlib\polylib.h	121;"	d
dgll	.\semtex\femlib\polylib.h	123;"	d
dglldpc	.\semtex\femlib\operators.c	/^void dglldpc (const int_t    np,$/;"	f
dglldpt	.\semtex\femlib\operators.c	/^void dglldpt (const int_t    np,$/;"	f
dglmdpc	.\semtex\femlib\operators.c	/^void dglmdpc (const int_t    np,$/;"	f
dglmdpt	.\semtex\femlib\operators.c	/^void dglmdpt (const int_t    np,$/;"	f
dgrad2	.\semtex\femlib\cfemlib.h	177;"	d
dgrj	.\semtex\femlib\polylib.h	120;"	d
dgrl	.\semtex\femlib\polylib.h	124;"	d
diclip	.\semtex\veclib\xiclip.c	/^void diclip (integer n, const double alpha, const double beta,$/;"	f
dim	.\semtex\femlib\mapping.c	/^  integer         dim  ;$/;"	m	struct:mapping	file:
dissipation	.\semtex\utility\tensorcalcs.c	/^double dissipation(const double VG[9])$/;"	f
divY	.\semtex\src\edge.C	/^void Edge::divY (real_t* tgt) const$/;"	f	class:Edge
divY	.\semtex\src\element.C	/^void Element::divY (real_t* src) const$/;"	f	class:Element
divergence	.\semtex\src\analysis.C	/^void Analyser::divergence (AuxField** Us) const$/;"	f	class:Analyser
dmask	.\semtex\veclib\xmask.c	/^void dmask (integer n,$/;"	f
dmatrix	.\semtex\femlib\tests\polylib_test.c	/^double **dmatrix(int nrl, int nrh, int ncl, int nch)$/;"	f
dmatrix	.\semtex\veclib\memory.c	/^double **dmatrix (integer nrl, integer nrh,$/;"	f
dmpfft	.\semtex\femlib\cfemlib.h	167;"	d
dmrcft	.\semtex\femlib\cfemlib.h	151;"	d
dmxm	.\semtex\veclib\XMXM.c	/^void dmxm (double* A, integer nra,$/;"	f
dmxm	.\semtex\veclib\cveclib.h	881;"	d
dmxv	.\semtex\veclib\cveclib.h	836;"	d
dmxv	.\semtex\veclib\xmxv.c	/^void dmxv (double* A, integer nra, double* B, integer nca, double* C)$/;"	f
dmxva	.\semtex\veclib\xmxva.c	/^void dmxva(double* A, integer iac, integer iar, double* B, integer ib,$/;"	f
dneg	.\semtex\veclib\xneg.c	/^void dneg (integer n, double* x, integer incx)$/;"	f
dnormal	.\semtex\veclib\xrand.c	/^double dnormal (double mean, double sdev)$/;"	f
dnrm2	.\semtex\veclib\cveclib.h	745;"	d
doSwap	.\semtex\utility\eneq.C	/^static bool doSwap (const char* ffmt)$/;"	f	file:
doSwap	.\semtex\utility\integral.C	/^static bool doSwap (const char* ffmt)$/;"	f	file:
doSwap	.\semtex\utility\interp.C	/^static bool doSwap (const char* ffmt)$/;"	f	file:
doSwap	.\semtex\utility\lowpass.C	/^static bool doSwap (const char* ffmt)$/;"	f	file:
doSwap	.\semtex\utility\phase.C	/^static int_t doSwap (const char* ffmt)$/;"	f	file:
doSwap	.\semtex\utility\probe.C	/^static bool doSwap (const char* ffmt)$/;"	f	file:
doSwap	.\semtex\utility\project.C	/^static bool doSwap (const char* ffmt)$/;"	f	file:
doSwap	.\semtex\utility\transform.C	/^static bool doSwap (const char* ffmt)$/;"	f	file:
do_interp	.\semtex\utility\sem2tec.c	/^static double* do_interp (const double* imr ,$/;"	f	file:
do_interp	.\semtex\utility\sem2vtk.c	/^static double* do_interp (const double* imr ,$/;"	f	file:
dot	.\semtex\utility\tensorcalcs.c	/^double dot(const double a[3], const double b[3])$/;"	f
dot	.\semtex\veclib\blas.h	/^  static double dot (const integer& n, const double* x, const integer& incx,$/;"	f	class:Blas
dot	.\semtex\veclib\blas.h	/^  static float  dot (const integer& n, const float* x, const integer& incx,$/;"	f	class:Blas
dpbtrf	.\semtex\veclib\cveclib.h	936;"	d
dpbtrs	.\semtex\veclib\cveclib.h	948;"	d
dpolint	.\semtex\veclib\xpolint.c	/^void dpolint (const double *xa, const double *ya, integer n,$/;"	f
dpoly	.\semtex\veclib\xpolint.c	/^double dpoly (integer n, double x, const double* xp, const double* yp)$/;"	f
dpptrf	.\semtex\veclib\cveclib.h	964;"	d
dpptrs	.\semtex\veclib\cveclib.h	974;"	d
dpreft	.\semtex\femlib\cfemlib.h	149;"	d
dramp	.\semtex\veclib\xramp.c	/^void dramp (integer n, double alpha, double beta, double* x, integer incx)$/;"	f
dranu	.\semtex\veclib\veclib.h	/^  static double dranu ()         $/;"	f	class:Veclib
dranu	.\semtex\veclib\xrand.c	/^double dranu (void)$/;"	f
drfftb	.\semtex\femlib\cfemlib.h	140;"	d
drfftf	.\semtex\femlib\cfemlib.h	138;"	d
drffti	.\semtex\femlib\cfemlib.h	136;"	d
drot	.\semtex\veclib\cveclib.h	747;"	d
drotg	.\semtex\veclib\cveclib.h	730;"	d
dsadd	.\semtex\veclib\xsadd.c	/^void dsadd (integer n, double alpha, const double* x, integer incx,$/;"	f
dscal	.\semtex\veclib\cveclib.h	734;"	d
dscatr	.\semtex\veclib\xscatr.c	/^void dscatr (integer n, const double* x, const integer* y, double* z)$/;"	f
dscatr_sum	.\semtex\veclib\xscatr_sum.c	/^void dscatr_sum (integer n, const double* x, const integer* y, double* z)$/;"	f
dsdiv	.\semtex\veclib\xsdiv.c	/^void dsdiv (integer n, double alpha, const double* x, integer incx,$/;"	f
dsetpf	.\semtex\femlib\cfemlib.h	164;"	d
dsge	.\semtex\veclib\xsge.c	/^void dsge (integer n, double alpha,$/;"	f
dsle	.\semtex\veclib\xsle.c	/^void dsle (integer n, double alpha,$/;"	f
dslt	.\semtex\veclib\xslt.c	/^void dslt (integer n, double alpha,$/;"	f
dsmul	.\semtex\veclib\xsmul.c	/^void dsmul (integer n, double alpha, const double* x, integer incx,$/;"	f
dsne	.\semtex\veclib\xsne.c	/^void dsne (integer n, double alpha,$/;"	f
dspline	.\semtex\veclib\xspline.c	/^void dspline (integer n, double yp1, double ypn,$/;"	f
dsplint	.\semtex\veclib\xspline.c	/^double dsplint (integer n, double x, const double* xa, const double* ya,$/;"	f
dsplquad	.\semtex\veclib\xsplquad.c	/^double dsplquad (const double* xa ,$/;"	f
dspmv	.\semtex\veclib\cveclib.h	816;"	d
dspow	.\semtex\veclib\xspow.c	/^void dspow (const integer n, const double alpha,$/;"	f
dssub	.\semtex\veclib\xssub.c	/^void dssub (integer n, double alpha, const double* x, integer incx,$/;"	f
dsum	.\semtex\veclib\xsum.c	/^double dsum (integer n, const double* x, integer incx)$/;"	f
dsvmvt	.\semtex\veclib\xsvmvt.c	/^void dsvmvt (integer n, double alpha,$/;"	f
dsvpvt	.\semtex\veclib\xsvpvt.c	/^void dsvpvt (integer n, double alpha,$/;"	f
dsvtsp	.\semtex\veclib\xsvtsp.c	/^void dsvtsp (integer n, double alpha, double beta,$/;"	f
dsvtvm	.\semtex\veclib\xsvtvm.c	/^void dsvtvm (integer n, double alpha,$/;"	f
dsvtvp	.\semtex\veclib\xsvtvp.c	/^void dsvtvp (integer n, double alpha,$/;"	f
dsvvmt	.\semtex\veclib\xsvvmt.c	/^void dsvvmt (integer n, double alpha,$/;"	f
dsvvpt	.\semtex\veclib\xsvvpt.c	/^void dsvvpt (integer n, double alpha,$/;"	f
dsvvtm	.\semtex\veclib\xsvvtm.c	/^void dsvvtm (integer n, double alpha,$/;"	f
dsvvtp	.\semtex\veclib\xsvvtp.c	/^void dsvvtp (integer n, double alpha,$/;"	f
dsvvtt	.\semtex\veclib\xsvvtt.c	/^void dsvvtt (integer n, double alpha,$/;"	f
dsvvttvp	.\semtex\veclib\xsvvttvp.c	/^void dsvvttvp (integer n, const double  alpha,$/;"	f
dswap	.\semtex\utility\convert.c	/^static void dswap (const int n,$/;"	f	file:
dswap	.\semtex\veclib\cveclib.h	731;"	d
dt	.\semtex\src\data2df.h	/^  real_t dt  ;$/;"	m	class:Header
dtab	.\semtex\femlib\operators.c	/^  real_t*         dtab;		\/* (np+1)*np table of polynomials & weights  *\/$/;"	m	struct:legcoef	file:
dtab	.\semtex\femlib\operators.c	/^  real_t*         dtab;		\/* np*np table of basis function values      *\/$/;"	m	struct:modcoef	file:
dump	.\semtex\src\domain.C	/^void Domain::dump ()$/;"	f	class:Domain
dump	.\semtex\src\statistics.C	/^void Statistics::dump (const char* filename)$/;"	f	class:Statistics
dump	.\semtex\utility\sem2tec.c	/^static int     nzp = 0, preplot_it = 1, np = 1, dump = 1;$/;"	v	file:
dump	.\semtex\utility\sem2vtk.c	/^static int     nzp = 0, preplot_it = 1, np = 1, dump = 1, cylindrical=0;$/;"	v	file:
dvabs	.\semtex\veclib\xvabs.c	/^void dvabs (integer n, const double* x, integer incx,$/;"	f
dvadd	.\semtex\veclib\xvadd.c	/^void dvadd (integer n,$/;"	f
dvamax	.\semtex\veclib\xvamax.c	/^void dvamax (integer n, $/;"	f
dvatan	.\semtex\veclib\xvatan.c	/^void dvatan (integer n, const double* x, integer incx,$/;"	f
dvatn2	.\semtex\veclib\xvatn2.c	/^void dvatn2 (integer n, $/;"	f
dvcos	.\semtex\veclib\xvcos.c	/^void dvcos (integer n, const double* x, integer incx,$/;"	f
dvdiv	.\semtex\veclib\xvdiv.c	/^void dvdiv (integer n,$/;"	f
dvect	.\semtex\femlib\family.c	/^typedef struct dvect {$/;"	s	file:
dvector	.\semtex\femlib\tests\polylib_test.c	/^double *dvector(int nl,int nh)$/;"	f
dvector	.\semtex\veclib\memory.c	/^double* dvector (integer nl, integer nh)$/;"	f
dvexp	.\semtex\veclib\xvexp.c	/^void dvexp (integer n, const double* x, integer incx,$/;"	f
dvfloa	.\semtex\veclib\xvfloa.c	/^void dvfloa (integer n,$/;"	f
dvhypot	.\semtex\veclib\xvhypot.c	/^void dvhypot (integer n,$/;"	f
dvlg10	.\semtex\veclib\xvlg10.c	/^void dvlg10 (integer n, const double* x, integer incx,$/;"	f
dvlog	.\semtex\veclib\xvlog.c	/^void dvlog (integer n, const double* x, integer incx,$/;"	f
dvmag	.\semtex\veclib\xvhypot.c	/^void dvmag (int_t n,$/;"	f
dvmul	.\semtex\veclib\xvmul.c	/^void dvmul (integer n,$/;"	f
dvneg	.\semtex\veclib\xvneg.c	/^void dvneg (integer n, const double* x, integer incx,$/;"	f
dvnormal	.\semtex\veclib\xrand.c	/^void dvnormal (integer n, double mean, double sdev, double* x, integer incx)$/;"	f
dvpoly	.\semtex\veclib\xvpoly.c	/^void dvpoly (integer n,$/;"	f
dvpow	.\semtex\veclib\xvpow.c	/^void dvpow (integer n, $/;"	f
dvrandom	.\semtex\veclib\xrand.c	/^void dvrandom (integer n, double* x, integer incx)$/;"	f
dvrecp	.\semtex\veclib\xvrecp.c	/^void dvrecp (integer n, const double* x, integer incx,$/;"	f
dvsgn	.\semtex\veclib\xvsgn.c	/^void dvsgn (integer n, const double* x, integer incx,$/;"	f
dvsin	.\semtex\veclib\xvsin.c	/^void dvsin (integer n, const double* x, integer incx,$/;"	f
dvsqrt	.\semtex\veclib\xvsqrt.c	/^void dvsqrt (integer n, const double* x, integer incx,$/;"	f
dvsub	.\semtex\veclib\xvsub.c	/^void dvsub (integer n,$/;"	f
dvvmvt	.\semtex\veclib\xvvmvt.c	/^void dvvmvt (integer n,$/;"	f
dvvpvt	.\semtex\veclib\xvvpvt.c	/^void dvvpvt (integer n,$/;"	f
dvvtvm	.\semtex\veclib\xvvtvm.c	/^void dvvtvm (integer n, $/;"	f
dvvtvp	.\semtex\veclib\xvvtvp.c	/^void dvvtvp (integer n,$/;"	f
dvvtvvtm	.\semtex\veclib\xvvtvvtm.c	/^void dvvtvvtm (integer n,$/;"	f
dvvtvvtp	.\semtex\veclib\xvvtvvtp.c	/^void dvvtvvtp (integer n,$/;"	f
dvvvtm	.\semtex\veclib\xvvvtm.c	/^void dvvvtm (integer n,$/;"	f
dvvvtt	.\semtex\veclib\xvvvtt.c	/^void dvvvtt (integer n,$/;"	f
dzero	.\semtex\veclib\xzero.c	/^void dzero (integer n, double* x, integer incx)$/;"	f
dzfft	.\semtex\veclib\xfft.c	/^void dzfft(int N, zomplex *Data, int TabLen, const zomplex *Wtab, int Forward)$/;"	f
dzpfft	.\semtex\veclib\xfft.c	/^void dzpfft(int N, zomplex *Zbuf, int Forward)$/;"	f
edgemaps	.\semtex\femlib\mapping.c	/^void edgemaps (const integer nk ,$/;"	f
efopen	.\semtex\veclib\util.c	/^FILE *efopen (const char *file, const char *mode)$/;"	f
eigenvector	.\semtex\utility\tensorcalcs.c	/^void eigenvector(const double T[9], double z, double e[3])$/;"	f
elmt	.\semtex\src\bcmgr.h	/^typedef struct bctriple { char group; int_t elmt; int_t side; } BCtriple;$/;"	m	struct:bctriple
elmt	.\semtex\src\domain.h	/^  vector<Element*>&    elmt;	\/\/ Shared for equal-order interpolations.$/;"	m	class:Domain
emap	.\semtex\femlib\mapping.c	/^  integer*        emap ;$/;"	m	struct:mapping	file:
emask	.\semtex\src\numbersys.h	/^  const int_t*  emask   () const { return _emask;             }$/;"	f	class:NumberSys
endNode	.\semtex\src\mesh.h	/^    Node*         endNode;$/;"	m	class:Mesh::Side
enstrophy	.\semtex\utility\tensorcalcs.c	/^double enstrophy(const double VG[9])$/;"	f
equispacedMesh	.\semtex\femlib\femlib.h	/^  static void equispacedMesh (const int_t np, real_t* z)$/;"	f	class:Femlib
erfcFilter	.\semtex\femlib\femlib.h	/^  static void erfcFilter (const int_t N, const real_t p, const real_t s,$/;"	f	class:Femlib
err_lev	.\semtex\veclib\cveclib.h	/^enum    err_lev {WARNING, ERROR, REMARK};$/;"	g
error	.\semtex\utility\convert.c	/^static void error (const char *s)$/;"	f	file:
estimateCFL	.\semtex\src\analysis.C	/^void Analyser::estimateCFL () const$/;"	f	class:Analyser
evaluate	.\semtex\src\boundary.C	/^void Boundary::evaluate (const int_t plane,$/;"	f	class:Boundary
evaluate	.\semtex\src\condition.C	/^void Essential::evaluate (const int_t    np  ,$/;"	f	class:Essential
evaluate	.\semtex\src\condition.C	/^void EssentialFunction:: evaluate (const int_t    np  ,$/;"	f	class:EssentialFunction
evaluate	.\semtex\src\condition.C	/^void Mixed::evaluate (const int_t    np  ,$/;"	f	class:Mixed
evaluate	.\semtex\src\condition.C	/^void Natural::evaluate (const int_t    np  ,$/;"	f	class:Natural
evaluate	.\semtex\src\condition.C	/^void NaturalFunction::evaluate (const int_t    np  ,$/;"	f	class:NaturalFunction
evaluate	.\semtex\src\condition.C	/^void NaturalHOPBC::evaluate (const int_t    np  ,$/;"	f	class:NaturalHOPBC
evaluate	.\semtex\src\element.C	/^void Element::evaluate (const char* func,$/;"	f	class:Element
evaluate	.\semtex\src\pressure.C	/^void PBCmgr::evaluate (const int_t   id   ,$/;"	f	class:PBCmgr
evaluateBoundaries	.\semtex\src\field.C	/^void Field::evaluateBoundaries (const int_t step   ,$/;"	f	class:Field
evaluateM0Boundaries	.\semtex\src\field.C	/^void Field::evaluateM0Boundaries (const int_t step)$/;"	f	class:Field
exchange	.\semtex\femlib\femlib.h	/^  static void exchange  (float* data, const int_t nZ,$/;"	f	class:Femlib
exchange	.\semtex\femlib\femlib.h	/^  static void exchange  (int_t* data,  const int_t nZ,$/;"	f	class:Femlib
exchange	.\semtex\femlib\femlib.h	/^  static void exchange  (real_t* data, const int_t nZ,$/;"	f	class:Femlib
exchange_kind	.\semtex\femlib\cfemdef.h	/^typedef enum exchange_kind {$/;"	g
expr	.\semtex\femlib\initial.y	/^expr:     NUMBER$/;"	l
extent	.\semtex\src\mesh.C	/^void Mesh::extent (Point& lo,$/;"	f	class:Mesh
factor	.\semtex\femlib\cfemlib.h	147;"	d
false	.\semtex\include\Boolean.h	/^    enum constants { false = 0, true = 1 };$/;"	e	enum:Boolean::constants
fbrent	.\semtex\femlib\netlib.f	/^      double precision function fbrent(/;"	f
feml_file	.\semtex\src\feml.h	/^  ifstream  feml_file;		  \/\/ Input stream.$/;"	m	class:FEML
feml_root	.\semtex\src\feml.h	/^  char*     feml_root;		  \/\/ Name of FEML file, suffix removed.$/;"	m	class:FEML
fft1	.\semtex\femlib\femlib.h	/^  static void fft1 (real_t* a, real_t* c, const int_t& n,$/;"	f	class:Femlib
field	.\semtex\src\bcmgr.h	/^  const char*        field        () const { return _fields; }$/;"	f	class:BCmgr
field	.\semtex\src\bsys.h	/^  char                     field () const { return _field_name; }$/;"	f	class:BoundarySys
field	.\semtex\src\domain.h	/^  char* field;		\/\/ Lower-case single character field names.$/;"	m	class:Domain
field	.\semtex\utility\avgdump.c	/^  char     field [STR_MAX]  ;$/;"	m	struct:__anon5	file:
field	.\semtex\utility\rstress.c	/^  char     field [STR_MAX]  ;$/;"	m	struct:__anon8	file:
fieldNames	.\semtex\utility\eneq.C	/^static const char* fieldNames (map<char, AuxField*>& u)$/;"	f	file:
fields	.\semtex\src\numbersys.h	/^  const char*   fields  () const { return _fields;            }$/;"	f	class:NumberSys
fill	.\semtex\veclib\veclib.h	/^  static void fill (int_t n, double alpha, double* x, int_t incx)$/;"	f	class:Veclib
fill	.\semtex\veclib\veclib.h	/^  static void fill (int_t n, float  alpha, float*  x, int_t incx)$/;"	f	class:Veclib
fill	.\semtex\veclib\veclib.h	/^  static void fill (int_t n, int_t  alpha, int_t*  x, int_t incx)$/;"	f	class:Veclib
filter	.\semtex\utility\noiz.c	/^static void filter (double*   data  ,$/;"	f	file:
finalize	.\semtex\femlib\femlib.h	/^  static void finalize () $/;"	f	class:Femlib
first	.\semtex\femlib\message.c	/^static int first (int n, const int* x)$/;"	f	file:
first	.\semtex\include\List.h	/^  T    first  () const { return (nel) ? head -> datum : 0; }$/;"	f	class:List
first	.\semtex\veclib\veclib.h	/^  static int_t first (int_t n, const int_t *x, int_t incx)$/;"	f	class:Veclib
fixPeriodic	.\semtex\src\mesh.C	/^void Mesh::fixPeriodic()$/;"	f	class:Mesh
fld	.\semtex\src\bcmgr.h	/^    char       fld  ;$/;"	m	class:BCmgr::CondRecd
flds	.\semtex\src\data2df.h	/^  char*  flds;$/;"	m	class:Header
fmask	.\semtex\src\numbersys.h	/^  int_t         fmask   () const { return _nglobal - _nsolve; }$/;"	f	class:NumberSys
fnroot	.\semtex\femlib\cfemlib.h	121;"	d
fnroot	.\semtex\femlib\femlib.h	/^  static void fnroot (int_t& r, int_t* x, int_t* a, int_t* m,$/;"	f	class:Femlib
format	.\semtex\utility\avgdump.c	/^  char     format[STR_MAX]  ;$/;"	m	struct:__anon5	file:
format	.\semtex\utility\rstress.c	/^  char     format[STR_MAX]  ;$/;"	m	struct:__anon8	file:
format	.\semtex\veclib\xbrev.c	/^void format (char* s)$/;"	f
fp_fld	.\semtex\utility\sem2tec.c	/^static FILE    *fp_fld = 0,          \/* default input files *\/$/;"	v	file:
fp_fld	.\semtex\utility\sem2vtk.c	/^static FILE    *fp_fld = 0,          \/* default input files *\/$/;"	v	file:
fp_msh	.\semtex\utility\sem2tec.c	/^               *fp_msh = 0;$/;"	v	file:
fp_msh	.\semtex\utility\sem2vtk.c	/^               *fp_msh = 0;$/;"	v	file:
fprintf	.\semtex\utility\preplot.c	446;"	d	file:
freeC3matrix	.\semtex\veclib\memory.c	/^void freeC3matrix (complex ***t, integer nrl, integer ncl, integer ndl)$/;"	f
freeCmatrix	.\semtex\veclib\memory.c	/^void freeCmatrix (complex **m, integer nrl, integer ncl)$/;"	f
freeCvector	.\semtex\veclib\memory.c	/^void freeCvector (complex *v, integer nl)$/;"	f
freeD3matrix	.\semtex\veclib\memory.c	/^void freeD3matrix (double ***t, integer nrl, integer ncl, integer ndl)$/;"	f
freeDmatrix	.\semtex\veclib\memory.c	/^void freeDmatrix (double **m, integer nrl, integer ncl)$/;"	f
freeDvector	.\semtex\veclib\memory.c	/^void freeDvector (double *v, integer nl)$/;"	f
freeI3matrix	.\semtex\veclib\memory.c	/^void freeI3matrix (integer ***t, integer nrl, integer ncl, integer ndl)$/;"	f
freeImatrix	.\semtex\veclib\memory.c	/^void freeImatrix (integer **m, integer nrl, integer ncl)$/;"	f
freeIvector	.\semtex\veclib\memory.c	/^void freeIvector (integer *v, integer nl)$/;"	f
freeS3matrix	.\semtex\veclib\memory.c	/^void freeS3matrix (float ***t, integer nrl, integer ncl, integer ndl)$/;"	f
freeSmatrix	.\semtex\veclib\memory.c	/^void freeSmatrix (float **m, integer nrl, integer ncl)$/;"	f
freeSvector	.\semtex\veclib\memory.c	/^void freeSvector (float *v, integer nl)$/;"	f
freeVector	.\semtex\veclib\cveclib.h	91;"	d
freeZ3matrix	.\semtex\veclib\memory.c	/^void freeZ3matrix (zomplex ***t, integer nrl, integer ncl, integer ndl)$/;"	f
freeZmatrix	.\semtex\veclib\memory.c	/^void freeZmatrix (zomplex **m, integer nrl, integer ncl)$/;"	f
freeZvector	.\semtex\veclib\memory.c	/^void freeZvector (zomplex *v, integer nl)$/;"	f
free_dmatrix	.\semtex\femlib\tests\polylib_test.c	/^void free_dmatrix(double **m2, int nrl, int ncl)$/;"	f
frmt	.\semtex\src\data2df.h	/^  char*  frmt;$/;"	m	class:Header
fscanf	.\semtex\utility\preplot.c	449;"	d	file:
fwords	.\semtex\femlib\femlib.h	/^  static int_t  fwords (int_t* ni, int_t* nd, int_t* ns)$/;"	f	class:Femlib
gID	.\semtex\src\mesh.h	/^    int_t gID;$/;"	m	class:Mesh::Node
gID	.\semtex\src\mesh.h	/^    vector<int_t> gID;$/;"	m	class:Mesh::Side
ga	.\semtex\src\mesh.C	/^static Point             ga, gp;$/;"	v	file:
gammaF	.\semtex\femlib\polyops.c	/^static real_t gammaF (real_t x)$/;"	f	file:
gasdev	.\semtex\utility\noiz.c	/^static double gasdev (long *idum)$/;"	f	file:
gasdev	.\semtex\veclib\xrand.c	/^static double gasdev (long* idum)$/;"	f	file:
gathr	.\semtex\veclib\veclib.h	/^  static void gathr (int_t n, const double* x, const int_t* y, double* z)$/;"	f	class:Veclib
gathr	.\semtex\veclib\veclib.h	/^  static void gathr (int_t n, const float*  x, const int_t* y, float*  z)$/;"	f	class:Veclib
gathr	.\semtex\veclib\veclib.h	/^  static void gathr (int_t n, const int_t*  x, const int_t* y, int_t*  z)$/;"	f	class:Veclib
gathr_scatr	.\semtex\veclib\veclib.h	/^  static void gathr_scatr (int_t n, const double* w, const int_t*  x,$/;"	f	class:Veclib
gathr_scatr	.\semtex\veclib\veclib.h	/^  static void gathr_scatr (int_t n, const float* w, const int_t* x,$/;"	f	class:Veclib
gathr_scatr	.\semtex\veclib\veclib.h	/^  static void gathr_scatr (int_t n, const int_t* w, const int_t* x,$/;"	f	class:Veclib
gathr_scatr_sum	.\semtex\veclib\veclib.h	/^  static void gathr_scatr_sum (int_t n, const double*  w, const int_t* x,$/;"	f	class:Veclib
gathr_scatr_sum	.\semtex\veclib\veclib.h	/^  static void gathr_scatr_sum (int_t n, const float*   w, const int_t* x,$/;"	f	class:Veclib
gathr_scatr_sum	.\semtex\veclib\veclib.h	/^  static void gathr_scatr_sum (int_t n, const int_t* w, const int_t* x,$/;"	f	class:Veclib
gathr_sum	.\semtex\veclib\veclib.h	/^  static void gathr_sum (int_t n,$/;"	f	class:Veclib
gcurve	.\semtex\src\mesh.C	/^static vector<spline2D*> gcurve;$/;"	v	file:
gecon	.\semtex\veclib\lapack.h	/^  static void gecon (const char* norm, const int_t& n, const double* a,$/;"	f	class:Lapack
gecon	.\semtex\veclib\lapack.h	/^  static void gecon (const char* norm, const int_t& n, const float*  a,$/;"	f	class:Lapack
geev	.\semtex\veclib\lapack.h	/^  static void geev (const char* uplo, const char* lrev, const int_t& n,$/;"	f	class:Lapack
gemm	.\semtex\veclib\blas.h	/^  static void gemm (const char* ta, const char* tb, $/;"	f	class:Blas
gemm	.\semtex\veclib\blas.h	/^  static void gemm (const char* ta, const char* tb,$/;"	f	class:Blas
gemv	.\semtex\veclib\blas.h	/^  static void gemv (const char* trans, const integer& m, const integer& n,$/;"	f	class:Blas
genrcm	.\semtex\femlib\cfemlib.h	116;"	d
genrcm	.\semtex\femlib\femlib.h	/^  static void genrcm (const int_t& n, int_t* x, int_t* a,$/;"	f	class:Femlib
geometry	.\semtex\src\edge.C	/^void Edge::geometry (real_t* X   ,$/;"	f	class:Edge
ger	.\semtex\veclib\blas.h	/^  static void ger (const integer& m, const integer& n, const double& alpha,$/;"	f	class:Blas
ger	.\semtex\veclib\blas.h	/^  static void ger (const integer& m, const integer& n, const float&  alpha,$/;"	f	class:Blas
gesv	.\semtex\veclib\lapack.h	/^  static void gesv (const int_t& n, const int_t& nrhs,$/;"	f	class:Lapack
get	.\semtex\src\edge.C	/^void Edge::get (const real_t* src,$/;"	f	class:Edge
getAngl	.\semtex\src\mesh.C	/^static real_t getAngl (const real_t& s)$/;"	f	file:
getArgs	.\semtex\utility\sem2nek.C	/^static void getArgs (int    argc   ,$/;"	f	file:
getBCedges	.\semtex\src\bcmgr.h	/^  vector<BCtriple*>& getBCedges   () { return _elmtbc; }$/;"	f	class:BCmgr
getCondition	.\semtex\src\bcmgr.C	/^Condition* BCmgr::getCondition (const char  group,$/;"	f	class:BCmgr
getDump	.\semtex\utility\addfield.C	/^static bool getDump (Domain*   D   ,$/;"	f	file:
getDump	.\semtex\utility\eneq.C	/^static bool getDump (ifstream&             file,$/;"	f	file:
getDump	.\semtex\utility\integral.C	/^static bool getDump (istream&           file,$/;"	f	file:
getDump	.\semtex\utility\interp.C	/^static int_t getDump (ifstream&          file,$/;"	f	file:
getDump	.\semtex\utility\lowpass.C	/^static bool getDump (istream&          ifile,$/;"	f	file:
getDump	.\semtex\utility\phase.C	/^static int_t getDump (istream&           ifile,$/;"	f	file:
getDump	.\semtex\utility\probe.C	/^static int_t getDump (ifstream&          file,$/;"	f	file:
getDump	.\semtex\utility\project.C	/^static bool getDump (istream&           ifile ,$/;"	f	file:
getDump	.\semtex\utility\traction.C	/^static bool getDump (Domain*    D   ,$/;"	f	file:
getDump	.\semtex\utility\transform.C	/^static bool getDump (istream&          ifile,$/;"	f	file:
getEssential	.\semtex\src\field.C	/^void Field::getEssential (const real_t*            src,$/;"	f	class:Field
getGeom	.\semtex\src\mesh.C	/^spline2D* Spline::getGeom (const char* fname)$/;"	f	class:Spline
getMesh	.\semtex\utility\eneq.C	/^static void getMesh (const char*       session,$/;"	f	file:
getName	.\semtex\src\data2df.h	/^  char getName () { return _name; }$/;"	f	class:Data2DF
getNumberSys	.\semtex\src\bcmgr.C	/^NumberSys* BCmgr::getNumberSys (const char  name,$/;"	f	class:BCmgr
getQ	.\semtex\src\flowrate.C	/^real Flowrate::getQ () const$/;"	f	class:Flowrate
getSize	.\semtex\include\Array.h	/^  long getSize () const       { return num_elts; }$/;"	f	class:vector
getSize	.\semtex\include\Array.h	/^  long getSize () const      { return nr * nc; }$/;"	f	class:matrix
get_data	.\semtex\utility\convert.c	/^static void get_data (FILE*        fp      ,$/;"	f	file:
getargs	.\semtex\dns\drive.C	/^static void getargs (int    argc   ,$/;"	f	file:
getargs	.\semtex\elliptic\drive.C	/^static void getargs (int    argc   ,$/;"	f	file:
getargs	.\semtex\femlib\tests\dealiasmult.C	/^void getargs (int       argc,$/;"	f
getargs	.\semtex\femlib\tests\dpt.C	/^static void getargs (int       argc,$/;"	f	file:
getargs	.\semtex\femlib\tests\glzw.C	/^static void getargs (int     argc,$/;"	f	file:
getargs	.\semtex\femlib\tests\lagder.C	/^void getargs (int       argc,$/;"	f
getargs	.\semtex\femlib\tests\lagint.C	/^void getargs (int       argc,$/;"	f
getargs	.\semtex\femlib\tests\lagpro.C	/^void getargs (int       argc,$/;"	f
getargs	.\semtex\femlib\tests\polyint.C	/^void getargs (int       argc,$/;"	f
getargs	.\semtex\femlib\tests\shapes.C	/^static void getargs (int     argc ,$/;"	f	file:
getargs	.\semtex\femlib\tests\testBVD.C	/^static void getargs (int     argc ,$/;"	f	file:
getargs	.\semtex\utility\addfield.C	/^static void getargs (int    argc   ,$/;"	f	file:
getargs	.\semtex\utility\avgdump.c	/^static void getargs (int    argc   ,$/;"	f	file:
getargs	.\semtex\utility\calc.C	/^static void getargs (int       argc ,$/;"	f	file:
getargs	.\semtex\utility\compare.C	/^static void getargs (int       argc ,$/;"	f	file:
getargs	.\semtex\utility\convert.c	/^static void getargs (int     argc  ,$/;"	f	file:
getargs	.\semtex\utility\data2df_template.C	/^static void getargs (int       argc ,$/;"	f	file:
getargs	.\semtex\utility\eneq.C	/^static void getargs (int          argc   ,$/;"	f	file:
getargs	.\semtex\utility\enumerate.C	/^static void getargs (int    argc   , $/;"	f	file:
getargs	.\semtex\utility\integral.C	/^static void getargs (int    argc   ,$/;"	f	file:
getargs	.\semtex\utility\interp.C	/^static void getargs (int    argc   ,$/;"	f	file:
getargs	.\semtex\utility\lowpass.C	/^static void getargs (int       argc ,$/;"	f	file:
getargs	.\semtex\utility\meshpr.C	/^static void getargs (int     argc   , $/;"	f	file:
getargs	.\semtex\utility\moden.c	/^static void getargs (int    argc ,$/;"	f	file:
getargs	.\semtex\utility\noiz.c	/^static void getargs (int     argc  ,$/;"	f	file:
getargs	.\semtex\utility\normal.c	/^static void getargs (int     argc,$/;"	f	file:
getargs	.\semtex\utility\phase.C	/^static void getargs (int       argc ,$/;"	f	file:
getargs	.\semtex\utility\probe.C	/^static void getargs (int    argc     ,$/;"	f	file:
getargs	.\semtex\utility\project.C	/^static void getargs (int       argc ,$/;"	f	file:
getargs	.\semtex\utility\rectmesh.C	/^static void getargs (int       argc ,$/;"	f	file:
getargs	.\semtex\utility\repeatxy.c	/^static void getargs (int    argc ,$/;"	f	file:
getargs	.\semtex\utility\repeatz.c	/^static void getargs (int    argc ,$/;"	f	file:
getargs	.\semtex\utility\rstress.c	/^static void getargs (int    argc   ,$/;"	f	file:
getargs	.\semtex\utility\traction.C	/^static void getargs (int        argc   ,$/;"	f	file:
getargs	.\semtex\utility\transform.C	/^static void getargs (int       argc ,$/;"	f	file:
getargs	.\semtex\utility\wallmesh.C	/^static void getargs (int       argc,$/;"	f	file:
getargs	.\semtex\utility\xplane.c	/^static void getargs (int    argc ,$/;"	f	file:
getdata	.\semtex\utility\avgdump.c	/^static void getdata (FILE* f,$/;"	f	file:
getdata	.\semtex\utility\rstress.c	/^static void getdata (FILE* f,$/;"	f	file:
getfields	.\semtex\utility\enumerate.C	/^static void getfields (FEML*      file     ,$/;"	f	file:
getforcing	.\semtex\elliptic\drive.C	/^static void getforcing (const char* session  , $/;"	f	file:
getheader	.\semtex\utility\avgdump.c	/^static void getheader (FILE* f,$/;"	f	file:
getheader	.\semtex\utility\rstress.c	/^static void getheader (FILE* f,$/;"	f	file:
getline	.\semtex\utility\slit.c	/^int getline(FILE *fp, char coltext[][MAXSTR], int *nwords)$/;"	f
getoptions	.\semtex\elliptic\drive.C	/^static void getoptions (FEML*  feml ,$/;"	f	file:
getrf	.\semtex\veclib\lapack.h	/^  static void getrf (const int_t& m, const int_t& n, double *a,$/;"	f	class:Lapack
getrf	.\semtex\veclib\lapack.h	/^  static void getrf (const int_t& m, const int_t& n, float  *a,$/;"	f	class:Lapack
getri	.\semtex\veclib\lapack.h	/^  static void getri (const int_t& n, double *a, const int_t& lda,$/;"	f	class:Lapack
getri	.\semtex\veclib\lapack.h	/^  static void getri (const int_t& n, float  *a, const int_t& lda,$/;"	f	class:Lapack
getrs	.\semtex\veclib\lapack.h	/^  static void getrs (const char *trans, const int_t& n, const int_t& nrhs,$/;"	f	class:Lapack
getrs	.\semtex\veclib\lapack.h	/^  static void getrs (const char* trans, const int_t& n, const int_t& nrhs,$/;"	f	class:Lapack
global2local	.\semtex\src\element.C	/^void Element::global2local (real_t*       tgt     ,$/;"	f	class:Element
global2local	.\semtex\src\field.C	/^void Field::global2local (const real_t*    src,$/;"	f	class:Field
global2localSC	.\semtex\src\element.C	/^void Element::global2localSC (const real_t* RHS ,$/;"	f	class:Element
globalBandwidth	.\semtex\utility\enumerate.C	/^int_t Nsys::globalBandwidth () const$/;"	f	class:Nsys
gp	.\semtex\src\mesh.C	/^static Point             ga, gp;$/;"	v	file:
gpfa	.\semtex\femlib\femlib.h	/^  static void gpfa (real_t* a, real_t* b, const real_t* trig,$/;"	f	class:Femlib
grad	.\semtex\src\element.C	/^void Element::grad (real_t* tgtX,$/;"	f	class:Element
grad2	.\semtex\femlib\femlib.h	/^  static void grad2 (const real_t* x, const real_t* y, real_t* xr, real_t* ys,$/;"	f	class:Femlib
gradX	.\semtex\src\element.C	/^void Element::gradX (const real_t* xr,$/;"	f	class:Element
gradY	.\semtex\src\element.C	/^void Element::gradY (const real_t* yr,$/;"	f	class:Element
group	.\semtex\src\bcmgr.h	/^typedef struct bctriple { char group; int_t elmt; int_t side; } BCtriple;$/;"	m	struct:bctriple
group	.\semtex\src\mesh.h	/^    union { Side* mateSide; char group; };$/;"	m	union:Mesh::Side::__anon3
groupInfo	.\semtex\src\bcmgr.C	/^const char* BCmgr::groupInfo (const char name) const$/;"	f	class:BCmgr
grp	.\semtex\src\bcmgr.h	/^    char       grp  ;$/;"	m	class:BCmgr::CondRecd
gs	.\semtex\src\mesh.C	/^static spline2D*         gs;$/;"	v	file:
hdr_fmt	.\semtex\utility\avgdump.c	/^static char* hdr_fmt[] = {	 \/* -- Header output formatting. *\/$/;"	v	file:
hdr_fmt	.\semtex\utility\moden.c	/^static const char *hdr_fmt[] = { $/;"	v	file:
hdr_fmt	.\semtex\utility\noiz.c	/^static const char *hdr_fmt[] = { $/;"	v	file:
hdr_fmt	.\semtex\utility\repeatxy.c	/^static const char *hdr_fmt[] = { $/;"	v	file:
hdr_fmt	.\semtex\utility\repeatz.c	/^static const char *hdr_fmt[] = { $/;"	v	file:
hdr_fmt	.\semtex\utility\rstress.c	/^static char* hdr_fmt[] = {	 \/* -- Header output formatting. *\/$/;"	v	file:
hdr_fmt	.\semtex\utility\xplane.c	/^static const char *hdr_fmt[] = { $/;"	v	file:
head	.\semtex\include\Clist.h	/^  Node* head;$/;"	m	class:CircularList
head	.\semtex\include\List.h	/^  ListNode<T>* head;$/;"	m	class:List
header	.\semtex\utility\rectmesh.C	/^static void header ()$/;"	f	file:
header	.\semtex\utility\topre.c	/^static void header(void)$/;"	f	file:
hgc	.\semtex\femlib\polylib.h	86;"	d
hgl	.\semtex\femlib\polylib.h	81;"	d
hglc	.\semtex\femlib\polylib.h	88;"	d
hgll	.\semtex\femlib\polylib.h	84;"	d
hgrc	.\semtex\femlib\polylib.h	87;"	d
hgrj	.\semtex\femlib\polylib.h	106;"	d
hgrl	.\semtex\femlib\polylib.h	107;"	d
hgrlm	.\semtex\femlib\polylib.h	82;"	d
hgrlp	.\semtex\femlib\polylib.h	83;"	d
highAxis	.\semtex\utility\enumerate.C	/^bool Nsys::highAxis() const$/;"	f	class:Nsys
i3matrix	.\semtex\veclib\memory.c	/^integer ***i3matrix (integer nrl, integer nrh,$/;"	f
iAdopted	.\semtex\femlib\family.c	/^static integer* iAdopted (const integer  size,$/;"	f	file:
iHead	.\semtex\femlib\family.c	/^static iVect* iHead = 0;$/;"	v	file:
iVect	.\semtex\femlib\family.c	/^} iVect;$/;"	t	typeref:struct:ivect	file:
iabandon	.\semtex\femlib\family.c	/^void iabandon (integer** vect)$/;"	f
iadopt	.\semtex\femlib\family.c	/^void iadopt (const integer size,$/;"	f
iamax	.\semtex\veclib\blas.h	/^  static integer iamax (const integer& n, const double* x, const integer& incx)$/;"	f	class:Blas
iamax	.\semtex\veclib\blas.h	/^  static integer iamax (const integer& n, const float *x, const integer& incx)$/;"	f	class:Blas
ibrev	.\semtex\veclib\xbrev.c	/^void ibrev (integer n,$/;"	f
iclip	.\semtex\veclib\veclib.h	/^  static void iclip (int_t n, const  int_t alpha, const int_t   beta,$/;"	f	class:Veclib
iclip	.\semtex\veclib\veclib.h	/^  static void iclip (int_t n, const double alpha,  const double beta,$/;"	f	class:Veclib
iclip	.\semtex\veclib\veclib.h	/^  static void iclip (int_t n, const float alpha,   const float  beta,$/;"	f	class:Veclib
iclip	.\semtex\veclib\xclip.c	/^void iclip (integer n, const integer alpha, const integer beta,$/;"	f
iclipdn	.\semtex\veclib\xclip.c	/^void iclipdn (integer n, const integer alpha,$/;"	f
iclipup	.\semtex\veclib\xclip.c	/^void iclipup (integer n, const integer alpha,$/;"	f
icndst	.\semtex\veclib\xcndst.c	/^void icndst (integer n,$/;"	f
icopy	.\semtex\veclib\xcopy.c	/^void icopy (integer n, const integer* x, integer incx,$/;"	f
icount	.\semtex\veclib\icount.c	/^integer icount (integer n, const integer* x, integer incx)$/;"	f
idamax	.\semtex\veclib\cveclib.h	751;"	d
idmax	.\semtex\veclib\ixmax.c	/^integer idmax (integer n, const double* x, integer incx)$/;"	f
idmin	.\semtex\veclib\ixmin.c	/^integer idmin (integer n, const double* x, integer incx)$/;"	f
ifile	.\gmsh2sem.py	/^ifile = open (infilename, 'r')$/;"	v
ifill	.\semtex\veclib\xfill.c	/^void ifill (integer n, integer alpha, integer* x, integer incx)$/;"	f
ifirst	.\semtex\veclib\ifirst.c	/^integer ifirst (integer n, const integer* x, integer incx)$/;"	f
iformat	.\semtex\utility\convert.c	/^static int iformat (void)$/;"	f	file:
iformat	.\semtex\veclib\xbrev.c	/^integer iformat (void)$/;"	f
igathr	.\semtex\veclib\xgathr.c	/^void igathr (integer n, const integer* x, const integer* y, integer* z)$/;"	f
igathr_scatr	.\semtex\veclib\xgathr_scatr.c	/^void igathr_scatr (integer n,$/;"	f
igathr_scatr_sum	.\semtex\veclib\xgathr_scatr_sum.c	/^void igathr_scatr_sum (integer n,$/;"	f
igathr_sum	.\semtex\veclib\xgathr_sum.c	/^void igathr_sum (integer n, const integer* x, const integer* y, integer* z)$/;"	f
igjm	.\semtex\femlib\polylib.h	111;"	d
igljm	.\semtex\femlib\polylib.h	113;"	d
igllm	.\semtex\femlib\polylib.h	117;"	d
iglm	.\semtex\femlib\polylib.h	115;"	d
igrjm	.\semtex\femlib\polylib.h	112;"	d
igrlm	.\semtex\femlib\polylib.h	116;"	d
iiclip	.\semtex\veclib\xiclip.c	/^void iiclip (integer n, const integer alpha, const integer beta,$/;"	f
iimax	.\semtex\veclib\ixmax.c	/^integer iimax (integer n, const integer* x, integer incx)$/;"	f
iimin	.\semtex\veclib\ixmin.c	/^integer iimin (integer n, const integer* x, integer incx)$/;"	f
imask	.\semtex\veclib\xmask.c	/^void imask (integer n,$/;"	f
imass	.\semtex\src\numbersys.h	/^  const real_t* imass   () const { return _imass;             }$/;"	f	class:NumberSys
imatrix	.\semtex\veclib\memory.c	/^integer **imatrix (integer nrl, integer nrh,$/;"	f
imax	.\semtex\veclib\veclib.h	/^  static int_t imax (int_t n, const double* x, int_t incx)$/;"	f	class:Veclib
imax	.\semtex\veclib\veclib.h	/^  static int_t imax (int_t n, const float*  x, int_t incx)$/;"	f	class:Veclib
imax	.\semtex\veclib\veclib.h	/^  static int_t imax (int_t n, const int_t*  x, int_t incx)$/;"	f	class:Veclib
imin	.\semtex\veclib\veclib.h	/^  static int_t imin (int_t n, const double* x, int_t incx)$/;"	f	class:Veclib
imin	.\semtex\veclib\veclib.h	/^  static int_t imin (int_t n, const float*  x, int_t incx)$/;"	f	class:Veclib
imin	.\semtex\veclib\veclib.h	/^  static int_t imin (int_t n, const int_t*  x, int_t incx)$/;"	f	class:Veclib
inGroup	.\semtex\src\edge.h	/^  bool   inGroup     (const char* grp) const { return !(strcmp (grp,_group)); }$/;"	f	class:Edge
inMesh	.\semtex\src\particle.h	/^  const  Element* inMesh    () const { return _E;      }$/;"	f	class:FluidParticle
ineg	.\semtex\veclib\xneg.c	/^void ineg (integer n, integer* x, integer incx)$/;"	f
infilename	.\gmsh2sem.py	/^    infilename = sys.argv[1]$/;"	v
initialise	.\semtex\src\statistics.C	/^void Statistics::initialise (const char* filename)$/;"	f	class:Statistics
initialize	.\semtex\femlib\femlib.h	/^  static void initialize (int* argc, char*** argv)$/;"	f	class:Femlib
inset	.\semtex\utility\preplot.c	/^Boolean inset(i,set)$/;"	f
int_t	.\semtex\femlib\cfemdef.h	/^typedef integer int_t;$/;"	t
integer	.\semtex\femlib\cfemdef.h	/^  typedef int     integer;$/;"	t
integer	.\semtex\femlib\cfemdef.h	/^  typedef long int integer;$/;"	t
integral	.\semtex\src\element.C	/^real_t Element::integral (const char* func,$/;"	f	class:Element
integral	.\semtex\src\element.C	/^real_t Element::integral (const real_t* src,$/;"	f	class:Element
integrate	.\semtex\src\particle.C	/^void FluidParticle::integrate ()$/;"	f	class:FluidParticle
integrateNS	.\semtex\dns\integrate.C	/^void integrateNS (Domain*      D,$/;"	f
interpolate	.\semtex\utility\sem2tec.c	/^static void interpolate (void)$/;"	f	file:
interpolate	.\semtex\utility\sem2vtk.c	/^static void interpolate (void)$/;"	f	file:
interpolation	.\semtex\femlib\femlib.h	/^  static void interpolation (real_t*      inr   ,$/;"	f	class:Femlib
intmat_g	.\semtex\femlib\polyops.c	/^void intmat_g (const int_t   K   ,$/;"	f
intp	.\semtex\femlib\operators.c	/^void intp (real_t*      inr   ,  \/* 1D shape function at r                   *\/$/;"	f
invariants	.\semtex\utility\tensorcalcs.c	/^void invariants(const double T[9], double *I, double *II, double *III)$/;"	f
iramp	.\semtex\veclib\xramp.c	/^void iramp (integer n, integer alpha, integer beta, integer* x, integer incx)$/;"	f
irpow2	.\semtex\veclib\xfft.c	/^int irpow2(int k)$/;"	f
isadd	.\semtex\veclib\xsadd.c	/^void isadd (integer n, integer alpha, const integer* x, integer incx,$/;"	f
isamax	.\semtex\veclib\cveclib.h	775;"	d
iscatr	.\semtex\veclib\xscatr.c	/^void iscatr (integer n, const integer* x, const integer* y, integer* z)$/;"	f
iscatr_sum	.\semtex\veclib\xscatr_sum.c	/^void iscatr_sum (integer n, const integer* x, const integer* y, integer* z)$/;"	f
isdiv	.\semtex\veclib\xsdiv.c	/^void isdiv (integer n, integer alpha, const integer* x, integer incx,$/;"	f
iseed	.\semtex\veclib\xrand.c	/^static long    iseed  = 0;$/;"	v	file:
iseq	.\semtex\veclib\xseq.c	/^void iseq (integer n, integer alpha,$/;"	f
isge	.\semtex\veclib\xsge.c	/^void isge (integer n, integer alpha,$/;"	f
isle	.\semtex\veclib\xsle.c	/^void isle (integer n, integer alpha,$/;"	f
islt	.\semtex\veclib\xslt.c	/^void islt (integer n, integer alpha,$/;"	f
ismatch	.\semtex\src\mesh.h	/^  bool ismatch (const int_t e, const int_t s) const {$/;"	f	class:Curve
ismax	.\semtex\veclib\ixmax.c	/^integer ismax (integer n, const float* x, integer incx)$/;"	f
ismin	.\semtex\veclib\ixmin.c	/^integer ismin (integer n, const float* x, integer incx)$/;"	f
ismul	.\semtex\veclib\xsmul.c	/^void ismul (integer n, float alpha, const float* x, integer incx,$/;"	f
isne	.\semtex\veclib\xsne.c	/^void isne (integer n, integer alpha,$/;"	f
ispow2	.\semtex\veclib\xfft.c	/^int ispow2(int k)$/;"	f
isub	.\semtex\veclib\xssub.c	/^void isub (integer n, integer alpha, const integer* x, integer incx,$/;"	f
isum	.\semtex\veclib\xsum.c	/^integer isum (integer n, const integer* x, integer incx)$/;"	f
ivabs	.\semtex\veclib\xvabs.c	/^void ivabs (integer n, const integer* x, integer incx,$/;"	f
ivadd	.\semtex\veclib\xvadd.c	/^void ivadd (integer n,$/;"	f
ivalue	.\semtex\femlib\femlib.h	/^  static int_t ivalue (const char* s)$/;"	f	class:Femlib
ivalue	.\semtex\femlib\femlib.h	/^  static void ivalue (const char* s, const int_t p)$/;"	f	class:Femlib
ivamax	.\semtex\veclib\xvamax.c	/^void ivamax (integer n,$/;"	f
ivect	.\semtex\femlib\family.c	/^typedef struct ivect {$/;"	s	file:
ivector	.\semtex\veclib\memory.c	/^integer* ivector (integer nl, integer nh)$/;"	f
ivmul	.\semtex\veclib\xvmul.c	/^void ivmul (integer n,$/;"	f
ivneg	.\semtex\veclib\xvneg.c	/^void ivneg (integer n, const integer* x, integer incx,$/;"	f
ivsgn	.\semtex\veclib\xvsgn.c	/^void ivsgn (integer n, const integer* x, integer incx,$/;"	f
ivsub	.\semtex\veclib\xvsub.c	/^void ivsub (integer n,$/;"	f
izero	.\semtex\veclib\xzero.c	/^void izero (integer n, integer* x, integer incx)$/;"	f
jacobf	.\semtex\femlib\polylib.h	109;"	d
jacobz	.\semtex\femlib\polylib.c	183;"	d	file:
keyPosn	.\semtex\src\feml.h	/^  streampos keyPosn[KEYWORD_MAX]; \/\/ Locations corresponding to keywords.$/;"	m	class:FEML
keyWord	.\semtex\src\feml.h	/^  char*     keyWord[KEYWORD_MAX]; \/\/ Keywords used.$/;"	m	class:FEML
kinvis	.\semtex\utility\avgdump.c	/^  double   kinvis           ;$/;"	m	struct:__anon5	file:
kinvis	.\semtex\utility\rstress.c	/^  double   kinvis           ;$/;"	m	struct:__anon8	file:
lChead	.\semtex\femlib\operators.c	/^static legCoef* lChead = 0;$/;"	v	file:
lThead	.\semtex\femlib\operators.c	/^static legTran* lThead = 0;$/;"	v	file:
lambda2	.\semtex\utility\tensorcalcs.c	/^double lambda2(const double VG[9])$/;"	f
lany	.\semtex\veclib\lany.c	/^integer lany (integer n, const integer* x, integer incx)$/;"	f
ldsame	.\semtex\veclib\lxsame.c	/^integer ldsame (integer n,$/;"	f
legCoef	.\semtex\femlib\femlib.h	/^  static void legCoef (const int_t n,$/;"	f	class:Femlib
legCoef	.\semtex\femlib\operators.c	/^} legCoef;			\/* ----------------------------------------- *\/$/;"	t	typeref:struct:legcoef	file:
legTran	.\semtex\femlib\femlib.h	/^  static void legTran (const int_t n,$/;"	f	class:Femlib
legTran	.\semtex\femlib\operators.c	/^} legTran;			\/* ----------------------------------------- *\/$/;"	t	typeref:struct:legtran	file:
legcoef	.\semtex\femlib\operators.c	/^typedef struct legcoef {	\/* ---- Table for GLL Legendre transform --- *\/$/;"	s	file:
legtran	.\semtex\femlib\operators.c	/^typedef struct legtran {	\/* ---- GLL Legendre transform matrices  --- *\/$/;"	s	file:
length	.\semtex\include\List.h	/^  int  length () const { return nel;                       }$/;"	f	class:List
lengthScale	.\semtex\src\element.C	/^void Element::lengthScale (real_t* tgt) const$/;"	f	class:Element
lev	.\semtex\veclib\utility.h	/^enum lev {WARNING, ERROR, REMARK};$/;"	g
line	.\gmsh2sem.py	/^            line = ifile.readline()$/;"	v
line	.\gmsh2sem.py	/^        line = ifile.readline()$/;"	v
line	.\gmsh2sem.py	/^    line = ifile.readline()$/;"	v
line	.\gmsh2sem.py	/^    line = t1.readline()$/;"	v
line	.\gmsh2sem.py	/^    line = t2.readline()$/;"	v
link	.\semtex\include\List.h	/^    ListNode<T>* link;$/;"	m	class:ListNode
lisame	.\semtex\veclib\lxsame.c	/^integer lisame (integer n,$/;"	f
list	.\semtex\femlib\initial.y	/^list:     \/* nothing *\/$/;"	l
loadPoints	.\semtex\utility\interp.C	/^static void loadPoints (istream&        pfile,$/;"	f	file:
loadPoints	.\semtex\utility\probe.C	/^static int_t loadPoints (istream&        pfile,$/;"	f	file:
loadVals	.\semtex\femlib\tests\dpt.C	/^int loadVals (istream&        file,$/;"	f
loadVals	.\semtex\femlib\tests\lagder.C	/^int loadVals (istream&        file,$/;"	f
loadVals	.\semtex\femlib\tests\lagint.C	/^int_t loadVals (istream&        file,$/;"	f
loadVals	.\semtex\femlib\tests\lagpro.C	/^int loadVals (istream&        file,$/;"	f
loc	.\semtex\src\mesh.h	/^    Point loc;$/;"	m	class:Mesh::Node
local2global	.\semtex\src\element.C	/^void Element::local2global (const real_t* src     ,$/;"	f	class:Element
local2global	.\semtex\src\field.C	/^void Field::local2global (const real_t*    src,$/;"	f	class:Field
local2globalSum	.\semtex\src\element.C	/^void Element::local2globalSum (const real_t* src     ,$/;"	f	class:Element
local2globalSum	.\semtex\src\field.C	/^void Field::local2globalSum (const real_t*   src,$/;"	f	class:Field
local2globalSumSC	.\semtex\src\element.C	/^void Element::local2globalSumSC (real_t*       F   ,$/;"	f	class:Element
locate	.\semtex\src\element.C	/^bool Element::locate (const real_t x    ,$/;"	f	class:Element
locate	.\semtex\src\history.C	/^const Element* HistoryPoint::locate (const real_t      x   ,$/;"	f	class:HistoryPoint
location	.\semtex\src\particle.h	/^  const  Point&   location  () const { return _p;      } $/;"	f	class:FluidParticle
lssame	.\semtex\veclib\lxsame.c	/^integer lssame (integer n,$/;"	f
mChead	.\semtex\femlib\operators.c	/^static modCoef* mChead = 0;$/;"	v	file:
mHead	.\semtex\femlib\mapping.c	/^static Mapping* mHead = 0;$/;"	v	file:
mThead	.\semtex\femlib\operators.c	/^static modTran* mThead = 0;$/;"	v	file:
main	.\semtex\dns\drive.C	/^int main (int    argc,$/;"	f
main	.\semtex\elliptic\drive.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\dealiasmult.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\dpt.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\glzw.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\lagder.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\lagint.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\lagpro.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\polyint.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\polylib_test.c	/^main(){$/;"	f
main	.\semtex\femlib\tests\shapes.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\tensorproducts.C	/^int main()$/;"	f
main	.\semtex\femlib\tests\testBVD.C	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\testDLT.C	/^int main ()$/;"	f
main	.\semtex\femlib\tests\testDLT2.C	/^int main ()$/;"	f
main	.\semtex\femlib\tests\testDLT3.C	/^int main ()$/;"	f
main	.\semtex\femlib\tests\testFFT.C	/^int main ()$/;"	f
main	.\semtex\femlib\tests\testFFTW.C	/^int main ()$/;"	f
main	.\semtex\femlib\tests\testcfft.C	/^int main ()$/;"	f
main	.\semtex\femlib\tests\testmpi.c	/^int main (int    argc,$/;"	f
main	.\semtex\femlib\tests\testpoly.c	/^int main()$/;"	f
main	.\semtex\femlib\tests\testrand.C	/^int main (int argc, char** argv)$/;"	f
main	.\semtex\femlib\tests\testsine.C	/^int main ()$/;"	f
main	.\semtex\utility\addfield.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\avgdump.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\calc.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\chop.c	/^int main (int argc, char *argv[])$/;"	f
main	.\semtex\utility\compare.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\convert.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\data2df_template.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\eneq.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\enumerate.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\integral.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\interp.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\lowpass.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\meshpr.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\moden.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\noiz.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\normal.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\phase.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\preplot.c	/^main (argc,argv)$/;"	f
main	.\semtex\utility\probe.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\project.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\rectmesh.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\repeatxy.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\repeatz.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\rstress.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\sem2nek.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\sem2tec.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\sem2vtk.c	/^int main (int    argc,$/;"	f
main	.\semtex\utility\slit.c	/^main(int argc, char *argv[])$/;"	f
main	.\semtex\utility\topre.c	/^int main()$/;"	f
main	.\semtex\utility\traction.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\transform.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\wallmesh.C	/^int main (int    argc,$/;"	f
main	.\semtex\utility\xplane.c	/^int main (int    argc,$/;"	f
maintain	.\semtex\src\pressure.C	/^void PBCmgr::maintain (const int_t      step   ,$/;"	f	class:PBCmgr
makeBuf	.\semtex\utility\eneq.C	/^static void makeBuf (map<char, AuxField*>& output,$/;"	f	file:
mapping	.\semtex\femlib\mapping.c	/^typedef struct mapping {$/;"	s	file:
mapping	.\semtex\src\element.C	/^void Element::mapping ()$/;"	f	class:Element
mask	.\semtex\veclib\veclib.h	/^  static void mask (int_t n, const double*  w, int_t incw,$/;"	f	class:Veclib
mask	.\semtex\veclib\veclib.h	/^  static void mask (int_t n, const float*   w, int_t incw,$/;"	f	class:Veclib
mask	.\semtex\veclib\veclib.h	/^  static void mask (int_t n, const int_t* w, int_t incw,$/;"	f	class:Veclib
match	.\semtex\src\matrix.C	/^bool MatrixSys::match (const real_t     lambda2,$/;"	f	class:MatrixSys
matchBC	.\semtex\src\mesh.C	/^bool Mesh::matchBC (const char grp,$/;"	f	class:Mesh
mateElmt	.\semtex\src\mesh.h	/^    Elmt*         mateElmt;	\/\/ -- Doubles as a flag for union:$/;"	m	class:Mesh::Side
mateSide	.\semtex\src\mesh.h	/^    union { Side* mateSide; char group; };$/;"	m	union:Mesh::Side::__anon3
matrix	.\semtex\include\Array.h	/^  matrix () { $/;"	f	class:matrix
matrix	.\semtex\include\Array.h	/^  matrix (const long n_rows, const long n_cols) {$/;"	f	class:matrix
matrix	.\semtex\include\Array.h	/^  matrix (const matrix<T>& src) { $/;"	f	class:matrix
matrix	.\semtex\include\Array.h	/^template<class T> class matrix$/;"	c
meshElmt	.\semtex\src\mesh.C	/^void Mesh::meshElmt (const int_t   ID,$/;"	f	class:Mesh
meshSide	.\semtex\src\mesh.C	/^void Mesh::meshSide (const int_t   np     ,$/;"	f	class:Mesh
message	.\semtex\veclib\util.c	/^void message (const char *routine, const char *text, int level)$/;"	f
message_dexchange	.\semtex\femlib\message.c	/^void message_dexchange (double*       data,$/;"	f
message_drecv	.\semtex\femlib\message.c	/^void message_drecv (double*       data,$/;"	f
message_dsend	.\semtex\femlib\message.c	/^void message_dsend (double*       data,$/;"	f
message_iexchange	.\semtex\femlib\message.c	/^void message_iexchange (integer*      data,$/;"	f
message_init	.\semtex\femlib\message.c	/^void message_init (int*    argc,$/;"	f
message_irecv	.\semtex\femlib\message.c	/^void message_irecv (integer*      data,$/;"	f
message_isend	.\semtex\femlib\message.c	/^void message_isend (integer*      data,$/;"	f
message_sexchange	.\semtex\femlib\message.c	/^void message_sexchange (float*        data,$/;"	f
message_srecv	.\semtex\femlib\message.c	/^void message_srecv (float*        data,$/;"	f
message_ssend	.\semtex\femlib\message.c	/^void message_ssend (float*        data,$/;"	f
message_stop	.\semtex\femlib\message.c	/^void message_stop ()$/;"	f
message_sync	.\semtex\femlib\message.c	/^void message_sync ()$/;"	f
mixBC	.\semtex\src\bsys.h	/^  int_t                    mixBC () const { return _mixed; }$/;"	f	class:BoundarySys
modCoef	.\semtex\femlib\femlib.h	/^  static void modCoef (const int_t    n,$/;"	f	class:Femlib
modCoef	.\semtex\femlib\operators.c	/^} modCoef;			\/* ----------------------------------------- *\/$/;"	t	typeref:struct:modcoef	file:
modTran	.\semtex\femlib\femlib.h	/^  static void modTran (const int_t n,$/;"	f	class:Femlib
modTran	.\semtex\femlib\operators.c	/^} modTran;			\/* ----------------------------------------- *\/$/;"	t	typeref:struct:modtran	file:
modalEnergy	.\semtex\src\analysis.C	/^void Analyser::modalEnergy ()$/;"	f	class:Analyser
modcoef	.\semtex\femlib\operators.c	/^typedef struct modcoef {	\/* -- Table for modal expansion transform -- *\/$/;"	s	file:
modeConstant	.\semtex\src\field.C	/^real_t Field::modeConstant (const char   name,$/;"	f	class:Field
modtran	.\semtex\femlib\operators.c	/^typedef struct modtran {	\/* - GL modal expansion transform matrices - *\/$/;"	s	file:
momentX	.\semtex\src\element.C	/^real_t Element::momentX (const char* func,$/;"	f	class:Element
momentX	.\semtex\src\element.C	/^real_t Element::momentX (const real_t* src,$/;"	f	class:Element
momentY	.\semtex\src\element.C	/^real_t Element::momentY (const char* func,$/;"	f	class:Element
momentY	.\semtex\src\element.C	/^real_t Element::momentY (const real_t* src,$/;"	f	class:Element
more	.\semtex\include\Clist.h	/^  int     more    () const { return cur != 0;     }$/;"	f	class:CircularListIterator
more	.\semtex\include\List.h	/^  int   more    () const  { return cur != 0;           }$/;"	f	class:ListIterator
mpfft	.\semtex\femlib\femlib.h	/^  static void mpfft (real_t* v, real_t* w, const int_t& np,$/;"	f	class:Femlib
mrcft	.\semtex\femlib\femlib.h	/^  static void mrcft  (real_t* v, const int_t& np, const int_t& nz,$/;"	f	class:Femlib
mulX	.\semtex\src\element.C	/^void Element::mulX (real_t* src) const$/;"	f	class:Element
mulY	.\semtex\src\edge.C	/^void Edge::mulY (real_t* tgt) const$/;"	f	class:Edge
mulY	.\semtex\src\element.C	/^void Element::mulY (real_t* src) const$/;"	f	class:Element
mxm	.\semtex\veclib\blas.h	/^  static void mxm (const double* A, const integer& nra, const double* B,$/;"	f	class:Blas
mxm	.\semtex\veclib\blas.h	/^  static void mxm (const float* A, const integer& nra, const float* B,$/;"	f	class:Blas
mxma	.\semtex\veclib\blas.h	/^  static void mxma (const double* A, const integer& nra, const double* B,$/;"	f	class:Blas
mxma	.\semtex\veclib\blas.h	/^  static void mxma (const float* A, const integer& nra, const float* B,$/;"	f	class:Blas
mxms	.\semtex\veclib\blas.h	/^  static void mxms (const double* A, const integer& nra, const double* B,$/;"	f	class:Blas
mxms	.\semtex\veclib\blas.h	/^  static void mxms (const float* A, const integer& nra, const float* B,$/;"	f	class:Blas
mxmts	.\semtex\veclib\blas.h	/^  static void mxmts(const double* A, const integer& nra, const double* B,$/;"	f	class:Blas
mxmts	.\semtex\veclib\blas.h	/^  static void mxmts(const float* A, const integer& nra, const float* B,$/;"	f	class:Blas
mxv	.\semtex\veclib\blas.h	/^  static void mxv (const double* A, const integer& nra, const double* x,$/;"	f	class:Blas
mxv	.\semtex\veclib\blas.h	/^  static void mxv (const float* A, const integer& nra, const float* x,$/;"	f	class:Blas
nBCedges	.\semtex\src\bcmgr.h	/^  int_t              nBCedges     () const { return _elmtbc.size(); }$/;"	f	class:BCmgr
nBand	.\semtex\src\numbersys.h	/^  int_t         nBand   () const { return _nbandw;  }$/;"	f	class:NumberSys
nBlock	.\semtex\src\geometry.h	/^  static int_t  nBlock    () { return _psize \/ _nproc;       }$/;"	f	class:Geometry
nBnode	.\semtex\src\geometry.h	/^  static int_t  nBnode    () { return _nel * nExtElmt();     }$/;"	f	class:Geometry
nCols	.\semtex\include\Array.h	/^  long nCols   () const      { return nc;      }$/;"	f	class:matrix
nDim	.\semtex\src\geometry.h	/^  static int_t  nDim      () { return _ndim;                 }$/;"	f	class:Geometry
nEl	.\semtex\src\mesh.h	/^  int_t nEl         () const { return _elmtTable.size(); }$/;"	f	class:Mesh
nElmt	.\semtex\src\geometry.h	/^  static int_t  nElmt     () { return _nel;                  }$/;"	f	class:Geometry
nExtElmt	.\semtex\src\geometry.h	/^  static int_t  nExtElmt  () { return 4 * (_np - 1);         }$/;"	f	class:Geometry
nField	.\semtex\src\domain.h	/^  int_t nField    () const { return u.size(); }$/;"	f	class:Domain
nFields	.\semtex\src\data2df.h	/^  int_t nFields () const { return strlen (flds); }$/;"	f	class:Header
nGlobal	.\semtex\src\numbersys.h	/^  int_t         nGlobal () const { return _nglobal; }$/;"	f	class:NumberSys
nInode	.\semtex\src\geometry.h	/^  static int_t  nInode    () { return _nel * nIntElmt();     }$/;"	f	class:Geometry
nIntElmt	.\semtex\src\geometry.h	/^  static int_t  nIntElmt  () { return (_np - 2) * (_np - 2); }$/;"	f	class:Geometry
nMode	.\semtex\src\geometry.h	/^  static int_t  nMode     () { return (_nz + 1) >> 1;        }$/;"	f	class:Geometry
nModeProc	.\semtex\src\geometry.h	/^  static int_t  nModeProc () { return nMode() \/ _nproc;      }$/;"	f	class:Geometry
nNodes	.\semtex\src\mesh.h	/^    int_t nNodes   () const  { return node.size(); }$/;"	f	class:Mesh::Elmt
nP	.\semtex\src\geometry.h	/^  static int_t  nP        () { return _np;                   }$/;"	f	class:Geometry
nPlane	.\semtex\src\geometry.h	/^  static int_t  nPlane    () { return _nel * nTotElmt();     }$/;"	f	class:Geometry
nProc	.\semtex\src\geometry.h	/^  static int_t  nProc     () { return _nproc;                }$/;"	f	class:Geometry
nRows	.\semtex\include\Array.h	/^  long nRows   () const      { return nr;      }$/;"	f	class:matrix
nSolve	.\semtex\src\numbersys.h	/^  int_t         nSolve  () const { return _nsolve;  }$/;"	f	class:NumberSys
nSurf	.\semtex\src\bsys.h	/^  int_t                    nSurf () const { return _nbound; }$/;"	f	class:BoundarySys
nTot	.\semtex\src\geometry.h	/^  static int_t  nTot      () { return _nz  * nPlane();       }$/;"	f	class:Geometry
nTotElmt	.\semtex\src\geometry.h	/^  static int_t  nTotElmt  () { return _np * _np;             }$/;"	f	class:Geometry
nTotProc	.\semtex\src\geometry.h	/^  static int_t  nTotProc  () { return _nzp * _psize;         }$/;"	f	class:Geometry
nTotal	.\semtex\src\geometry.h	/^  static int_t  nTotal    () { return _nz * _psize;          }$/;"	f	class:Geometry
nWall	.\semtex\src\bcmgr.C	/^int_t BCmgr::nWall ()$/;"	f	class:BCmgr
nZ	.\semtex\src\geometry.h	/^  static int_t  nZ        () { return _nz;                   }$/;"	f	class:Geometry
nZ32	.\semtex\src\geometry.h	/^  static int_t  nZ32      () { return (_nproc > 1) ? _nzp : (3 * _nz) >> 1; }$/;"	f	class:Geometry
nZProc	.\semtex\src\geometry.h	/^  static int_t  nZProc    () { return _nzp;                  }$/;"	f	class:Geometry
name	.\semtex\femlib\defaults.h	/^  char*  name;$/;"	m	struct:__anon2
name	.\semtex\src\auxfield.h	/^  char name     ()      const { return _name; }$/;"	f	class:AuxField
name	.\semtex\src\domain.h	/^  char*                name;	\/\/ Session name.$/;"	m	class:Domain
name	.\semtex\src\mesh.h	/^  char*          name  ;	\/\/ name of file containing knot points$/;"	m	class:spline2D
nc	.\semtex\include\Array.h	/^  long nc;$/;"	m	class:matrix
neg	.\semtex\veclib\veclib.h	/^  static void neg (int_t n, double* x, int_t incx)$/;"	f	class:Veclib
neg	.\semtex\veclib\veclib.h	/^  static void neg (int_t n, float*  x, int_t incx)$/;"	f	class:Veclib
neg	.\semtex\veclib\veclib.h	/^  static void neg (int_t n, int_t*  x, int_t incx)$/;"	f	class:Veclib
nel	.\semtex\include\List.h	/^  int          nel;$/;"	m	class:List
nel	.\semtex\src\data2df.h	/^  int_t  nel ;$/;"	m	class:Header
nel	.\semtex\utility\avgdump.c	/^  int      nel              ;$/;"	m	struct:__anon5	file:
nel	.\semtex\utility\rstress.c	/^  int      nel              ;$/;"	m	struct:__anon8	file:
nel	.\semtex\utility\sem2tec.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
nel	.\semtex\utility\sem2vtk.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
next	.\semtex\femlib\family.c	/^  struct dvect* next ;$/;"	m	struct:dvect	typeref:struct:dvect::dvect	file:
next	.\semtex\femlib\family.c	/^  struct ivect* next ;$/;"	m	struct:ivect	typeref:struct:ivect::ivect	file:
next	.\semtex\femlib\family.c	/^  struct svect* next ;$/;"	m	struct:svect	typeref:struct:svect::svect	file:
next	.\semtex\femlib\mapping.c	/^  struct mapping* next ;$/;"	m	struct:mapping	typeref:struct:mapping::mapping	file:
next	.\semtex\femlib\operators.c	/^  struct legcoef* next;		\/* link to next one                          *\/$/;"	m	struct:legcoef	typeref:struct:legcoef::legcoef	file:
next	.\semtex\femlib\operators.c	/^  struct legtran* next;		\/* link to next one                          *\/$/;"	m	struct:legtran	typeref:struct:legtran::legtran	file:
next	.\semtex\femlib\operators.c	/^  struct modcoef* next;		\/* link to next one                          *\/$/;"	m	struct:modcoef	typeref:struct:modcoef::modcoef	file:
next	.\semtex\femlib\operators.c	/^  struct modtran* next;		\/* link to next one                          *\/$/;"	m	struct:modtran	typeref:struct:modtran::modtran	file:
next	.\semtex\femlib\operators.c	/^  struct projop* next ; \/* link to next                                      *\/$/;"	m	struct:projop	typeref:struct:projop::projop	file:
next	.\semtex\femlib\operators.c	/^  struct quadop* next  ; \/* link to next                                     *\/$/;"	m	struct:quadop	typeref:struct:quadop::quadop	file:
next	.\semtex\include\Clist.h	/^    Node* next;$/;"	m	class:CircularList::Node
next	.\semtex\include\List.h	/^  void  next    ()        {        cur =  cur -> link; }$/;"	f	class:ListIterator
next	.\semtex\include\Stack.h	/^  StackNode<T>* next;$/;"	m	class:StackNode
nfields	.\semtex\utility\sem2tec.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
nfields	.\semtex\utility\sem2vtk.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
nfrom	.\semtex\femlib\operators.c	/^  int_t          nfrom; \/* Number of points projection is "from"             *\/$/;"	m	struct:projop	file:
node	.\semtex\src\mesh.h	/^    vector<Node*> node;$/;"	m	class:Mesh::Elmt
nonLinear	.\semtex\dns\nonlinear.C	/^void nonLinear (Domain*         D ,$/;"	f
normTraction	.\semtex\src\edge.C	/^Vector Edge::normTraction (const char*   grp,$/;"	f	class:Edge
normTraction	.\semtex\src\field.C	/^Vector Field::normTraction (const Field* P)$/;"	f	class:Field
normTractionV	.\semtex\src\field.C	/^void Field::normTractionV (real_t*      fx,$/;"	f	class:Field
norm_H1	.\semtex\src\element.C	/^real_t Element::norm_H1 (const real_t* src) const$/;"	f	class:Element
norm_L2	.\semtex\src\element.C	/^real_t Element::norm_L2 (const real_t* src) const$/;"	f	class:Element
norm_inf	.\semtex\src\element.C	/^real_t Element::norm_inf (const real_t* src) const$/;"	f	class:Element
normal	.\semtex\veclib\veclib.h	/^  static double normal (double mean, double sdev)$/;"	f	class:Veclib
normal	.\semtex\veclib\veclib.h	/^  static float  normal (float  mean, float  sdev)$/;"	f	class:Veclib
normalize	.\semtex\utility\tensorcalcs.c	/^void normalize(double a[3])$/;"	f
np	.\semtex\femlib\mapping.c	/^  integer         np   ;$/;"	m	struct:mapping	file:
np	.\semtex\femlib\operators.c	/^  int_t           np  ;		\/* Number of mesh points                     *\/$/;"	m	struct:legcoef	file:
np	.\semtex\femlib\operators.c	/^  int_t           np  ;		\/* Number of mesh points                     *\/$/;"	m	struct:legtran	file:
np	.\semtex\femlib\operators.c	/^  int_t           np  ;		\/* Number of mesh points                     *\/$/;"	m	struct:modcoef	file:
np	.\semtex\femlib\operators.c	/^  int_t           np  ;		\/* Number of mesh points                     *\/$/;"	m	struct:modtran	file:
np	.\semtex\femlib\operators.c	/^  int_t          np    ; \/* Number of quadrature points                      *\/$/;"	m	struct:quadop	file:
np	.\semtex\utility\rstress.c	/^  int      np               ;$/;"	m	struct:__anon8	file:
np	.\semtex\utility\sem2tec.c	/^static int     nzp = 0, preplot_it = 1, np = 1, dump = 1;$/;"	v	file:
np	.\semtex\utility\sem2vtk.c	/^static int     nzp = 0, preplot_it = 1, np = 1, dump = 1, cylindrical=0;$/;"	v	file:
nr	.\semtex\include\Array.h	/^  long nr;$/;"	m	class:matrix
nr	.\semtex\src\data2df.h	/^  int_t  nr  ;$/;"	m	class:Header
nr	.\semtex\utility\avgdump.c	/^  int      nr               ;$/;"	m	struct:__anon5	file:
nr	.\semtex\utility\sem2tec.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
nr	.\semtex\utility\sem2vtk.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
nrep	.\semtex\femlib\family.c	/^  integer       nrep ;		\/* Number of unaliased replications.  *\/$/;"	m	struct:ivect	file:
nrep	.\semtex\femlib\family.c	/^  integer       nrep ;$/;"	m	struct:dvect	file:
nrep	.\semtex\femlib\family.c	/^  integer       nrep ;$/;"	m	struct:svect	file:
nreport	.\semtex\utility\interp.C	/^static int_t nreport = 100;$/;"	v	file:
nrm2	.\semtex\veclib\blas.h	/^  static double nrm2 (const integer& n, const double* x, const integer& incx) {$/;"	f	class:Blas
nrm2	.\semtex\veclib\blas.h	/^  static float  nrm2 (const integer& n, const float* x, const integer& incx) {$/;"	f	class:Blas
ns	.\semtex\src\data2df.h	/^  int_t  ns  ;$/;"	m	class:Header
ns	.\semtex\utility\avgdump.c	/^  int      ns               ;$/;"	m	struct:__anon5	file:
ns	.\semtex\utility\sem2tec.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
ns	.\semtex\utility\sem2vtk.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
nto	.\semtex\femlib\operators.c	/^  int_t          nto  ; \/* Number of points projection is "to".              *\/$/;"	m	struct:projop	file:
num_elmts	.\semtex\include\Clist.h	/^  int   num_elmts;$/;"	m	class:CircularList
num_elts	.\semtex\include\Array.h	/^  long num_elts;$/;"	m	class:vector
nz	.\semtex\src\data2df.h	/^  int_t  nz  ;$/;"	m	class:Header
nz	.\semtex\utility\avgdump.c	/^  int      nz               ;$/;"	m	struct:__anon5	file:
nz	.\semtex\utility\rstress.c	/^  int      nz               ;$/;"	m	struct:__anon8	file:
nz	.\semtex\utility\sem2tec.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
nz	.\semtex\utility\sem2vtk.c	/^static int     nr, ns, nz, nel, nfields;$/;"	v	file:
nzp	.\semtex\utility\sem2tec.c	/^static int     nzp = 0, preplot_it = 1, np = 1, dump = 1;$/;"	v	file:
nzp	.\semtex\utility\sem2vtk.c	/^static int     nzp = 0, preplot_it = 1, np = 1, dump = 1, cylindrical=0;$/;"	v	file:
operator	.\semtex\src\domain.C	/^istream& operator >> (istream& strm,$/;"	f
operator	.\semtex\src\domain.C	/^ostream& operator << (ostream& strm,$/;"	f
operator	.\semtex\src\statistics.C	/^ifstream& operator >> (ifstream&   strm,$/;"	f
operator	.\semtex\src\statistics.C	/^ofstream& operator << (ofstream&   strm,$/;"	f
operator	.\semtex\utility\project.C	/^Field2DF& Field2DF::operator = (const Field2DF& rhs)$/;"	m	class:Field2DF	file:
operator !	.\semtex\include\Boolean.h	/^    Boolean operator!() const { return !v; }$/;"	f	class:Boolean
operator ()	.\semtex\include\Array.h	/^        T& operator () (const long i)       { return data[i]; }$/;"	f	class:vector
operator ()	.\semtex\include\Array.h	/^        T& operator () (const long i, const long j)      {return data[j+i*nc];}$/;"	f	class:matrix
operator ()	.\semtex\include\Array.h	/^        T* operator () ()       { return data; }$/;"	f	class:vector
operator ()	.\semtex\include\Array.h	/^        T* operator () (const long i)                    { return row[i]; }$/;"	f	class:matrix
operator ()	.\semtex\include\Array.h	/^        T** operator () ()                          { return             row; }$/;"	f	class:matrix
operator ()	.\semtex\include\Array.h	/^  const T& operator () (const long i) const { return data[i]; } $/;"	f	class:vector
operator ()	.\semtex\include\Array.h	/^  const T& operator () (const long i, const long j) const{return data[j+i*nc];}$/;"	f	class:matrix
operator ()	.\semtex\include\Array.h	/^  const T* operator () () const { return data; } $/;"	f	class:vector
operator ()	.\semtex\include\Array.h	/^  const T* operator () (const long i) const              { return row[i]; }$/;"	f	class:matrix
operator ()	.\semtex\include\Array.h	/^  const T** operator () () const                    { return (const T**) row; }$/;"	f	class:matrix
operator /=	.\semtex\src\auxfield.h	/^  AuxField& operator \/= (const AuxField&) { return *this; }$/;"	f	class:AuxField
operator =	.\semtex\include\Array.h	/^  matrix<T>& operator = (const T& src) {$/;"	f	class:matrix
operator =	.\semtex\include\Array.h	/^  matrix<T>& operator = (const matrix<T>& src) {$/;"	f	class:matrix
operator =	.\semtex\include\Array.h	/^  vector<T>& operator = (const T& src) {$/;"	f	class:vector
operator =	.\semtex\include\Array.h	/^  vector<T>& operator = (const vector<T>& src) {$/;"	f	class:vector
operator =	.\semtex\src\field.h	/^  Field& operator = (const AuxField& z) {AuxField::operator=(z); return *this;}$/;"	f	class:Field
operator =	.\semtex\src\field.h	/^  Field& operator = (const char*     z) {AuxField::operator=(z); return *this;}$/;"	f	class:Field
operator =	.\semtex\src\field.h	/^  Field& operator = (const real_t&   z) {AuxField::operator=(z); return *this;}$/;"	f	class:Field
operator []	.\semtex\include\Array.h	/^        T& operator [] (const long i)       { return data[i]; }$/;"	f	class:vector
operator []	.\semtex\include\Array.h	/^  const T& operator [] (const long i) const { return data[i]; }$/;"	f	class:vector
operator []	.\semtex\src\matrix.h	/^  const MatrixSys* operator [] (const int_t i) const { return _Msys[i]; }$/;"	f	class:ModalMatrixSys
operator int	.\semtex\include\Boolean.h	/^    operator int() const{ return v; }   \/\/ To allow "if (boolean-value)..."$/;"	f	class:Boolean
os	.\gmsh2sem.py	/^import sys, os$/;"	i
pack	.\semtex\utility\repeatz.c	/^static void pack (const double* datain ,  $/;"	f	file:
pack_addr	.\semtex\veclib\lapack.h	/^  static inline int_t pack_addr (int_t i, int_t j)$/;"	f	class:Lapack
parse	.\semtex\utility\slit.c	/^int parse(char *strin, char *strout, int *pos, char sep)$/;"	f
parse_args	.\semtex\utility\sem2tec.c	/^static void parse_args (int    argc,$/;"	f	file:
parse_args	.\semtex\utility\sem2vtk.c	/^static void parse_args (int    argc,$/;"	f	file:
pbcon	.\semtex\veclib\lapack.h	/^  static void pbcon (const char* uplo, const int_t& n, const int_t& kd,$/;"	f	class:Lapack
pbtrf	.\semtex\veclib\lapack.h	/^  static void pbtrf (const char *uplo, const int_t& n, const int_t& kd, $/;"	f	class:Lapack
pbtrf	.\semtex\veclib\lapack.h	/^  static void pbtrf (const char *uplo, const int_t& n, const int_t& kd,$/;"	f	class:Lapack
pbtrs	.\semtex\veclib\lapack.h	/^  static void pbtrs (const char *uplo, const int_t& n,$/;"	f	class:Lapack
periodic	.\semtex\src\mesh.h	/^    Node* periodic;$/;"	m	class:Mesh::Node
perturb	.\semtex\utility\noiz.c	/^static void perturb (double*      data  ,$/;"	f	file:
phaseUpdate	.\semtex\src\statistics.C	/^void Statistics::phaseUpdate (const int_t j   ,$/;"	f	class:Statistics
planeSize	.\semtex\src\geometry.h	/^  static int_t  planeSize () { return _psize;                }$/;"	f	class:Geometry
pmap	.\semtex\femlib\mapping.c	/^  integer*        pmap ;$/;"	m	struct:mapping	file:
pnleg	.\semtex\femlib\tests\testDLT.C	/^static double pnleg (const double z,$/;"	f	file:
point	.\semtex\femlib\operators.c	/^  real_t*        point ; \/* Quadrature points on [-1, 1]                     *\/$/;"	m	struct:quadop	file:
polcoe	.\semtex\femlib\tests\testpoly.c	/^void polcoe(int n, double *x, double *y, double *c)$/;"	f
polder	.\semtex\femlib\tests\testpoly.c	/^void polder(int n, double *c, double x, double *poly, double *pder)$/;"	f
polint	.\semtex\veclib\veclib.h	/^  static void polint (const double* xa, const double* ya, int_t n,$/;"	f	class:Veclib
polint	.\semtex\veclib\veclib.h	/^  static void polint (const float*  xa, const float*  ya, int_t n,$/;"	f	class:Veclib
poly	.\semtex\veclib\veclib.h	/^  static double poly (int_t n, double x, const double* xp, const double* yp)$/;"	f	class:Veclib
poly	.\semtex\veclib\veclib.h	/^  static float  poly (int_t n, float  x, const float*  xp, const float*  yp)$/;"	f	class:Veclib
polylib	.\semtex\femlib\polylib.h	/^namespace polylib {$/;"	n
pop	.\semtex\include\Stack.h	/^  T pop() {$/;"	f	class:Stack
pos	.\semtex\src\mesh.h	/^  int_t          pos   ;	\/\/ index of last confirmed position$/;"	m	class:spline2D
ppcon	.\semtex\veclib\lapack.h	/^  static void ppcon (const char* uplo, const int_t& n, const double* ap,$/;"	f	class:Lapack
ppcon	.\semtex\veclib\lapack.h	/^  static void ppcon (const char* uplo, const int_t& n, const float*  ap,$/;"	f	class:Lapack
pptrf	.\semtex\veclib\lapack.h	/^  static void pptrf (const char *uplo, const int_t& n,$/;"	f	class:Lapack
pptrs	.\semtex\veclib\lapack.h	/^  static void pptrs (const char *uplo, const int_t& n, const int_t& nrhs,$/;"	f	class:Lapack
preSolve	.\semtex\dns\integrate.C	/^static Msys** preSolve (const Domain* D)$/;"	f	file:
preft	.\semtex\femlib\femlib.h	/^  static void preft  (const int_t& n, int_t& nfax, int_t* ifax,$/;"	f	class:Femlib
prepVec	.\semtex\femlib\femlib.h	/^  static void prepVec (const char* v, const char* f)$/;"	f	class:Femlib
preplot_it	.\semtex\utility\sem2tec.c	/^static int     nzp = 0, preplot_it = 1, np = 1, dump = 1;$/;"	v	file:
preplot_it	.\semtex\utility\sem2vtk.c	/^static int     nzp = 0, preplot_it = 1, np = 1, dump = 1, cylindrical=0;$/;"	v	file:
preprocess	.\semtex\dns\drive.C	/^static void preprocess (const char*       session,$/;"	f	file:
preprocess	.\semtex\elliptic\drive.C	/^static void preprocess (const char*       session,$/;"	f	file:
preprocess	.\semtex\utility\traction.C	/^static void preprocess (const char*       session,$/;"	f	file:
prf235	.\semtex\femlib\cfemlib.h	158;"	d
primes23	.\semtex\femlib\femlib.h	/^  static void primes23 (const int_t& n, int_t& np, int_t* fact)$/;"	f	class:Femlib
primes235	.\semtex\femlib\femlib.h	/^  static void primes235 (int_t& n,$/;"	f	class:Femlib
print	.\semtex\src\boundary.C	/^void Boundary::print () const$/;"	f	class:Boundary
printBoundaries	.\semtex\src\field.C	/^void Field::printBoundaries (const Field* F)$/;"	f	class:Field
printDvector	.\semtex\veclib\util.c	/^void printDvector (FILE  *fp     ,$/;"	f
printHead	.\semtex\utility\sem2nek.C	/^static void printHead ()$/;"	f	file:
printIvector	.\semtex\veclib\util.c	/^void printIvector (FILE  *fp     ,$/;"	f
printMatSC	.\semtex\src\element.C	/^void Element::printMatSC (const real_t* hbb,$/;"	f	class:Element
printNek	.\semtex\src\mesh.C	/^void CircularArc::printNek () const$/;"	f	class:CircularArc
printNek	.\semtex\src\mesh.C	/^void Mesh::printNek () const$/;"	f	class:Mesh
printNek	.\semtex\src\mesh.C	/^void Spline::printNek () const$/;"	f	class:Spline
printSvector	.\semtex\veclib\util.c	/^void printSvector (FILE  *fp     ,$/;"	f
printTail	.\semtex\utility\sem2nek.C	/^static void printTail ()$/;"	f	file:
printVector	.\semtex\src\misc.C	/^ostream& printVector (ostream&    strm,$/;"	f
printWalls	.\semtex\utility\wallmesh.C	/^static void printWalls (int_t             np  ,$/;"	f	file:
printf	.\semtex\utility\preplot.c	445;"	d	file:
printup	.\semtex\utility\avgdump.c	/^static void printup (FILE* f,$/;"	f	file:
printup	.\semtex\utility\enumerate.C	/^void printup (const char*    F   ,$/;"	f
printup	.\semtex\utility\rstress.c	/^static void printup (FILE* f,$/;"	f	file:
probe	.\semtex\src\element.C	/^real_t Element::probe (const real_t  r   ,$/;"	f	class:Element
procID	.\semtex\src\geometry.h	/^  static int_t  procID    () { return _pid;                  }$/;"	f	class:Geometry
prog	.\semtex\dns\drive.C	/^static char prog[] = "dns";$/;"	v	file:
prog	.\semtex\elliptic\drive.C	/^static char prog[] = "elliptic";$/;"	v	file:
prog	.\semtex\femlib\tests\dealiasmult.C	/^static char prog[] = "dealiasmult";$/;"	v	file:
prog	.\semtex\femlib\tests\dpt.C	/^static char prog[] = "dpt";$/;"	v	file:
prog	.\semtex\femlib\tests\glzw.C	/^static char prog[] = "glzw";$/;"	v	file:
prog	.\semtex\femlib\tests\lagder.C	/^static char prog[] = "lagder";$/;"	v	file:
prog	.\semtex\femlib\tests\lagint.C	/^static char prog[] = "lagint";$/;"	v	file:
prog	.\semtex\femlib\tests\lagpro.C	/^static char prog[] = "lagpro";$/;"	v	file:
prog	.\semtex\femlib\tests\polyint.C	/^static char prog[] = "polyint";$/;"	v	file:
prog	.\semtex\utility\addfield.C	/^static char  prog[] = "addfield";$/;"	v	file:
prog	.\semtex\utility\avgdump.c	/^static char  prog[]    = "avgdump";$/;"	v	file:
prog	.\semtex\utility\calc.C	/^static char prog[] = "calc";$/;"	v	file:
prog	.\semtex\utility\compare.C	/^static char  prog[]    = "compare";$/;"	v	file:
prog	.\semtex\utility\convert.c	/^static char  prog[]  = "convert";$/;"	v	file:
prog	.\semtex\utility\data2df_template.C	/^static char prog[] = "data2df_template";$/;"	v	file:
prog	.\semtex\utility\eneq.C	/^static char prog[] = "eneq";$/;"	v	file:
prog	.\semtex\utility\enumerate.C	/^static char        prog[] = "enumerate";$/;"	v	file:
prog	.\semtex\utility\integral.C	/^static char  prog[]  = "integral";$/;"	v	file:
prog	.\semtex\utility\interp.C	/^static char  prog[]  = "interp";$/;"	v	file:
prog	.\semtex\utility\lowpass.C	/^static char prog[] = "lowpass";$/;"	v	file:
prog	.\semtex\utility\meshpr.C	/^static char prog[] = "meshpr";$/;"	v	file:
prog	.\semtex\utility\moden.c	/^static char prog[] = "moden";$/;"	v	file:
prog	.\semtex\utility\noiz.c	/^static char prog[] = "noiz";$/;"	v	file:
prog	.\semtex\utility\normal.c	/^static char prog[] = "normal";$/;"	v	file:
prog	.\semtex\utility\phase.C	/^static char  prog[] = "phase";$/;"	v	file:
prog	.\semtex\utility\probe.C	/^static char  *prog;$/;"	v	file:
prog	.\semtex\utility\rectmesh.C	/^static char prog[] = "rectmesh";$/;"	v	file:
prog	.\semtex\utility\repeatxy.c	/^static char prog[] = "repeatxy";$/;"	v	file:
prog	.\semtex\utility\repeatz.c	/^static char prog[] = "repeatz";$/;"	v	file:
prog	.\semtex\utility\rstress.c	/^static char  prog[]    = "rstress";$/;"	v	file:
prog	.\semtex\utility\sem2nek.C	/^static char prog[] = "sem2nek";$/;"	v	file:
prog	.\semtex\utility\topre.c	/^static char prog[] = "topre";$/;"	v	file:
prog	.\semtex\utility\traction.C	/^static char prog[] = "traction";$/;"	v	file:
prog	.\semtex\utility\transform.C	/^static char prog[] = "transform";$/;"	v	file:
prog	.\semtex\utility\wallmesh.C	/^static char prog[] = "wallmesh";$/;"	v	file:
prog	.\semtex\utility\xplane.c	/^static char prog[] = "xplane";$/;"	v	file:
proj	.\semtex\femlib\operators.c	/^void proj (const real_t** IN    , \/* Interpolant operator matrix             *\/$/;"	f
project	.\semtex\dns\integrate.C	/^static void project (const Domain* D ,$/;"	f	file:
project	.\semtex\src\element.C	/^void Element::project (const int_t   nsrc,$/;"	f	class:Element
projection	.\semtex\femlib\femlib.h	/^  static void projection (const real_t** IN    ,$/;"	f	class:Femlib
projop	.\semtex\femlib\operators.c	/^typedef struct projop { \/* ------- projection operator information  -------- *\/$/;"	s	file:
push	.\semtex\include\Stack.h	/^  void push(T x) {$/;"	f	class:Stack
putData	.\semtex\utility\probe.C	/^static void putData (const char*              dump     ,$/;"	f	file:
putDump	.\semtex\utility\addfield.C	/^static void putDump  (Domain*            D       ,$/;"	f	file:
putHeader	.\semtex\utility\interp.C	/^static void putHeader (const char*              session,$/;"	f	file:
put_data	.\semtex\utility\convert.c	/^static void put_data (FILE*        fp     ,$/;"	f	file:
quadop	.\semtex\femlib\operators.c	/^typedef struct quadop  { \/* ------- quadrature operator information  ------- *\/$/;"	s	file:
quadrature	.\semtex\femlib\femlib.h	/^  static void quadrature (const real_t** point ,$/;"	f	class:Femlib
quadrature_kind	.\semtex\femlib\cfemdef.h	/^typedef enum quadrature_kind {$/;"	g
r2d	.\semtex\utility\topre.c	71;"	d	file:
rad	.\semtex\utility\topre.c	72;"	d	file:
radius	.\semtex\src\mesh.h	/^  real_t radius;$/;"	m	class:CircularArc
ramp	.\semtex\veclib\veclib.h	/^  static void ramp (int_t n, double  alpha, double beta,$/;"	f	class:Veclib
ramp	.\semtex\veclib\veclib.h	/^  static void ramp (int_t n, float   alpha, float  beta,$/;"	f	class:Veclib
ramp	.\semtex\veclib\veclib.h	/^  static void ramp (int_t n, int_t   alpha, int_t  beta,$/;"	f	class:Veclib
ran1	.\semtex\utility\noiz.c	/^static double ran1 (long *idum)$/;"	f	file:
ran1	.\semtex\veclib\xrand.c	/^static double ran1 (long* idum)$/;"	f	file:
ran2	.\semtex\veclib\xrand.c	/^static double ran2 (long* idum)$/;"	f	file:
ran3	.\semtex\veclib\xrand.c	/^double ran3 (long* idum)$/;"	f
ranInit	.\semtex\veclib\veclib.h	/^  static void ranInit (int_t flag)$/;"	f	class:Veclib
raninit	.\semtex\veclib\xrand.c	/^void raninit (integer flag)$/;"	f
rcm	.\semtex\femlib\cfemlib.h	127;"	d
rcm	.\semtex\femlib\femlib.h	/^  static void rcm (const int_t& n, int_t* x, int_t* a, int_t* m,$/;"	f	class:Femlib
readLine	.\semtex\utility\topre.c	65;"	d	file:
readMesh	.\semtex\utility\wallmesh.C	/^static void readMesh (istream&        file,$/;"	f	file:
read_data	.\semtex\utility\sem2tec.c	/^static void read_data (FILE *fp)$/;"	f	file:
read_data	.\semtex\utility\sem2vtk.c	/^static void read_data (FILE *fp)$/;"	f	file:
read_mesh	.\semtex\utility\sem2tec.c	/^static void read_mesh (FILE *fp)$/;"	f	file:
read_mesh	.\semtex\utility\sem2vtk.c	/^static void read_mesh (FILE *fp)$/;"	f	file:
real	.\semtex\femlib\cfemdef.h	/^  typedef double   real;$/;"	t
real	.\semtex\femlib\cfemdef.h	/^  typedef double  real;$/;"	t
real_eigenvalues	.\semtex\utility\tensorcalcs.c	/^void real_eigenvalues(double  a2, double  a1, double  a0,$/;"	f
real_t	.\semtex\femlib\cfemdef.h	/^typedef real    real_t;$/;"	t
rebuild	.\semtex\utility\enumerate.C	/^void Nsys::rebuild (FEML*       file  ,$/;"	f	class:Nsys
recv	.\semtex\femlib\femlib.h	/^  static void recv  (float*  data, const int_t N, const int_t src)$/;"	f	class:Femlib
recv	.\semtex\femlib\femlib.h	/^  static void recv  (int_t*  data, const int_t N, const int_t src)$/;"	f	class:Femlib
recv	.\semtex\femlib\femlib.h	/^  static void recv  (real_t* data, const int_t N, const int_t src)$/;"	f	class:Femlib
remove	.\semtex\include\Clist.h	/^void CircularList<T>::remove(T x) {$/;"	f	class:CircularList
remove	.\semtex\include\List.h	/^  T remove (T x) {		\/\/ -- Return datum of removed node.$/;"	f	class:List
remove_trace	.\semtex\utility\tensorcalcs.c	/^void remove_trace(double T[9])$/;"	f
renumber	.\semtex\utility\enumerate.C	/^void Nsys::renumber (const int_t optlevel,$/;"	f	class:Nsys
report	.\semtex\src\domain.C	/^void Domain::report ()$/;"	f	class:Domain
reset	.\semtex\include\List.h	/^  void  reset   ()        {        cur =  top;         }$/;"	f	class:ListIterator
resize	.\semtex\include\Array.h	/^  void resize (const long n) { setSize(n); }$/;"	f	class:vector
restart	.\semtex\src\domain.C	/^void Domain::restart ()$/;"	f	class:Domain
rfft	.\semtex\femlib\cfemlib.h	189;"	d
rfftb	.\semtex\femlib\femlib.h	/^  static void rfftb (const int_t& n, real_t* c, real_t* ch,$/;"	f	class:Femlib
rfftf	.\semtex\femlib\femlib.h	/^  static void rfftf (const int_t& n, real_t* c, real_t* ch,$/;"	f	class:Femlib
rffti	.\semtex\femlib\femlib.h	/^  static void rffti (const int_t& n , real_t* w, int_t* i)$/;"	f	class:Femlib
rfrom	.\semtex\femlib\operators.c	/^  char           rfrom; \/* Mesh point definition: 'G', 'R', 'L', or 'U'      *\/$/;"	m	struct:projop	file:
rftfax	.\semtex\femlib\cfemlib.h	187;"	d
rma	.\semtex\src\mesh.C	/^static inline int_t rma (int_t i, int_t j, int_t n)$/;"	f	file:
rollm	.\semtex\src\sem.h	/^template<class T> inline void rollm (T** u, const int_t m, const int_t n)$/;"	f
rollv	.\semtex\src\sem.h	/^template<class T> inline void rollv (T* u, const int_t n)$/;"	f
root	.\semtex\src\feml.h	/^  const char* root      () const { return feml_root; }  $/;"	f	class:FEML
root	.\semtex\utility\probe.C	/^static char *root (char *s) {$/;"	f	file:
rot	.\semtex\veclib\blas.h	/^  static void rot  (const integer& n, double* x, const integer& incx,$/;"	f	class:Blas
rot	.\semtex\veclib\blas.h	/^  static void rot  (const integer& n, float* x, const integer& incx,$/;"	f	class:Blas
rotg	.\semtex\veclib\blas.h	/^  static void rotg (const double& a, const double& b,$/;"	f	class:Blas
rotg	.\semtex\veclib\blas.h	/^  static void rotg (const float&  a, const float&  b,$/;"	f	class:Blas
round2	.\semtex\utility\preplot.c	883;"	d	file:
roundup	.\semtex\utility\repeatz.c	/^static int roundup (const int nzdes)$/;"	f	file:
row	.\semtex\include\Array.h	/^  T**  row;$/;"	m	class:matrix
row_major	.\semtex\veclib\veclib.h	/^  static inline int_t row_major (int_t i, int_t j, int_t n)$/;"	f	class:Veclib
rto	.\semtex\femlib\operators.c	/^  char           rto  ; \/* Quadrature rule: 'G', 'R', or 'L'                 *\/$/;"	m	struct:projop	file:
rule	.\semtex\femlib\operators.c	/^  char           rule  ; \/* Quadrature rule: 'G', 'R', or 'L'                *\/$/;"	m	struct:quadop	file:
runavg	.\semtex\utility\avgdump.c	/^static void runavg (Dump* a,$/;"	f	file:
rv	.\semtex\src\family.C	/^static vector<rvect*> rv;$/;"	v	file:
s	.\gmsh2sem.py	/^            s = words[0]+' <Q> '+words[6]+' '+words[7]+' '+words[8]+' '+words[9]+' <\/Q>\\n'$/;"	v
s	.\gmsh2sem.py	/^s = "meshpr -s .t1 > .t2"$/;"	v
s3matrix	.\semtex\veclib\memory.c	/^float ***s3matrix (integer nrl, integer nrh,$/;"	f
sAdopted	.\semtex\femlib\family.c	/^static float* sAdopted (const integer size,$/;"	f	file:
sHead	.\semtex\femlib\family.c	/^static sVect* sHead = 0;$/;"	v	file:
sVect	.\semtex\femlib\family.c	/^} sVect;$/;"	t	typeref:struct:svect	file:
sabandon	.\semtex\femlib\family.c	/^void sabandon (float** vect)$/;"	f
sadd	.\semtex\veclib\veclib.h	/^  static void sadd (int_t n, double alpha, const double* x, int_t incx, $/;"	f	class:Veclib
sadd	.\semtex\veclib\veclib.h	/^  static void sadd (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
sadd	.\semtex\veclib\veclib.h	/^  static void sadd (int_t n, int_t  alpha, const int_t*  x, int_t incx,$/;"	f	class:Veclib
sadopt	.\semtex\femlib\family.c	/^void sadopt (const integer size,$/;"	f
same	.\semtex\veclib\veclib.h	/^  static int_t same (int_t n, const double*  x, int_t incx,$/;"	f	class:Veclib
same	.\semtex\veclib\veclib.h	/^  static int_t same (int_t n, const float*   x, int_t incx,$/;"	f	class:Veclib
same	.\semtex\veclib\veclib.h	/^  static int_t same (int_t n, const int_t* x, int_t incx,$/;"	f	class:Veclib
sasum	.\semtex\veclib\cveclib.h	767;"	d
saxpy	.\semtex\veclib\cveclib.h	761;"	d
sbrev	.\semtex\veclib\xbrev.c	/^void sbrev (integer n,$/;"	f
scal	.\semtex\veclib\blas.h	/^  static void scal (const integer& n, const double& alpha, $/;"	f	class:Blas
scal	.\semtex\veclib\blas.h	/^  static void scal (const integer& n, const float& alpha, $/;"	f	class:Blas
scalarFlux	.\semtex\src\edge.C	/^real_t Edge::scalarFlux (const char*   grp,$/;"	f	class:Edge
scalarFlux	.\semtex\src\field.C	/^real_t Field::scalarFlux (const Field* C)$/;"	f	class:Field
scale_vect	.\semtex\utility\tensorcalcs.c	/^void scale_vect(double v[3], double s)$/;"	f
scanf	.\semtex\utility\preplot.c	448;"	d	file:
scatr	.\semtex\veclib\veclib.h	/^  static void scatr (int_t n, const double* x, const int_t* y, double* z)$/;"	f	class:Veclib
scatr	.\semtex\veclib\veclib.h	/^  static void scatr (int_t n, const float*  x, const int_t* y, float*  z)$/;"	f	class:Veclib
scatr	.\semtex\veclib\veclib.h	/^  static void scatr (int_t n, const int_t*  x, const int_t* y, int_t*  z)$/;"	f	class:Veclib
scatr_sum	.\semtex\veclib\veclib.h	/^  static void scatr_sum (int_t n,$/;"	f	class:Veclib
scfft	.\semtex\veclib\xfft.c	/^void scfft(int N, complex *Data, int TabLen, const complex *Wtab, int Forward)$/;"	f
sclip	.\semtex\veclib\xclip.c	/^void sclip (integer n, const float alpha, const float beta,$/;"	f
sclipdn	.\semtex\veclib\xclip.c	/^void sclipdn (integer n, const float alpha,$/;"	f
sclipup	.\semtex\veclib\xclip.c	/^void sclipup (integer n, const float alpha,$/;"	f
sclock	.\semtex\veclib\util.c	/^float sclock (void)$/;"	f
scndst	.\semtex\veclib\xcndst.c	/^void scndst (integer n,$/;"	f
scopy	.\semtex\veclib\xcopy.c	/^void scopy (integer n, const float* x, integer incx,$/;"	f
scpfft	.\semtex\veclib\xfft.c	/^void scpfft(int N, complex *Zbuf, int Forward)$/;"	f
sdiv	.\semtex\veclib\veclib.h	/^  static void  sdiv (int_t n, float alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
sdiv	.\semtex\veclib\veclib.h	/^  static void sdiv (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
sdiv	.\semtex\veclib\veclib.h	/^  static void sdiv (int_t n, int_t  alpha, const int_t*  x, int_t incx,$/;"	f	class:Veclib
sdot	.\semtex\veclib\cveclib.h	764;"	d
seed	.\semtex\utility\noiz.c	/^static long   seed = 0;$/;"	v	file:
seek	.\semtex\src\feml.C	/^integer FEML::seek (const char* keyword)$/;"	f	class:FEML
semiangle	.\semtex\src\mesh.h	/^  real_t semiangle;$/;"	m	class:CircularArc
send	.\semtex\femlib\femlib.h	/^  static void send  (float*  data, const int_t N, const int_t tgt)$/;"	f	class:Femlib
send	.\semtex\femlib\femlib.h	/^  static void send  (int_t*  data, const int_t N, const int_t tgt)$/;"	f	class:Femlib
send	.\semtex\femlib\femlib.h	/^  static void send  (real_t* data, const int_t N, const int_t tgt)$/;"	f	class:Femlib
seq	.\semtex\veclib\veclib.h	/^  static void seq (int_t n, int_t alpha, const int_t* x, int_t incx,$/;"	f	class:Veclib
sesd	.\semtex\src\data2df.h	/^  char*  sesd;$/;"	m	class:Header
sess	.\semtex\src\data2df.h	/^  char*  sess;$/;"	m	class:Header
session	.\semtex\utility\avgdump.c	/^  char     session [STR_MAX];$/;"	m	struct:__anon5	file:
session	.\semtex\utility\rstress.c	/^  char     session [STR_MAX];$/;"	m	struct:__anon8	file:
set	.\semtex\src\boundary.C	/^void Boundary::set (const real_t* src,$/;"	f	class:Boundary
set	.\semtex\src\condition.C	/^void Essential::set (const int_t   side,$/;"	f	class:Essential
set	.\semtex\src\condition.C	/^void EssentialFunction::set (const int_t   side,$/;"	f	class:EssentialFunction
set	.\semtex\src\condition.h	/^  virtual void set       (const int_t, const int_t*,$/;"	f	class:Mixed
set	.\semtex\src\condition.h	/^  virtual void set       (const int_t, const int_t*,$/;"	f	class:Natural
set	.\semtex\src\condition.h	/^  virtual void set       (const int_t, const int_t*,$/;"	f	class:NaturalFunction
set	.\semtex\src\condition.h	/^  virtual void set       (const int_t, const int_t*,$/;"	f	class:NaturalHOPBC
set	.\semtex\src\geometry.C	/^void Geometry::set (const int_t    NP,$/;"	f	class:Geometry
setEssential	.\semtex\src\field.C	/^void Field::setEssential (const real_t*    src,$/;"	f	class:Field
setForGroup	.\semtex\src\edge.C	/^void Edge::setForGroup (const char*  grp,$/;"	f	class:Edge
setPForce	.\semtex\dns\integrate.C	/^static void setPForce (const AuxField** Us,$/;"	f	file:
setSize	.\semtex\include\Array.h	/^  void setSize (const long n) {$/;"	f	class:vector
setSize	.\semtex\include\Array.h	/^  void setSize (const long n_rows, const long n_cols) { $/;"	f	class:matrix
setpf	.\semtex\femlib\femlib.h	/^  static void setpf (const real_t* t, const int_t& n, const int_t& ip,$/;"	f	class:Femlib
settonull	.\semtex\utility\preplot.c	/^void settonull(set,l)$/;"	f
sfill	.\semtex\veclib\xfill.c	/^void sfill (integer n, float alpha, float* x, integer incx)$/;"	f
sgathr	.\semtex\veclib\xgathr.c	/^void sgathr (integer n, const float* x, const integer* y, float* z)$/;"	f
sgathr_scatr	.\semtex\veclib\xgathr_scatr.c	/^void sgathr_scatr (integer n,$/;"	f
sgathr_scatr_sum	.\semtex\veclib\xgathr_scatr_sum.c	/^void sgathr_scatr_sum (integer n,$/;"	f
sgathr_sum	.\semtex\veclib\xgathr_sum.c	/^void sgathr_sum (integer n, const float* x, const integer* y, float* z)$/;"	f
sge	.\semtex\veclib\veclib.h	/^  static void sge (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
sge	.\semtex\veclib\veclib.h	/^  static void sge (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
sge	.\semtex\veclib\veclib.h	/^  static void sge (int_t n, int_t  alpha, const int_t*  x, int_t incx,$/;"	f	class:Veclib
sgemm	.\semtex\veclib\cveclib.h	873;"	d
sgemv	.\semtex\veclib\cveclib.h	809;"	d
sger	.\semtex\veclib\cveclib.h	831;"	d
sgetrf	.\semtex\veclib\cveclib.h	911;"	d
sgetri	.\semtex\veclib\cveclib.h	925;"	d
sgn	.\semtex\veclib\utility.h	/^template<class T> inline T sgn(T x)             { return (x < 0) ? -1 : 1; }$/;"	f
showAssembly	.\semtex\src\mesh.C	/^void Mesh::showAssembly (Mesh& m)$/;"	f	class:Mesh
siclip	.\semtex\veclib\xiclip.c	/^void siclip (integer n, const float alpha, const float beta,$/;"	f
side	.\semtex\src\bcmgr.h	/^typedef struct bctriple { char group; int_t elmt; int_t side; } BCtriple;$/;"	m	struct:bctriple
side	.\semtex\src\mesh.h	/^    vector<Side*> side;$/;"	m	class:Mesh::Elmt
sideDivY	.\semtex\src\element.C	/^void Element::sideDivY (const int_t   side,$/;"	f	class:Element
sideDivY2	.\semtex\src\element.C	/^void Element::sideDivY2 (const int_t   side,$/;"	f	class:Element
sideEval	.\semtex\src\element.C	/^void Element::sideEval (const int_t  side,$/;"	f	class:Element
sideGeom	.\semtex\src\element.C	/^void Element::sideGeom (const int_t side,$/;"	f	class:Element
sideGet	.\semtex\src\element.C	/^void Element::sideGet (const int_t   side,$/;"	f	class:Element
sideGetY	.\semtex\src\element.C	/^void Element::sideGetY (const int_t side,$/;"	f	class:Element
sideGrad	.\semtex\src\element.C	/^void Element::sideGrad (const int_t   side,$/;"	f	class:Element
sideMulY	.\semtex\src\element.C	/^void Element::sideMulY (const int_t   side,$/;"	f	class:Element
sign	.\semtex\femlib\polylib.c	11;"	d	file:
size	.\semtex\femlib\family.c	/^  integer       size ;		\/* Length of stored vector.           *\/$/;"	m	struct:ivect	file:
size	.\semtex\femlib\family.c	/^  integer       size ;$/;"	m	struct:dvect	file:
size	.\semtex\femlib\family.c	/^  integer       size ;$/;"	m	struct:svect	file:
size	.\semtex\include\Array.h	/^  long size() const          { return getSize(); }$/;"	f	class:vector
size	.\semtex\include\Clist.h	/^  int  size   () const { return num_elmts; }$/;"	f	class:CircularList
skipComments	.\semtex\utility\topre.c	67;"	d	file:
sle	.\semtex\veclib\veclib.h	/^  static void sle (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
sle	.\semtex\veclib\veclib.h	/^  static void sle (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
sle	.\semtex\veclib\veclib.h	/^  static void sle (int_t n, int_t  alpha, const int_t*  x, int_t incx,$/;"	f	class:Veclib
slit	.\semtex\utility\slit.c	/^void slit(FILE *fp, int n, int *col)$/;"	f
slt	.\semtex\veclib\veclib.h	/^  static void slt (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
slt	.\semtex\veclib\veclib.h	/^  static void slt (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
slt	.\semtex\veclib\veclib.h	/^  static void slt (int_t n, int_t  alpha, const int_t*  x, int_t incx,$/;"	f	class:Veclib
smask	.\semtex\veclib\xmask.c	/^void smask (integer n,$/;"	f
smatrix	.\semtex\veclib\memory.c	/^float **smatrix (integer nrl, integer nrh,$/;"	f
smooth	.\semtex\src\field.C	/^Field& Field::smooth (AuxField* slave)$/;"	f	class:Field
smooth	.\semtex\src\field.C	/^void Field::smooth (const int_t nZ ,$/;"	f	class:Field
smul	.\semtex\veclib\veclib.h	/^  static void  smul  (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
smul	.\semtex\veclib\veclib.h	/^  static void  smul  (int_t n, float  alpha,  const float* x, int_t incx,$/;"	f	class:Veclib
smul	.\semtex\veclib\veclib.h	/^  static void  smul  (int_t n, int_t  alpha, const int_t*  x, int_t incx,$/;"	f	class:Veclib
smxm	.\semtex\veclib\XMXM.c	/^void smxm (float* A, integer nra,$/;"	f
smxm	.\semtex\veclib\cveclib.h	886;"	d
smxv	.\semtex\veclib\cveclib.h	841;"	d
smxv	.\semtex\veclib\xmxv.c	/^void smxv (float* A, integer nra, float* B, integer nca, float* C)$/;"	f
smxva	.\semtex\veclib\xmxva.c	/^void smxva (float* A, integer iac, integer iar, float* B, integer ib,$/;"	f
sne	.\semtex\veclib\veclib.h	/^  static void sne (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
sne	.\semtex\veclib\veclib.h	/^  static void sne (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
sne	.\semtex\veclib\veclib.h	/^  static void sne (int_t n, int_t  alpha, const int_t*  x, int_t incx,$/;"	f	class:Veclib
sneg	.\semtex\veclib\xneg.c	/^void sneg (integer n, float* x, integer incx)$/;"	f
snormal	.\semtex\veclib\xrand.c	/^float snormal (float mean, float sdev)$/;"	f
snrm2	.\semtex\veclib\cveclib.h	769;"	d
solve	.\semtex\src\field.C	/^Field& Field::solve (AuxField*             f  ,$/;"	f	class:Field
solver_kind	.\semtex\femlib\cfemdef.h	/^typedef enum solver_kind {$/;"	g
sortGid	.\semtex\utility\enumerate.C	/^int_t Nsys::sortGid (int_t* bmap,$/;"	f	class:Nsys
spbtrf	.\semtex\veclib\cveclib.h	939;"	d
spbtrs	.\semtex\veclib\cveclib.h	953;"	d
spev	.\semtex\veclib\lapack.h	/^  static void spev (const char* jobz, const char* uplo, const int_t& n,$/;"	f	class:Lapack
spline	.\semtex\veclib\veclib.h	/^  static void spline (int_t n, double yp1, double ypn,$/;"	f	class:Veclib
spline	.\semtex\veclib\veclib.h	/^  static void spline (int_t n, float yp1, float ypn,$/;"	f	class:Veclib
spline2D	.\semtex\src\mesh.h	/^class spline2D$/;"	c
splint	.\semtex\veclib\veclib.h	/^  static double splint (int_t n, double x,$/;"	f	class:Veclib
splint	.\semtex\veclib\veclib.h	/^  static float  splint (int_t n, float  x,$/;"	f	class:Veclib
splquad	.\semtex\veclib\veclib.h	/^  static double splquad (const double* xa, const double* ya, const double* y2a,$/;"	f	class:Veclib
splquad	.\semtex\veclib\veclib.h	/^  static float  splquad (const float*  xa, const float*  ya, const float*  y2a,$/;"	f	class:Veclib
spmv	.\semtex\veclib\blas.h	/^  static void spmv (const char* uplo, const integer& n, const double& alpha,$/;"	f	class:Blas
spmv	.\semtex\veclib\blas.h	/^  static void spmv (const char* uplo, const integer& n, const float& alpha,$/;"	f	class:Blas
spolint	.\semtex\veclib\xpolint.c	/^void spolint (const float *xa, const float *ya, integer n,$/;"	f
spoly	.\semtex\veclib\xpolint.c	/^float spoly (integer n, float  x, const float* xp, const float* yp)$/;"	f
spow	.\semtex\veclib\veclib.h	/^  static void spow (const int_t n, const double alpha,$/;"	f	class:Veclib
spow	.\semtex\veclib\veclib.h	/^  static void spow (const int_t n, const float alpha,$/;"	f	class:Veclib
spptrf	.\semtex\veclib\cveclib.h	966;"	d
spptrs	.\semtex\veclib\cveclib.h	977;"	d
sprintf	.\semtex\utility\preplot.c	444;"	d	file:
sqr	.\semtex\veclib\utility.h	/^template<class T> inline T sqr(T x)             { return x * x;            }$/;"	f
sramp	.\semtex\veclib\xramp.c	/^void sramp (integer n, float alpha, float beta, float* x, integer incx)$/;"	f
sranu	.\semtex\veclib\veclib.h	/^  static float  sranu ()         $/;"	f	class:Veclib
sranu	.\semtex\veclib\xrand.c	/^float sranu (void)$/;"	f
srot	.\semtex\veclib\cveclib.h	771;"	d
srotg	.\semtex\veclib\cveclib.h	754;"	d
ssadd	.\semtex\veclib\xsadd.c	/^void ssadd (integer n, float alpha, const float* x, integer incx,$/;"	f
sscal	.\semtex\veclib\cveclib.h	758;"	d
sscanf	.\semtex\utility\preplot.c	447;"	d	file:
sscatr	.\semtex\veclib\xscatr.c	/^void sscatr (integer n, const float* x, const integer* y, float* z)$/;"	f
sscatr_sum	.\semtex\veclib\xscatr_sum.c	/^void sscatr_sum (integer n, const float* x, const integer* y, float* z)$/;"	f
ssdiv	.\semtex\veclib\xsdiv.c	/^void ssdiv (integer n, float alpha, const float* x, integer incx,$/;"	f
ssge	.\semtex\veclib\xsge.c	/^void ssge (integer n, float alpha,$/;"	f
ssle	.\semtex\veclib\xsle.c	/^void ssle (integer n, float alpha,$/;"	f
sslt	.\semtex\veclib\xslt.c	/^void sslt (integer n, float alpha,$/;"	f
ssmul	.\semtex\veclib\xsmul.c	/^void ssmul (integer n, float alpha, const float* x, integer incx,$/;"	f
ssne	.\semtex\veclib\xsne.c	/^void ssne (integer n, float alpha,$/;"	f
sspline	.\semtex\veclib\xspline.c	/^void sspline (integer n, float yp1, float ypn, const float* x, const float* y,$/;"	f
ssplint	.\semtex\veclib\xspline.c	/^float ssplint (integer n, float x, const float* xa, const float* ya,$/;"	f
ssplquad	.\semtex\veclib\xsplquad.c	/^float ssplquad (const float*  xa ,$/;"	f
sspmv	.\semtex\veclib\cveclib.h	821;"	d
sspow	.\semtex\veclib\xspow.c	/^void sspow (const integer n, const float alpha,$/;"	f
sssub	.\semtex\veclib\xssub.c	/^void sssub (integer n, float alpha, const float* x, integer incx,$/;"	f
ssub	.\semtex\veclib\veclib.h	/^  static void ssub (int_t n, double alpha, const double* x, int_t incx, $/;"	f	class:Veclib
ssub	.\semtex\veclib\veclib.h	/^  static void ssub (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
ssub	.\semtex\veclib\veclib.h	/^  static void ssub (int_t n, int_t  alpha, const int_t*  x, int_t incx,$/;"	f	class:Veclib
ssum	.\semtex\veclib\xsum.c	/^float ssum (integer n, const float* x, integer incx)$/;"	f
ssvmvt	.\semtex\veclib\xsvmvt.c	/^void ssvmvt (integer n, float alpha,$/;"	f
ssvpvt	.\semtex\veclib\xsvpvt.c	/^void ssvpvt (integer n, float alpha,$/;"	f
ssvtvm	.\semtex\veclib\xsvtvm.c	/^void ssvtvm (integer n, float alpha, $/;"	f
ssvtvp	.\semtex\veclib\xsvtvp.c	/^void ssvtvp (integer n, float alpha,$/;"	f
ssvvmt	.\semtex\veclib\xsvvmt.c	/^void ssvvmt (integer n, float alpha,$/;"	f
ssvvpt	.\semtex\veclib\xsvvpt.c	/^void ssvvpt (integer n, float alpha,$/;"	f
ssvvtm	.\semtex\veclib\xsvvtm.c	/^void ssvvtm (integer n, float alpha,$/;"	f
ssvvtp	.\semtex\veclib\xsvvtp.c	/^void ssvvtp (integer n, float alpha,$/;"	f
ssvvtt	.\semtex\veclib\xsvvtt.c	/^void ssvvtt (integer n, float alpha,$/;"	f
ssvvttvp	.\semtex\veclib\xsvvttvp.c	/^void ssvvttvp (integer n, const float  alpha,$/;"	f
sswap	.\semtex\veclib\cveclib.h	755;"	d
stack_depth	.\semtex\include\Stack.h	/^  int   stack_depth;$/;"	m	class:Stack
startNode	.\semtex\src\mesh.h	/^    Node*         startNode;$/;"	m	class:Mesh::Side
std	.\semtex\femlib\tests\dealiasmult.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\dpt.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\glzw.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\lagder.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\lagint.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\lagpro.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\polyint.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\shapes.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\tensorproducts.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\testBVD.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\testDLT.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\testDLT2.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\testDLT3.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\testFFT.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\testFFTW.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\testcfft.C	/^using namespace std;$/;"	v
std	.\semtex\femlib\tests\testsine.C	/^using namespace std;$/;"	v
std	.\semtex\src\mesh.C	/^using namespace std;$/;"	v
std	.\semtex\utility\calc.C	/^using namespace std;$/;"	v
std	.\semtex\utility\enumerate.C	/^using namespace std;$/;"	v
std	.\semtex\utility\meshpr.C	/^using namespace std;$/;"	v
step	.\semtex\src\data2df.h	/^  int_t  step;$/;"	m	class:Header
step	.\semtex\src\domain.h	/^  int_t                step;	\/\/ Runtime step number.$/;"	m	class:Domain
step	.\semtex\utility\avgdump.c	/^  int      step             ;$/;"	m	struct:__anon5	file:
step	.\semtex\utility\rstress.c	/^  int      step             ;$/;"	m	struct:__anon8	file:
stream	.\semtex\src\feml.h	/^  istream&    stream    ()       { return feml_file; }$/;"	f	class:FEML
strip	.\semtex\utility\topre.c	66;"	d	file:
sum	.\semtex\src\boundary.C	/^void Boundary::sum (const real_t* src,$/;"	f	class:Boundary
sum	.\semtex\src\condition.C	/^void Mixed::sum (const int_t   side  ,$/;"	f	class:Mixed
sum	.\semtex\src\condition.C	/^void Natural::sum (const int_t   side  ,$/;"	f	class:Natural
sum	.\semtex\src\condition.C	/^void NaturalFunction::sum (const int_t   side  ,$/;"	f	class:NaturalFunction
sum	.\semtex\src\condition.C	/^void NaturalHOPBC::sum (const int_t   side  ,$/;"	f	class:NaturalHOPBC
sum	.\semtex\src\condition.h	/^  virtual void sum       (const int_t, const int_t*,$/;"	f	class:Essential
sum	.\semtex\src\condition.h	/^  virtual void sum       (const int_t, const int_t*,$/;"	f	class:EssentialFunction
sum	.\semtex\veclib\veclib.h	/^  static double sum (int_t n, const double* x, int_t incx)$/;"	f	class:Veclib
sum	.\semtex\veclib\veclib.h	/^  static float  sum (int_t n, const float*  x, int_t incx)$/;"	f	class:Veclib
sum	.\semtex\veclib\veclib.h	/^  static int_t  sum (int_t n, const int_t*  x, int_t incx)$/;"	f	class:Veclib
surfaces	.\semtex\src\mesh.C	/^void Mesh::surfaces ()$/;"	f	class:Mesh
svabs	.\semtex\veclib\xvabs.c	/^void svabs (integer n, const float* x, integer incx,$/;"	f
svadd	.\semtex\veclib\xvadd.c	/^void svadd (integer n,$/;"	f
svamax	.\semtex\veclib\xvamax.c	/^void svamax (integer n,$/;"	f
svatan	.\semtex\veclib\xvatan.c	/^void svatan (integer n, const float* x, integer incx,$/;"	f
svatn2	.\semtex\veclib\xvatn2.c	/^void svatn2 (integer n,$/;"	f
svcos	.\semtex\veclib\xvcos.c	/^void svcos (integer n, const float* x, integer incx,$/;"	f
svdiv	.\semtex\veclib\xvdiv.c	/^void svdiv (integer n,$/;"	f
svect	.\semtex\femlib\family.c	/^typedef struct svect {$/;"	s	file:
svector	.\semtex\veclib\memory.c	/^float* svector (integer nl, integer nh)$/;"	f
svexp	.\semtex\veclib\xvexp.c	/^void svexp (integer n, const float* x, integer incx,$/;"	f
svfloa	.\semtex\veclib\xvfloa.c	/^void svfloa (integer n,$/;"	f
svhypot	.\semtex\veclib\xvhypot.c	/^void svhypot (integer n,$/;"	f
svlg10	.\semtex\veclib\xvlg10.c	/^void svlg10 (integer n, const float* x, integer incx,$/;"	f
svlog	.\semtex\veclib\xvlog.c	/^void svlog (integer n, const float* x, integer incx,$/;"	f
svmag	.\semtex\veclib\xvhypot.c	/^void svmag (int_t n,$/;"	f
svmul	.\semtex\veclib\xvmul.c	/^void svmul (integer n,$/;"	f
svmvt	.\semtex\veclib\veclib.h	/^  static void svmvt (int_t n, double alpha, const double*  x, int_t incx,$/;"	f	class:Veclib
svmvt	.\semtex\veclib\veclib.h	/^  static void svmvt (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
svneg	.\semtex\veclib\xvneg.c	/^void svneg (integer n, const float* x, integer incx,$/;"	f
svnormal	.\semtex\veclib\xrand.c	/^void svnormal (integer n, float mean, float sdev, float* x, integer incx)$/;"	f
svpoly	.\semtex\veclib\xvpoly.c	/^void svpoly (integer n,$/;"	f
svpow	.\semtex\veclib\xvpow.c	/^void svpow (integer n,$/;"	f
svpvt	.\semtex\veclib\veclib.h	/^  static void svpvt (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
svpvt	.\semtex\veclib\veclib.h	/^  static void svpvt (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
svrandom	.\semtex\veclib\xrand.c	/^void svrandom (integer n, float* x, integer incx)$/;"	f
svrecp	.\semtex\veclib\xvrecp.c	/^void svrecp (integer n, const float* x, integer incx,$/;"	f
svsgn	.\semtex\veclib\xvsgn.c	/^void svsgn (integer n, const float* x, integer incx,$/;"	f
svsin	.\semtex\veclib\xvsin.c	/^void svsin (integer n, const float* x, integer incx,$/;"	f
svsqrt	.\semtex\veclib\xvsqrt.c	/^void svsqrt (integer n, const float* x, integer incx,$/;"	f
svsub	.\semtex\veclib\xvsub.c	/^void svsub (integer n,$/;"	f
svtsp	.\semtex\veclib\veclib.h	/^  static void svtsp (int_t n, double alpha, double beta,$/;"	f	class:Veclib
svtsp	.\semtex\veclib\veclib.h	/^  static void svtsp (int_t n, float  alpha, float  beta,$/;"	f	class:Veclib
svtsp	.\semtex\veclib\xsvtsp.c	/^void svtsp (integer n, float alpha, float beta,$/;"	f
svtvm	.\semtex\veclib\veclib.h	/^  static void svtvm (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
svtvm	.\semtex\veclib\veclib.h	/^  static void svtvm (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
svtvp	.\semtex\veclib\veclib.h	/^  static void svtvp (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
svtvp	.\semtex\veclib\veclib.h	/^  static void svtvp (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
svvmt	.\semtex\veclib\veclib.h	/^  static void svvmt (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
svvmt	.\semtex\veclib\veclib.h	/^  static void svvmt (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
svvmvt	.\semtex\veclib\xvvmvt.c	/^void svvmvt (integer n,$/;"	f
svvpt	.\semtex\veclib\veclib.h	/^  static void svvpt (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
svvpt	.\semtex\veclib\veclib.h	/^  static void svvpt (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
svvpvt	.\semtex\veclib\xvvpvt.c	/^void svvpvt (integer n,$/;"	f
svvtm	.\semtex\veclib\veclib.h	/^  static void svvtm (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
svvtm	.\semtex\veclib\veclib.h	/^  static void svvtm (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
svvtp	.\semtex\veclib\veclib.h	/^  static void svvtp (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
svvtp	.\semtex\veclib\veclib.h	/^  static void svvtp (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
svvtt	.\semtex\veclib\veclib.h	/^  static void svvtt (int_t n, double alpha, const double* x, int_t incx,$/;"	f	class:Veclib
svvtt	.\semtex\veclib\veclib.h	/^  static void svvtt (int_t n, float  alpha, const float*  x, int_t incx,$/;"	f	class:Veclib
svvttvp	.\semtex\veclib\veclib.h	/^  static void svvttvp (int_t n, const double  alpha,$/;"	f	class:Veclib
svvttvp	.\semtex\veclib\veclib.h	/^  static void svvttvp (int_t n, const float   alpha,$/;"	f	class:Veclib
svvtvm	.\semtex\veclib\xvvtvm.c	/^void svvtvm (integer n,$/;"	f
svvtvp	.\semtex\veclib\xvvtvp.c	/^void svvtvp (integer n,$/;"	f
svvtvvtm	.\semtex\veclib\xvvtvvtm.c	/^void svvtvvtm (integer n,$/;"	f
svvtvvtp	.\semtex\veclib\xvvtvvtp.c	/^void svvtvvtp (integer n,$/;"	f
svvvtm	.\semtex\veclib\xvvvtm.c	/^void svvvtm (integer n,$/;"	f
svvvtt	.\semtex\veclib\xvvvtt.c	/^void svvvtt (integer n,$/;"	f
swap	.\semtex\veclib\blas.h	/^  static void swap (const integer& n, double* x, const integer& incx,$/;"	f	class:Blas
swap	.\semtex\veclib\blas.h	/^  static void swap (const integer& n, float* x, const integer& incx,$/;"	f	class:Blas
sx	.\semtex\src\mesh.h	/^  vector<real_t> sx    ;	\/\/ spline x-coefficients$/;"	m	class:spline2D
sy	.\semtex\src\mesh.h	/^  vector<real_t> sy    ;	\/\/ spline y-coefficients$/;"	m	class:spline2D
symmetric_part	.\semtex\utility\tensorcalcs.c	/^void symmetric_part(const double T[9], double S[9])$/;"	f
synchronize	.\semtex\femlib\femlib.h	/^  static void synchronize ()$/;"	f	class:Femlib
sys	.\gmsh2sem.py	/^import sys, os$/;"	i
system	.\semtex\src\geometry.h	/^  static CoordSys system    () { return _csys;                 }  $/;"	f	class:Geometry
szero	.\semtex\veclib\xzero.c	/^void szero (integer n, float* x, integer incx)$/;"	f
t1	.\gmsh2sem.py	/^t1    = open (".t1", 'w')$/;"	v
t1	.\gmsh2sem.py	/^t1 = open (".t1", 'r')$/;"	v
t2	.\gmsh2sem.py	/^t2 = open (".t2", 'r')$/;"	v
tail	.\semtex\include\Clist.h	/^  Node* tail;$/;"	m	class:CircularList
tail	.\semtex\include\List.h	/^  ListNode<T>* tail;$/;"	m	class:List
tangTraction	.\semtex\src\edge.C	/^Vector Edge::tangTraction (const char*   grp,$/;"	f	class:Edge
tangTraction	.\semtex\src\field.C	/^Vector Field::tangTraction (const Field* U,$/;"	f	class:Field
tangTractionV	.\semtex\src\field.C	/^void Field::tangTractionV (real_t*      fx,$/;"	f	class:Field
tecfile	.\semtex\utility\sem2tec.c	/^static char    *tecfile;             \/* output file name *\/$/;"	v	file:
tempVector	.\semtex\veclib\cveclib.h	90;"	d
terminal	.\semtex\src\element.h	/^  void terminal (const int_t side,int_t& start,int_t& skip) const$/;"	f	class:Element
testFormat	.\semtex\veclib\veclib.h	/^  static int_t testFormat ()$/;"	f	class:Veclib
thisElmt	.\semtex\src\mesh.h	/^    Elmt*         thisElmt;$/;"	m	class:Mesh::Side
time	.\semtex\src\data2df.h	/^  real_t time;$/;"	m	class:Header
time	.\semtex\src\domain.h	/^  real_t               time;	\/\/ Simulation time.$/;"	m	class:Domain
time	.\semtex\utility\avgdump.c	/^  double   time             ;$/;"	m	struct:__anon5	file:
time	.\semtex\utility\rstress.c	/^  double   time             ;$/;"	m	struct:__anon8	file:
timestep	.\semtex\utility\avgdump.c	/^  double   timestep         ;$/;"	m	struct:__anon5	file:
timestep	.\semtex\utility\rstress.c	/^  double   timestep         ;$/;"	m	struct:__anon8	file:
tokens	.\semtex\src\feml.C	/^bool FEML::tokens ()$/;"	f	class:FEML
top	.\semtex\include\List.h	/^  ListNode<T>* top;$/;"	m	class:ListIterator
top	.\semtex\include\Stack.h	/^  StackNode<T>* top;$/;"	m	class:Stack
tpr2d	.\semtex\femlib\femlib.h	/^  static void tpr2d (const real_t* x, real_t* y, real_t* t,$/;"	f	class:Femlib
trace	.\semtex\utility\tensorcalcs.c	/^double trace(const double T[9])$/;"	f
traction	.\semtex\src\edge.C	/^void Edge::traction (const int_t   k   , \/\/ Fourier mode index$/;"	f	class:Edge
traction	.\semtex\src\field.C	/^void Field::traction (real_t*      n, \/\/ Normal\/pressure$/;"	f	class:Field
transform	.\semtex\src\domain.C	/^void Domain::transform (const int_t sign)$/;"	f	class:Domain
transform	.\semtex\utility\project.C	/^Field2DF& Field2DF::transform (const int_t sign)$/;"	f	class:Field2DF
transform_kind	.\semtex\femlib\cfemdef.h	/^typedef enum transform_kind {$/;"	g
transpose	.\semtex\utility\tensorcalcs.c	/^void transpose(const double T[9], double O[9])$/;"	f
transpose_in_place	.\semtex\utility\tensorcalcs.c	/^void transpose_in_place(double T[9])$/;"	f
true	.\semtex\include\Boolean.h	/^    enum constants { false = 0, true = 1 };$/;"	e	enum:Boolean::constants
type	.\semtex\utility\sem2tec.c	/^static char    type[MAXFIELDS];$/;"	v	file:
type	.\semtex\utility\sem2vtk.c	/^static char    type[MAXFIELDS];$/;"	v	file:
u	.\semtex\src\domain.h	/^  vector<Field*>       u   ;	\/\/ Solution fields: velocities, pressure.$/;"	m	class:Domain
udat	.\semtex\src\domain.h	/^  vector<real_t*>      udat;	\/\/ Data storage area for solution fields.$/;"	m	class:Domain
uint32	.\semtex\utility\preplot.c	/^  typedef unsigned int  uint32;$/;"	t	file:
uint32	.\semtex\utility\preplot.c	/^  typedef unsigned long int  uint32;$/;"	t	file:
uniform	.\semtex\utility\project.C	/^static int_t uniform = 0;$/;"	v	file:
uniknot	.\semtex\femlib\polyops.c	/^void uniknot (const int_t nk,$/;"	f
unlink	.\semtex\utility\preplot.c	437;"	d	file:
update	.\semtex\src\statistics.C	/^void Statistics::update (AuxField** wrka,$/;"	f	class:Statistics
upperCase	.\semtex\src\misc.C	/^char* upperCase (char *s)$/;"	f
upperCase	.\semtex\utility\topre.c	68;"	d	file:
usage	.\semtex\utility\convert.c	/^static char  usage[] = "Usage: convert [-format] [-h] [-v] [-o output] "$/;"	v	file:
usage	.\semtex\utility\sem2tec.c	/^static char usage[] = $/;"	v	file:
usage	.\semtex\utility\sem2vtk.c	/^static char usage[] = $/;"	v	file:
v	.\semtex\include\Boolean.h	/^    char v;$/;"	m	class:Boolean
vabs	.\semtex\veclib\veclib.h	/^  static void vabs (int_t n, const double*  x, int_t incx,$/;"	f	class:Veclib
vabs	.\semtex\veclib\veclib.h	/^  static void vabs (int_t n, const float*   x, int_t incx,$/;"	f	class:Veclib
vabs	.\semtex\veclib\veclib.h	/^  static void vabs (int_t n, const int_t* x, int_t incx,$/;"	f	class:Veclib
vadd	.\semtex\veclib\veclib.h	/^  static void vadd (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vadd	.\semtex\veclib\veclib.h	/^  static void vadd (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vadd	.\semtex\veclib\veclib.h	/^  static void vadd (int_t n, const int_t*  x, int_t incx,$/;"	f	class:Veclib
value	.\semtex\femlib\femlib.h	/^  static real_t value (const char* s)$/;"	f	class:Femlib
value	.\semtex\femlib\femlib.h	/^  static void value (const char* s, const real_t p)$/;"	f	class:Femlib
value	.\semtex\src\bcmgr.h	/^    char*      value;$/;"	m	class:BCmgr::CondRecd
vamax	.\semtex\veclib\veclib.h	/^  static void vamax (int_t n, const double*  x, int_t incx,$/;"	f	class:Veclib
vamax	.\semtex\veclib\veclib.h	/^  static void vamax (int_t n, const float*   x, int_t incx,$/;"	f	class:Veclib
vamax	.\semtex\veclib\veclib.h	/^  static void vamax (int_t n, const int_t* x, int_t incx,$/;"	f	class:Veclib
vatan	.\semtex\veclib\veclib.h	/^  static void vatan (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vatan	.\semtex\veclib\veclib.h	/^  static void vatan (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vatn2	.\semtex\veclib\veclib.h	/^  static void vatn2 (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vatn2	.\semtex\veclib\veclib.h	/^  static void vatn2 (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vcos	.\semtex\veclib\veclib.h	/^  static void vcos (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vcos	.\semtex\veclib\veclib.h	/^  static void vcos (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vdble	.\semtex\veclib\vdble.c	/^void vdble (integer n, const float *x, integer incx, double *y, integer incy)$/;"	f
vdble	.\semtex\veclib\veclib.h	/^  static void vdble (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vdiv	.\semtex\veclib\veclib.h	/^  static void vdiv (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vdiv	.\semtex\veclib\veclib.h	/^  static void vdiv (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vec	.\semtex\utility\tensorcalcs.c	/^void vec(const double A[9], double V[3])$/;"	f
vector	.\semtex\include\Array.h	/^  vector ()                     { num_elts = 0; data = 0; } $/;"	f	class:vector
vector	.\semtex\include\Array.h	/^  vector (const long n)         { num_elts = n;$/;"	f	class:vector
vector	.\semtex\include\Array.h	/^  vector (const vector<T>& src) { num_elts = src.num_elts;$/;"	f	class:vector
vector	.\semtex\include\Array.h	/^class vector$/;"	c
vectorFlux	.\semtex\src\edge.C	/^real_t Edge::vectorFlux (const char*   grp,$/;"	f	class:Edge
verb	.\semtex\utility\enumerate.C	/^static int_t       verb   = 0;$/;"	v	file:
verbose	.\semtex\utility\convert.c	/^static int   verbose = 0;$/;"	v	file:
verbose	.\semtex\utility\integral.C	/^static int_t verbose = 0;$/;"	v	file:
verbose	.\semtex\utility\interp.C	/^static int_t verbose = 0;$/;"	v	file:
vexp	.\semtex\veclib\veclib.h	/^  static void vexp (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vexp	.\semtex\veclib\veclib.h	/^  static void vexp (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vfloa	.\semtex\veclib\veclib.h	/^  static void vfloa (int_t n, const int_t*  x, int_t incx,$/;"	f	class:Veclib
vfloa	.\semtex\veclib\veclib.h	/^  static void vfloa (int_t n, const int_t* x, int_t incx,$/;"	f	class:Veclib
vfprintf	.\semtex\utility\preplot.c	443;"	d	file:
vhypot	.\semtex\veclib\veclib.h	/^  static void vhypot (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vhypot	.\semtex\veclib\veclib.h	/^  static void vhypot (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
visc	.\semtex\src\data2df.h	/^  real_t visc;$/;"	m	class:Header
vlg10	.\semtex\veclib\veclib.h	/^  static void vlg10 (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vlg10	.\semtex\veclib\veclib.h	/^  static void vlg10 (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vlog	.\semtex\veclib\veclib.h	/^  static void vlog (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vlog	.\semtex\veclib\veclib.h	/^  static void vlog (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vmag	.\semtex\veclib\veclib.h	/^  static void vmag (int_t n, const double* w, int_t incw,$/;"	f	class:Veclib
vmag	.\semtex\veclib\veclib.h	/^  static void vmag (int_t n, const float*  w, int_t incw,$/;"	f	class:Veclib
vmul	.\semtex\veclib\veclib.h	/^  static void vmul (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vmul	.\semtex\veclib\veclib.h	/^  static void vmul (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vmul	.\semtex\veclib\veclib.h	/^  static void vmul (int_t n, const int_t*  x, int_t incx,$/;"	f	class:Veclib
vneg	.\semtex\veclib\veclib.h	/^  static void vneg (int_t n,$/;"	f	class:Veclib
vnormal	.\semtex\veclib\veclib.h	/^  static void  vnormal (int_t n, double mean, double sdev,$/;"	f	class:Veclib
vnormal	.\semtex\veclib\veclib.h	/^  static void  vnormal (int_t n, float  mean, float  sdev,$/;"	f	class:Veclib
vort	.\semtex\utility\tensorcalcs.c	/^void vort(const double A[9], double w[3])$/;"	f
vpoly	.\semtex\veclib\veclib.h	/^  static void vpoly (int_t n, const double* x, int_t incx, int_t m,$/;"	f	class:Veclib
vpoly	.\semtex\veclib\veclib.h	/^  static void vpoly (int_t n, const float*  x, int_t incx, int_t m,$/;"	f	class:Veclib
vpow	.\semtex\veclib\veclib.h	/^  static void vpow (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vpow	.\semtex\veclib\veclib.h	/^  static void vpow (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vprintf	.\semtex\utility\preplot.c	442;"	d	file:
vrandom	.\semtex\veclib\veclib.h	/^  static void  vrandom (int_t n, double* x, int_t incx)$/;"	f	class:Veclib
vrandom	.\semtex\veclib\veclib.h	/^  static void  vrandom (int_t n, float*  x, int_t incx)$/;"	f	class:Veclib
vrecp	.\semtex\veclib\veclib.h	/^  static void vrecp (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vrecp	.\semtex\veclib\veclib.h	/^  static void vrecp (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vsgn	.\semtex\veclib\veclib.h	/^  static void vsgn (int_t n,$/;"	f	class:Veclib
vsin	.\semtex\veclib\veclib.h	/^  static void vsin (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vsin	.\semtex\veclib\veclib.h	/^  static void vsin (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vsngl	.\semtex\veclib\veclib.h	/^  static void vsngl (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vsngl	.\semtex\veclib\vsngl.c	/^void vsngl (integer n, const double *x, integer incx, float *y, integer incy)$/;"	f
vsprintf	.\semtex\utility\preplot.c	441;"	d	file:
vsqrt	.\semtex\veclib\veclib.h	/^  static void vsqrt (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vsqrt	.\semtex\veclib\veclib.h	/^  static void vsqrt (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vsub	.\semtex\veclib\veclib.h	/^  static void vsub (int_t n, const double* x, int_t incx,$/;"	f	class:Veclib
vsub	.\semtex\veclib\veclib.h	/^  static void vsub (int_t n, const float*  x, int_t incx,$/;"	f	class:Veclib
vsub	.\semtex\veclib\veclib.h	/^  static void vsub (int_t n, const int_t*  x, int_t incx,$/;"	f	class:Veclib
vtkfile	.\semtex\utility\sem2vtk.c	/^static char    *vtkfile;             \/* output file name *\/$/;"	v	file:
vvmvt	.\semtex\veclib\veclib.h	/^  static void vvmvt (int_t n, const double* w, int_t incw,$/;"	f	class:Veclib
vvmvt	.\semtex\veclib\veclib.h	/^  static void vvmvt (int_t n, const float*  w, int_t incw,$/;"	f	class:Veclib
vvpvt	.\semtex\veclib\veclib.h	/^  static void vvpvt (int_t n, const double* w, int_t incw,$/;"	f	class:Veclib
vvpvt	.\semtex\veclib\veclib.h	/^  static void vvpvt (int_t n, const float*  w, int_t incw,$/;"	f	class:Veclib
vvtvm	.\semtex\veclib\veclib.h	/^  static void vvtvm (int_t n, const double* w, int_t incw,$/;"	f	class:Veclib
vvtvm	.\semtex\veclib\veclib.h	/^  static void vvtvm (int_t n, const float*  w, int_t incw,$/;"	f	class:Veclib
vvtvp	.\semtex\veclib\veclib.h	/^  static void vvtvp (int_t n, const double* w, int_t incw,$/;"	f	class:Veclib
vvtvp	.\semtex\veclib\veclib.h	/^  static void vvtvp (int_t n, const float*  w, int_t incw,$/;"	f	class:Veclib
vvtvvtm	.\semtex\veclib\veclib.h	/^  static void vvtvvtm (int_t n, const double* v, int_t incv,$/;"	f	class:Veclib
vvtvvtm	.\semtex\veclib\veclib.h	/^  static void vvtvvtm (int_t n, const float*  v, int_t incv,$/;"	f	class:Veclib
vvtvvtp	.\semtex\veclib\veclib.h	/^  static void vvtvvtp (int_t n, const double* v, int_t incv,$/;"	f	class:Veclib
vvtvvtp	.\semtex\veclib\veclib.h	/^  static void vvtvvtp (int_t n, const float*  v, int_t incv,$/;"	f	class:Veclib
vvvtm	.\semtex\veclib\veclib.h	/^  static void vvvtm (int_t n, const double* w, int_t incw,$/;"	f	class:Veclib
vvvtm	.\semtex\veclib\veclib.h	/^  static void vvvtm (int_t n, const float*  w, int_t incw,$/;"	f	class:Veclib
vvvtt	.\semtex\veclib\veclib.h	/^  static void vvvtt (int_t n, const double* w, int_t incw,$/;"	f	class:Veclib
vvvtt	.\semtex\veclib\veclib.h	/^  static void vvvtt (int_t n, const float*  w, int_t incw,$/;"	f	class:Veclib
waveProp	.\semtex\dns\integrate.C	/^static void waveProp (Domain*           D ,$/;"	f	file:
weight	.\semtex\femlib\operators.c	/^  real_t*        weight; \/* Quadrature weights                               *\/$/;"	m	struct:quadop	file:
weight	.\semtex\src\element.C	/^void Element::weight (real_t* tgt) const$/;"	f	class:Element
words	.\gmsh2sem.py	/^            words = line.split()$/;"	v
wrap	.\semtex\utility\sem2tec.c	/^static void wrap (void)$/;"	f	file:
wrap	.\semtex\utility\sem2vtk.c	/^static void wrap (void)$/;"	f	file:
writeField	.\semtex\src\misc.C	/^void writeField (ostream&           file   ,$/;"	f
write_tec	.\semtex\utility\sem2tec.c	/^static void write_tec (FILE *fp)$/;"	f	file:
write_vtk	.\semtex\utility\sem2vtk.c	/^static void write_vtk (FILE *fp)$/;"	f	file:
x	.\semtex\femlib\cfemdef.h	/^typedef struct { real_t x, y, z; } Point;$/;"	m	struct:__anon1
x	.\semtex\src\mesh.h	/^  vector<real_t> x     ;	\/\/ knot x-coordinates$/;"	m	class:spline2D
x	.\semtex\utility\sem2tec.c	/^static double  *data[MAXFIELDS], *x, *y, *z;$/;"	v	file:
x	.\semtex\utility\sem2vtk.c	/^static double  *data[MAXFIELDS], *x, *y, *z;$/;"	v	file:
xadd	.\semtex\include\List.h	/^  int xadd (T x) {		\/\/ -- Insert if non-replicative.$/;"	f	class:List
y	.\semtex\femlib\cfemdef.h	/^typedef struct { real_t x, y, z; } Point;$/;"	m	struct:__anon1
y	.\semtex\src\mesh.h	/^  vector<real_t> y     ;	\/\/ knot y-coordinates$/;"	m	class:spline2D
y	.\semtex\utility\sem2tec.c	/^static double  *data[MAXFIELDS], *x, *y, *z;$/;"	v	file:
y	.\semtex\utility\sem2vtk.c	/^static double  *data[MAXFIELDS], *x, *y, *z;$/;"	v	file:
z	.\semtex\femlib\cfemdef.h	/^typedef struct { real_t x, y, z; } Point;$/;"	m	struct:__anon1
z	.\semtex\utility\sem2tec.c	/^static double  *data[MAXFIELDS], *x, *y, *z;$/;"	v	file:
z	.\semtex\utility\sem2vtk.c	/^static double  *data[MAXFIELDS], *x, *y, *z;$/;"	v	file:
z3matrix	.\semtex\veclib\memory.c	/^zomplex ***z3matrix (integer nrl, integer nrh,$/;"	f
zero	.\semtex\veclib\veclib.h	/^  static void zero (int_t n, double* x, int_t incx)$/;"	f	class:Veclib
zero	.\semtex\veclib\veclib.h	/^  static void zero (int_t n, float*  x, int_t incx)$/;"	f	class:Veclib
zero	.\semtex\veclib\veclib.h	/^  static void zero (int_t n, int_t*  x, int_t incx)$/;"	f	class:Veclib
zfft	.\semtex\veclib\xfft.c	/^void zfft(int N, zomplex *Data, int TabLen, const zomplex *Wtab, int Forward)$/;"	f
zmatrix	.\semtex\veclib\memory.c	/^zomplex **zmatrix (integer nrl, integer nrh,$/;"	f
zomplex	.\semtex\veclib\cveclib.h	/^typedef struct  {double Re, Im;}         zomplex;$/;"	t	typeref:struct:__anon11
zpreft	.\semtex\veclib\xfft.c	/^void zpreft(int K, zomplex *Wtab, int Sign)$/;"	f
zquad	.\semtex\femlib\operators.c	/^void zquad (const real_t** point , \/* Quadrature points.                     *\/$/;"	f
zvector	.\semtex\veclib\memory.c	/^zomplex* zvector(integer nl, integer nh)$/;"	f
zwgc	.\semtex\femlib\polylib.h	62;"	d
zwgl	.\semtex\femlib\polylib.h	57;"	d
zwglc	.\semtex\femlib\polylib.h	65;"	d
zwgll	.\semtex\femlib\polylib.h	60;"	d
zwgrcm	.\semtex\femlib\polylib.h	63;"	d
zwgrcp	.\semtex\femlib\polylib.h	64;"	d
zwgrj	.\semtex\femlib\polylib.h	104;"	d
zwgrl	.\semtex\femlib\polylib.h	105;"	d
zwgrlm	.\semtex\femlib\polylib.h	58;"	d
zwgrlp	.\semtex\femlib\polylib.h	59;"	d
~Analyser	.\semtex\src\analysis.h	/^  ~Analyser () { }$/;"	f	class:Analyser
~BoundarySys	.\semtex\src\bsys.h	/^  ~BoundarySys () { };$/;"	f	class:BoundarySys
~CircularList	.\semtex\include\Clist.h	/^CircularList<T>::~CircularList() {$/;"	f	class:CircularList
~Condition	.\semtex\src\condition.h	/^  virtual ~Condition()   { }$/;"	f	class:Condition
~Curve	.\semtex\src\mesh.h	/^  virtual ~Curve () { }$/;"	f	class:Curve
~Data2DF	.\semtex\src\data2df.h	/^  ~Data2DF () { delete [] _data; delete [] _plane; }$/;"	f	class:Data2DF
~Element	.\semtex\src\element.C	/^Element::~Element ()$/;"	f	class:Element
~FEML	.\semtex\src\feml.h	/^  ~FEML () { feml_file.close(); }$/;"	f	class:FEML
~Field	.\semtex\src\field.h	/^ ~Field  () { }$/;"	f	class:Field
~Flowrate	.\semtex\src\flowrate.h	/^  ~Flowrate () { }$/;"	f	class:Flowrate
~Header	.\semtex\src\data2df.h	/^ ~Header() { delete [] sess; delete [] sesd; delete [] flds; delete [] frmt; }$/;"	f	class:Header
~List	.\semtex\include\List.h	/^  ~List() {$/;"	f	class:List
~MatrixSys	.\semtex\src\matrix.C	/^MatrixSys::~MatrixSys()$/;"	f	class:MatrixSys
~ModalMatrixSys	.\semtex\src\matrix.C	/^ModalMatrixSys::~ModalMatrixSys ()$/;"	f	class:ModalMatrixSys
~NumberSys	.\semtex\src\numbersys.h	/^ ~NumberSys () { }; $/;"	f	class:NumberSys
~Stack	.\semtex\include\Stack.h	/^  ~Stack() {$/;"	f	class:Stack
~matrix	.\semtex\include\Array.h	/^  ~matrix () {$/;"	f	class:matrix
~vector	.\semtex\include\Array.h	/^  ~vector ()                    { delete [] data; }$/;"	f	class:vector
